{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[{"_id":"source/CNAME","path":"CNAME","modified":0,"renderable":0},{"_id":"source/robots.txt","path":"robots.txt","modified":0,"renderable":0},{"_id":"source/apple-touch-icon.png","path":"apple-touch-icon.png","modified":0,"renderable":0},{"_id":"source/favicon.ico","path":"favicon.ico","modified":0,"renderable":0},{"_id":"themes/maupassant/source/css/jquery.fancybox.css","path":"css/jquery.fancybox.css","modified":0,"renderable":1},{"_id":"themes/maupassant/source/css/style.scss","path":"css/style.scss","modified":0,"renderable":1},{"_id":"themes/maupassant/source/fancybox/blank.gif","path":"fancybox/blank.gif","modified":0,"renderable":1},{"_id":"themes/maupassant/source/fancybox/fancybox_loading.gif","path":"fancybox/fancybox_loading.gif","modified":0,"renderable":1},{"_id":"themes/maupassant/source/fancybox/fancybox_loading@2x.gif","path":"fancybox/fancybox_loading@2x.gif","modified":0,"renderable":1},{"_id":"themes/maupassant/source/fancybox/fancybox_overlay.png","path":"fancybox/fancybox_overlay.png","modified":0,"renderable":1},{"_id":"themes/maupassant/source/fancybox/fancybox_sprite.png","path":"fancybox/fancybox_sprite.png","modified":0,"renderable":1},{"_id":"themes/maupassant/source/fancybox/fancybox_sprite@2x.png","path":"fancybox/fancybox_sprite@2x.png","modified":0,"renderable":1},{"_id":"themes/maupassant/source/js/codeblock-resizer.js","path":"js/codeblock-resizer.js","modified":0,"renderable":1},{"_id":"themes/maupassant/source/js/fancybox.js","path":"js/fancybox.js","modified":0,"renderable":1},{"_id":"themes/maupassant/source/js/search.js","path":"js/search.js","modified":0,"renderable":1},{"_id":"themes/maupassant/source/js/share.js","path":"js/share.js","modified":0,"renderable":1},{"_id":"themes/maupassant/source/js/smartresize.js","path":"js/smartresize.js","modified":0,"renderable":1},{"_id":"themes/maupassant/source/js/totop.js","path":"js/totop.js","modified":0,"renderable":1}],"Cache":[{"_id":"source/.DS_Store","hash":"1fc91f9d7ceb23da2063fb44f24e81d1a359bfa4","modified":1526441459968},{"_id":"source/CNAME","hash":"1dd2871f1d1edbb369ff272d10431cc029f1286f","modified":1526010418787},{"_id":"source/robots.txt","hash":"fe301ff6ce278429b113a06a558a244807e642a0","modified":1526010418797},{"_id":"source/apple-touch-icon.png","hash":"bcc42f6158418aaf3efc04c68e4eac2dec7aaf97","modified":1526010418796},{"_id":"source/favicon.ico","hash":"b9e93fdd6b61eeed5f19b23a3c86e122f08c70bf","modified":1526010418796},{"_id":"themes/maupassant/.travis.yml","hash":"0339959f29deddc365e8fe8bd85da524410b9a23","modified":1526010418797},{"_id":"themes/maupassant/LICENSE","hash":"019dc6a9aba02ae3aaabca45f39aecd6e8e7f1d8","modified":1526010418797},{"_id":"themes/maupassant/README.md","hash":"75d8c42569809961953d1934de445418c00ab94c","modified":1526010418798},{"_id":"themes/maupassant/_config.yml","hash":"88352790fbc46b036a0fd5a5ce8fb578366e9a44","modified":1526010418798},{"_id":"themes/maupassant/package.json","hash":"81fb4e2ac051ecfb9a93f37b28910291b939771a","modified":1526010418808},{"_id":"source/_posts/Aliyun-Open-IPv6.md","hash":"f7141be3b14a32eb562bba131e805e3b62df167f","modified":1526010418788},{"_id":"source/_posts/.DS_Store","hash":"f60b7ec5e8fdc3d6579bf51323fdc77d3aa70b28","modified":1526441445405},{"_id":"source/_posts/Create-Yii2-Project.md","hash":"2a477be195e3d560c6aabfe086363590ba1bd887","modified":1526010418788},{"_id":"source/_posts/Container-Application-Design.md","hash":"fdc6bbd7206d5dedec38e032d895a84ab73b8ac4","modified":1526267580397},{"_id":"source/_posts/How-to-become-an-excellent-architect.md","hash":"b0ba6c384cae682f4e7028dc4122d15b11dfdd4f","modified":1526267555458},{"_id":"source/_posts/DynamoDB-Ubuntu.md","hash":"9019ad11801d9f161fe0c4f6ff9e88922a1d8fcb","modified":1526010418788},{"_id":"source/_posts/Https-Nginx.md","hash":"7e0a702f266866cce49bb62d89f009b3e017f7ad","modified":1526010418790},{"_id":"source/_posts/Install-And-Deploy-AirFlow.md","hash":"ce0f7e4dbdd684dd94a1021c47745736fec0b942","modified":1526010418791},{"_id":"source/_posts/Install-MongoDB-on-ubuntu16-04.md","hash":"4015565cd3c4db0f514bedaeae8b2bde71bae496","modified":1526010418791},{"_id":"source/_posts/Install-Nginx-PHP7-MySQL-on-Ubuntu16-04.md","hash":"7f027c7d03fb2a4817453c33af666cc827ac6933","modified":1526010418792},{"_id":"source/_posts/Linux-common-shells.md","hash":"1bfce7fb9cda7867e1b7a12df1914307337e1c79","modified":1526010418792},{"_id":"source/_posts/Mac-OSX-Basic-SoftWare.md","hash":"85b76ccbac5c31bcfa13ec72d806f1cd04bfe8e0","modified":1526010418793},{"_id":"source/_posts/Install-Shadowsocks-Server.md","hash":"cbd68a3ca7e4883aa9e539965fa5d7199bf8717a","modified":1526010418792},{"_id":"source/_posts/PHP-Matters-Needing-Attention.md","hash":"a4c5429d09b9d77b4225fdb08dc0e36465cee521","modified":1526010418793},{"_id":"source/_posts/PHPFPM-Process-Manager.md","hash":"232074b0711f3fff01407a1322103b19692e4c3d","modified":1526010418793},{"_id":"source/_posts/Raiils-Cache-Simple.md","hash":"c3b0533a954d68e0e485858f6e766e0ce127555c","modified":1526010418794},{"_id":"source/_posts/Siege.md","hash":"bf763e6a201109b926669e3dfff5ff1b7202475d","modified":1526010418794},{"_id":"source/_posts/Software-PPA-Sources.md","hash":"50c6b1a434ec03dcfbd5d4afdc42817831d81a1b","modified":1526010418794},{"_id":"source/_posts/Talk-About-The-Architecture.md","hash":"dcd897de1b2c33c433b3cead70737bf2b2adb601","modified":1526441909436},{"_id":"source/_posts/Ubuntu-Swap.md","hash":"5805c455e3cbb06fa1cee19e3e7a8ecafca71d9d","modified":1526010418794},{"_id":"source/_posts/Use-Brew-Install-Rbenv.md","hash":"7aa28306e0477b40560f105b3d5695bc31507a8d","modified":1526010418795},{"_id":"source/_posts/gem-note.md","hash":"405c7a2059e052399acdf9c3549c06bc87bc60c1","modified":1526010418795},{"_id":"source/_posts/Use-Mina-Deploy-Yii2.md","hash":"05ee050b5e4934e24134e6538036fd8f12ac3c68","modified":1526010418795},{"_id":"source/about/index.md","hash":"00f238fc1b27426876ab10f19e7de08924cdd702","modified":1526010418795},{"_id":"themes/maupassant/languages/de-DE.yml","hash":"5d3556a885e355a8c2da65ef3e7b3ee36a628bfa","modified":1526010418798},{"_id":"themes/maupassant/languages/es-ES.yml","hash":"58e1d04bcd1834fa9d2960e18e027abbbccbedc9","modified":1526010418799},{"_id":"themes/maupassant/languages/en.yml","hash":"e13ab1a2d2f1edbe67b4c035fd4667cb6a31db8e","modified":1526010418799},{"_id":"themes/maupassant/languages/fr-FR.yml","hash":"b47906ec0abf867fb3e3360bc046b7afb68aee25","modified":1526010418799},{"_id":"themes/maupassant/languages/ko.yml","hash":"909a33e0befa6978e8e72157c6b415b48551ee31","modified":1526010418800},{"_id":"themes/maupassant/languages/zh-CN.yml","hash":"ebacfa5d0c14d603e0d505757adb24c0bbe5dd13","modified":1526010418800},{"_id":"themes/maupassant/languages/zh-TW.yml","hash":"56b65995c60e99dcebbf00168447fd225d28e5b2","modified":1526010418800},{"_id":"themes/maupassant/layout/archive.jade","hash":"0050c883b4f202add71c8664d65e6072179e7190","modified":1526010418805},{"_id":"themes/maupassant/layout/base.jade","hash":"9d8b0ae0ad53e6c173b565b89a06b4f141527ccf","modified":1526010418806},{"_id":"themes/maupassant/layout/base-without-sidebar.jade","hash":"1ad721de96784bf4253316b796db6200148d4152","modified":1526010418806},{"_id":"themes/maupassant/layout/index.jade","hash":"7466ce52023ed8a413a6b4461354a9e20e62fc14","modified":1526010418806},{"_id":"themes/maupassant/layout/post.jade","hash":"9cf29fb0daed95935154ce0fa2b154df5a9b11b1","modified":1526010418807},{"_id":"themes/maupassant/layout/page.jade","hash":"8d70fd3b93f2c9087a9ea7ec538dcc1d413bea01","modified":1526010418806},{"_id":"themes/maupassant/layout/single-column.jade","hash":"c35fff4d9b331a41af5bc10f4278ec3d9da503db","modified":1526010418807},{"_id":"themes/maupassant/layout/timeline.jade","hash":"f03d8df63a188543cfe4e85e76194abe081411a1","modified":1526010418807},{"_id":"source/_posts/Container-Application-Design/1526261691982-7ead3978-fe73-423f-a675-90309a8bc859-image.png","hash":"d2925d443750ebf09efc0deb41e59aae41750d19","modified":1526441837129},{"_id":"source/_posts/Container-Application-Design/1526261707323-33e04e90-0449-4fea-8846-49a7a3cf6915-image-resized.png","hash":"5eea2b0de89ec718b258cab85423bf9d1b6123d4","modified":1526441846593},{"_id":"source/_posts/Container-Application-Design/1526261801128-be721a67-971b-4f35-960e-0ce907328f73-image-resized.png","hash":"db37e0b924e7b34eb0e377d1e012cb2e6ee331bb","modified":1526441846813},{"_id":"source/_posts/Container-Application-Design/1526261901806-402b717e-5379-476a-ab90-d419ff516bc8-image.png","hash":"412584a836024f329caf5d4370bf5a5b4bf27ca2","modified":1526441866075},{"_id":"source/_posts/Container-Application-Design/1526261921352-50cf453f-a1eb-4d16-bde3-c47f7ecb5c96-image.png","hash":"49f9fd8a0c6b73dc3c0ecc31ef97e57ee6d550c8","modified":1526441597343},{"_id":"source/_posts/Container-Application-Design/1526261951920-41f3d5f6-38ef-4619-91a1-1f802c90696a-image.png","hash":"88ea530bf686be60830ad49f0eef531c55237954","modified":1526441893127},{"_id":"source/_posts/Container-Application-Design/1526261967663-aaa59614-51c8-43cc-bde6-237e644fbbb2-image.png","hash":"9ad5832f3f52745962aef3f363e4b6999ce1757f","modified":1526441871171},{"_id":"source/_posts/Container-Application-Design/1526261996216-83455d4d-0512-4dbb-877e-1cd6e97e76ed-image.png","hash":"ca8a4886388f5c99f1c5bd5cfd57048f5660ce3f","modified":1526441606731},{"_id":"source/_posts/Container-Application-Design/1526262054188-bc378617-e76c-4498-9c0b-82f7704e6496-image-resized.png","hash":"c6e31a0d21a6857691f4c19de047517e476cbe95","modified":1526441899788},{"_id":"source/_posts/Container-Application-Design/1526262095283-87098624-d8fc-4286-a2af-ac94f4b0f47b-image.png","hash":"de6b1888a417f04a414b0df94121c71c7759e2b7","modified":1526441667344},{"_id":"source/_posts/Container-Application-Design/1526262238219-a6221168-99d3-4f03-bfc6-ca2fad38c325-image.png","hash":"c8dfa49bb6814b0354abe05030f39c92b8ed14dc","modified":1526441648944},{"_id":"source/_posts/Container-Application-Design/1526262264669-62a724a4-88d8-4511-9120-328cd7a4af15-image-resized.png","hash":"4ffd61cb5bf47ced8cfb6b52ea7cb07e40caeafa","modified":1526441697386},{"_id":"source/_posts/Container-Application-Design/1526262303219-9324cca1-515f-4424-b9b8-c19b8814b9c3-image.png","hash":"2e0b6be6ed5ddfa841646ee1461221a633fa1a70","modified":1526441885804},{"_id":"source/_posts/Container-Application-Design/1526262348948-fce2d10f-320e-4d52-89eb-931bf394454c-image-resized.png","hash":"ad7031fc1f83c5e5da331c73fa9c5f339fc040a1","modified":1526441915511},{"_id":"source/_posts/Container-Application-Design/1526262383289-ee67fbb1-8251-4af3-bb61-f28db3e9bbc0-image.png","hash":"5bc79fb19611c8a03096d114bdd2692126c6a849","modified":1526441906536},{"_id":"source/_posts/Container-Application-Design/.DS_Store","hash":"df2fbeb1400acda0909a32c1cf6bf492f1121e07","modified":1526266561019},{"_id":"source/_posts/Container-Application-Design/1526262452948-23ea67c9-470f-4f7b-8a03-c76307b4415f-image-resized.png","hash":"3fad58540e4c8b618686fc6eb77b16d12248b463","modified":1526441925989},{"_id":"source/_posts/Container-Application-Design/1526262469915-5b17a04f-67ce-46de-967f-8d8ef906ac68-image.png","hash":"d3623b1c127ca8960cdb0b4a920d09fb5d524b64","modified":1526441695690},{"_id":"source/_posts/Talk-About-The-Architecture/1526437909260-9eff08f6-b8c8-436d-81ff-2ebc3f639464-image.png","hash":"cc70b4068204e056f2868601a059f7f5fe471fe2","modified":1526441803859},{"_id":"source/_posts/Talk-About-The-Architecture/1526437772448-7783bdeb-4306-4847-85db-3754065cdea8-image.png","hash":"8263de3f2822ac750fbb9fbf37cee5a8e8166ccb","modified":1526441797041},{"_id":"source/_posts/Talk-About-The-Architecture/1526438239613-1cdabcae-9196-4aad-869d-94285ae76d41-image.png","hash":"24cfb369578d6b80e692470f5edfd6d204a7db72","modified":1526441838930},{"_id":"source/_posts/Talk-About-The-Architecture/1526438275615-26fee321-9534-4a04-b51e-7806434b66e7-image.png","hash":"b574536c18ec981f269d246f7f64353abe97cfc7","modified":1526441505155},{"_id":"source/_posts/Talk-About-The-Architecture/1526438712437-0ddc81c3-0e3f-437a-8b2f-721e5a730e49-image.png","hash":"084d306b6b5cc388be92f647f8c125bdb4e35557","modified":1526441946230},{"_id":"themes/maupassant/layout/_partial/after_footer.jade","hash":"3dbcc9a9f0d6e55da191d3393c18bbfcfe99fa69","modified":1526010418801},{"_id":"themes/maupassant/layout/_partial/footer.jade","hash":"aa020b794e697e8e9612530c97c6295efde469fe","modified":1526010418801},{"_id":"themes/maupassant/layout/_partial/comments.jade","hash":"6c7f63ba04a4d28323ba31e79a4927f3d3fcc56e","modified":1526010418801},{"_id":"themes/maupassant/layout/_partial/helpers.jade","hash":"acdf9e2d52ee86c831fa15ce1570930c5779bc78","modified":1526010418802},{"_id":"themes/maupassant/layout/_partial/mathjax.jade","hash":"b54b56faff9e47ab3ca3cdd55056c73e60776f3c","modified":1526010418802},{"_id":"themes/maupassant/layout/_partial/mathjax2.jade","hash":"d6ac5dc4e9c7a1b866f1f92d88988cfb35aded4c","modified":1526010418802},{"_id":"themes/maupassant/layout/_partial/paginator.jade","hash":"53f9cb77448e84a98da5eb688e2e12b173c555bb","modified":1526010418802},{"_id":"themes/maupassant/layout/_partial/post_nav.jade","hash":"a2d698c84bb6da08195fe870dbd7215f65388d3f","modified":1526010418803},{"_id":"themes/maupassant/layout/_partial/tag.jade","hash":"0f0e6770e9d5dd8040e330d71bbbfadd2df36a28","modified":1526010418803},{"_id":"themes/maupassant/layout/_partial/totop.jade","hash":"8225bbc3cdb9648bc2e6872e5c616a9a1e4def4f","modified":1526010418803},{"_id":"themes/maupassant/layout/_widget/category.jade","hash":"7c6aed762934ca51aa2669b886254da24b77bc14","modified":1526010418804},{"_id":"themes/maupassant/layout/_widget/recent_comments.jade","hash":"e119c5afa85abc60d139e2da99b0bfcd7a6530f8","modified":1526010418804},{"_id":"themes/maupassant/layout/_widget/recent_posts.jade","hash":"19431336d724d2118e46da43683bce9063176541","modified":1526010418804},{"_id":"themes/maupassant/layout/_widget/links.jade","hash":"f57a0c76d243882b2b77330132bdb43bc648948b","modified":1526010418804},{"_id":"themes/maupassant/layout/_widget/search.jade","hash":"193546282908e499813534f86d27ef6e0a1357b3","modified":1526010418805},{"_id":"themes/maupassant/layout/_widget/tag.jade","hash":"132f049ce677d0e38f50073174c4ee4b825d4a06","modified":1526010418805},{"_id":"themes/maupassant/source/css/jquery.fancybox.css","hash":"f42f761157f26244673eb2f4a9215c70956f80dc","modified":1526010418808},{"_id":"themes/maupassant/source/css/style.scss","hash":"c47599b6e132da40f8e47e37c1db61b2a9955d70","modified":1526010418809},{"_id":"themes/maupassant/source/fancybox/blank.gif","hash":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1526010418809},{"_id":"themes/maupassant/source/fancybox/fancybox_loading.gif","hash":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1526010418809},{"_id":"themes/maupassant/source/fancybox/fancybox_loading@2x.gif","hash":"273b123496a42ba45c3416adb027cd99745058b0","modified":1526010418810},{"_id":"themes/maupassant/source/fancybox/fancybox_overlay.png","hash":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1526010418811},{"_id":"themes/maupassant/source/fancybox/fancybox_sprite.png","hash":"17df19f97628e77be09c352bf27425faea248251","modified":1526010418811},{"_id":"themes/maupassant/source/fancybox/fancybox_sprite@2x.png","hash":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1526010418811},{"_id":"themes/maupassant/source/js/codeblock-resizer.js","hash":"5d0b786d60bf225d9eabcc9cece2719ff4d9b6cd","modified":1526010418812},{"_id":"themes/maupassant/source/js/fancybox.js","hash":"13c4781570339f4fba76a3d7f202e442817dd605","modified":1526010418812},{"_id":"themes/maupassant/source/js/search.js","hash":"53db2eb255dd40a412ed62ea7332ca5a22f7816f","modified":1526010418812},{"_id":"themes/maupassant/source/js/share.js","hash":"f49776e0baa2b913ddc7a20db24b3edd469c8343","modified":1526010418812},{"_id":"themes/maupassant/source/js/smartresize.js","hash":"3ef157fd877167e3290f42c67a624ea375a46c24","modified":1526010418813},{"_id":"themes/maupassant/source/js/totop.js","hash":"7dbf8fcf582a4fb6eb9b2c60d6de9f9c2091ec4c","modified":1526010418813},{"_id":"source/_posts/Talk-About-The-Architecture/1526438152354-6a181918-13db-4d45-855f-88257de3f429-image.png","hash":"45976092b622919fcd581622a7258f2f77622b04","modified":1526441805719},{"_id":"source/_posts/Talk-About-The-Architecture/1526438216252-267d0e5e-63b3-44dc-b988-c9eb1758a10f-image.png","hash":"d9755e96b3c89bde56e76dab942e41f7b933b584","modified":1526441469791},{"_id":"source/_posts/Talk-About-The-Architecture/1526438314473-c5da5a10-c62d-49a0-9209-5e43e54b88ca-image-resized.png","hash":"c548fdc882ea9fc5d5a51e376dac24f1e41e6d32","modified":1526441954397},{"_id":"source/_posts/Talk-About-The-Architecture/1526438343067-0e351afe-72f7-4a7f-a6be-72fab9cd54c8-image.png","hash":"f064d7741875c2ae6cf6e6a8fbeaeab2a3230661","modified":1526441826610},{"_id":"source/_posts/Talk-About-The-Architecture/1526438498119-90bbb34f-ef90-43cb-939b-aa0f696262ce-image.png","hash":"71b5d3a8f9cc9a12cac78964d4447d31a446dfb8","modified":1526441551384},{"_id":"source/_posts/Talk-About-The-Architecture/1526438513492-00ba90a2-24fb-460d-aa4c-d30bed417433-image.png","hash":"d8f45cef8d8b02b060bf4d92311bef4c45ac3754","modified":1526441558089},{"_id":"source/_posts/Container-Application-Design/1526262020618-7b150d6f-b6a3-4791-8212-38551258c423-image.png","hash":"9d8f968c2a79497cb8a3bea70c066396a74c32ac","modified":1526441875325},{"_id":"public/baidusitemap.xml","hash":"7ecb7aa9033cb74a692417a1d05a33319aacad79","modified":1526442020347},{"_id":"public/atom.xml","hash":"8fb90b095c840b1ae67f4b02d4dcd82d3789176f","modified":1526442020360},{"_id":"public/search.xml","hash":"405a6905eacbe80f82758cc52748f559303545ab","modified":1526442020361},{"_id":"public/sitemap.xml","hash":"8472bbbdb03e342a841773a6edf2a8ed37297cc5","modified":1526442020361},{"_id":"public/about/index.html","hash":"9521ba0fb5bab9a46113ff68a3aa8437fcb344d8","modified":1526442020387},{"_id":"public/2017-05-01/Aliyun-Open-IPv6.html","hash":"7b1c2fcee3f0e6f5d78c579c2c8aabf2242cdb3d","modified":1526442020388},{"_id":"public/2017-04-25/Install-MongoDB-on-ubuntu16-04.html","hash":"7bb830bf11ff33589e9a05a687a4c5678c698a6d","modified":1526442020388},{"_id":"public/2016-12-26/Use-Brew-Install-Rbenv.html","hash":"71b3e519ac06a3841f0f480967b658bbac923559","modified":1526442020388},{"_id":"public/2016-12-26/Mac-OSX-Basic-SoftWare.html","hash":"2798e981761f6d10262d6c5fe49fef3b8541d1c0","modified":1526442020388},{"_id":"public/2016-11-18/Raiils-Cache-Simple.html","hash":"5b350d578f80201aba775b8857bd32aec495d7cb","modified":1526442020388},{"_id":"public/2016-11-16/DynamoDB-Ubuntu.html","hash":"182dde6e88c7aa159a1ca93b716549c562428086","modified":1526442020388},{"_id":"public/2016-10-25/Create-Yii2-Project.html","hash":"7236929bff9cff0a61a0d227fe4d7b11e66ceb44","modified":1526442020388},{"_id":"public/2016-10-24/Siege.html","hash":"e1f2658f67b0f5a8e0a6985321dc85e1e5d52d09","modified":1526442020388},{"_id":"public/2016-10-21/Ubuntu-Swap.html","hash":"23fdaeb033e15d2592fd59abb3dbdd4f5ef1680b","modified":1526442020388},{"_id":"public/2016-10-12/gem-note.html","hash":"47c4b282149ce2e4ec38c13cd33a7979cda82c41","modified":1526442020389},{"_id":"public/2016-09-30/Install-Nginx-PHP7-MySQL-on-Ubuntu16-04.html","hash":"7cf35341b39d62a232e37848f0f599c2fc13d5c7","modified":1526442020389},{"_id":"public/2016-09-30/Software-PPA-Sources.html","hash":"97adbea5f6519e0cb5f1af9539355ab72f75bfc0","modified":1526442020389},{"_id":"public/archives/index.html","hash":"1315720c3565818d460393c00ee5e22825f437e8","modified":1526442020389},{"_id":"public/archives/page/2/index.html","hash":"847c458df6eb993ff518ac603e73c65669ba1697","modified":1526442020389},{"_id":"public/archives/page/3/index.html","hash":"18115464934a87e05b6b4996fd2ca8b273ee913a","modified":1526442020389},{"_id":"public/archives/2016/index.html","hash":"d7e76d38b4f2c3166f9443b02d366f868851963d","modified":1526442020389},{"_id":"public/archives/2016/page/2/index.html","hash":"676fc2fe13a6252c1212c398d599b39da2f5c291","modified":1526442020389},{"_id":"public/archives/2016/09/index.html","hash":"698cf3ca6f82cb1bed3a9c9d51e2790a3418463d","modified":1526442020389},{"_id":"public/archives/2016/10/index.html","hash":"c05056d63b4eed775020f90fb526d9c29b819786","modified":1526442020389},{"_id":"public/archives/2016/11/index.html","hash":"cffdb6a290f61c60b0b2048138c5eef90686cf29","modified":1526442020390},{"_id":"public/archives/2016/12/index.html","hash":"fbdeee5ea1c15cde27408f6a96dc46d464e3a303","modified":1526442020390},{"_id":"public/archives/2017/index.html","hash":"b54dab2c3dfd18b79ead3c7ce8383d9fd8ba9837","modified":1526442020390},{"_id":"public/archives/2017/01/index.html","hash":"421c68d1df99ed9379d77a4b5142938d9da91364","modified":1526442020390},{"_id":"public/archives/2017/04/index.html","hash":"59def9b7f85fb17b8b20b8bcf5c3c27ec21e1221","modified":1526442020390},{"_id":"public/archives/2017/05/index.html","hash":"93ca9b578d49c3f47069dd775cb0a133d49a0ad8","modified":1526442020390},{"_id":"public/archives/2018/index.html","hash":"c50bcc4eef95d440b492f3d96f9e7de262cf23a8","modified":1526442020390},{"_id":"public/archives/2018/05/index.html","hash":"c50bcc4eef95d440b492f3d96f9e7de262cf23a8","modified":1526442020390},{"_id":"public/categories/Server/index.html","hash":"98a57663d1925c56dc2827fd43f53ab8902b6c71","modified":1526442020390},{"_id":"public/categories/Develop/index.html","hash":"ff9f7f46392c53f02ee6561bb89ddbc5d792e7d5","modified":1526442020390},{"_id":"public/categories/Architect/index.html","hash":"a7ee41babfd2e6d5a6320a40841b37a0c6938fae","modified":1526442020391},{"_id":"public/categories/Software/index.html","hash":"8123250f3fdf407d05274f5a766bd60c093468c8","modified":1526442020391},{"_id":"public/categories/Linux/index.html","hash":"fb7bfcd10c55ce67d3ad44ab096ccb72dc0510d3","modified":1526442020391},{"_id":"public/categories/PHP/index.html","hash":"3c6715f795006d42927cafaa79ecf83fd39d1706","modified":1526442020391},{"_id":"public/categories/Rails/index.html","hash":"aeb1c94407b934a64fcb1c4868151c6b68649887","modified":1526442020391},{"_id":"public/index.html","hash":"cbadf97d2c791b2ff2f2f0e326f821478aff7bf6","modified":1526442020391},{"_id":"public/page/2/index.html","hash":"fc992915ed37a55651928e84ed45135357c9df4c","modified":1526442020391},{"_id":"public/page/3/index.html","hash":"e6382a4d8062c0b74699868902dc72fb07397be3","modified":1526442020391},{"_id":"public/tags/Aliyun/index.html","hash":"461363b7540a7dcdcef589999d95b395bb769261","modified":1526442020391},{"_id":"public/tags/IPv6/index.html","hash":"66e3e246a115d3424023d5aaaf4607acfff65adb","modified":1526442020391},{"_id":"public/tags/PHP/index.html","hash":"cd7683ecc03df9e31165039c714e22ddc2269122","modified":1526442020391},{"_id":"public/tags/Yii2/index.html","hash":"d9730b8346d5b1fa18ed83c02be43140551cba13","modified":1526442020392},{"_id":"public/tags/Architect/index.html","hash":"a7ee41babfd2e6d5a6320a40841b37a0c6938fae","modified":1526442020392},{"_id":"public/tags/Humanity/index.html","hash":"9ec266ed7da414ef6a88e1db790295e06f6f6cbf","modified":1526442020392},{"_id":"public/tags/DynamoDB/index.html","hash":"cd723a1979eea9f6ec4d4a9920984ce8ca03a17e","modified":1526442020392},{"_id":"public/tags/Software/index.html","hash":"133f71937b48ea47c1e575ee435e4ef627e3e2f8","modified":1526442020392},{"_id":"public/tags/Ubuntu/index.html","hash":"89d50929393520b01c524f426e8f18ee22869e9b","modified":1526442020392},{"_id":"public/tags/HTTPS/index.html","hash":"c6b76ad43c086d9161e701e2e796e2bfa63a3577","modified":1526442020392},{"_id":"public/tags/Nginx/index.html","hash":"8101c85cc77e99902e44fd547ef2874c62ef641f","modified":1526442020392},{"_id":"public/tags/Server/index.html","hash":"373a237cab41dd5a94205e6d31e69e90fea369a4","modified":1526442020393},{"_id":"public/tags/AirFlow/index.html","hash":"b23655a6e24d235aaf7cdb18631baf1f0a7e9429","modified":1526442020393},{"_id":"public/tags/Supervisord/index.html","hash":"ad38a827d1d05140505faab4be73586406954ce2","modified":1526442020393},{"_id":"public/tags/MongoDB/index.html","hash":"5811b4d06cd3d55eae2810446850a9cab42fd234","modified":1526442020393},{"_id":"public/tags/Linux/index.html","hash":"fb7bfcd10c55ce67d3ad44ab096ccb72dc0510d3","modified":1526442020393},{"_id":"public/tags/Shell/index.html","hash":"df6978851ab689ab26f4fc9d2c9c2c0439cabfa3","modified":1526442020393},{"_id":"public/tags/OSX/index.html","hash":"ae68bc56231ac9689b85ce3cbfa3cd3a68f9cf9e","modified":1526442020393},{"_id":"public/tags/Shadowsocks/index.html","hash":"1c26752d03ecc6d666e3694ad1200d42cd80e02b","modified":1526442020394},{"_id":"public/tags/Tips/index.html","hash":"e23d47976d59dc6d732e3eb3ab41948f7662e522","modified":1526442020394},{"_id":"public/tags/Process-Manager/index.html","hash":"8baa18da8ea054bb1b623718e52b46e22eae0a03","modified":1526442020394},{"_id":"public/tags/Ruby/index.html","hash":"d2e8dc60b4e4690913d08268c660ca5b37e93027","modified":1526442020394},{"_id":"public/tags/Cache/index.html","hash":"de39f67035dfcd5e36dbde58e78ca867f06844f4","modified":1526442020394},{"_id":"public/tags/Rails/index.html","hash":"aeb1c94407b934a64fcb1c4868151c6b68649887","modified":1526442020394},{"_id":"public/tags/Siege/index.html","hash":"2d3234a64bf58b799c1e722c303220c38325462a","modified":1526442020394},{"_id":"public/tags/PPA/index.html","hash":"853c2a285d7a141478f50f93be061b549608a771","modified":1526442020394},{"_id":"public/tags/Sources/index.html","hash":"3eecfda8cc64acc560aeeb5d1de7a1680a6377b1","modified":1526442020394},{"_id":"public/tags/Swap/index.html","hash":"a5f6fc5fae9e069a4dd062fe5b608db8dd750eeb","modified":1526442020394},{"_id":"public/tags/rbenv/index.html","hash":"a0dd8a32dad6b1c20a74dca664cab1a1692e037f","modified":1526442020394},{"_id":"public/tags/brew/index.html","hash":"d39ff6d5ef932fb48ebe7c24c198a5fc2a13a7ac","modified":1526442020394},{"_id":"public/tags/GEM/index.html","hash":"7637848ff66980664d21dbf73ebfa61ad9989285","modified":1526442020394},{"_id":"public/tags/Mina/index.html","hash":"9fa01ace431f0664ae2886df32e8eb6d1b46cd72","modified":1526442020395},{"_id":"public/tags/Deploy/index.html","hash":"a1ded82d5b2e6508858a1796b9b1c70b294ac5a3","modified":1526442020395},{"_id":"public/tags/Container/index.html","hash":"ac56cb060a6ee0839357d49e1d171e4142e63cd7","modified":1526442020395},{"_id":"public/2018-05-14/Container-Application-Design.html","hash":"3f067082669c23937427146843a2a9b746552f59","modified":1526442020395},{"_id":"public/2018-05-10/How-to-become-an-excellent-architect.html","hash":"2dbd946605df4cf36f44698f10789ed1082b87c7","modified":1526442020395},{"_id":"public/2017-01-19/Install-And-Deploy-AirFlow.html","hash":"ca4ff3ab5104be7455866fc1ee589471b739b993","modified":1526442020395},{"_id":"public/2016-11-08/Install-Shadowsocks-Server.html","hash":"8311d08439f889890ff33af31cb42b11675a23ae","modified":1526442020395},{"_id":"public/2016-10-25/Use-Mina-Deploy-Yii2.html","hash":"9d104bfb8b3078ecc5c1072c6d1314a9250e3d9b","modified":1526442020395},{"_id":"public/2016-10-20/PHP-Matters-Needing-Attention.html","hash":"3ea1532cd05c3bb3ccbbaef0d3bb198c6e560247","modified":1526442020395},{"_id":"public/2016-10-11/Https-Nginx.html","hash":"0fba302079336f217225c28774ad815588fd2dd2","modified":1526442020395},{"_id":"public/2016-10-10/PHPFPM-Process-Manager.html","hash":"a3c0a0dc501c4798781a4b6e8d4da08defc419d4","modified":1526442020395},{"_id":"public/2016-09-23/Linux-common-shells.html","hash":"5c2531b80ac76e3f9c34b9e82989cae3b43b321a","modified":1526442020395},{"_id":"public/tags/ruby/index.html","hash":"6ae887058eac8c76fc2fe46c0bdbdff9a6341702","modified":1526442020410},{"_id":"public/2018-05-16/Talk-About-The-Architecture.html","hash":"67144665c4f906e38ede99e3554bbba06a35783a","modified":1526442020410},{"_id":"public/2018-05-14/Container-Application-Design/1526261691982-7ead3978-fe73-423f-a675-90309a8bc859-image.png","hash":"d2925d443750ebf09efc0deb41e59aae41750d19","modified":1526442020416},{"_id":"public/2018-05-14/Container-Application-Design/1526261707323-33e04e90-0449-4fea-8846-49a7a3cf6915-image-resized.png","hash":"5eea2b0de89ec718b258cab85423bf9d1b6123d4","modified":1526442020416},{"_id":"public/2018-05-14/Container-Application-Design/1526261801128-be721a67-971b-4f35-960e-0ce907328f73-image-resized.png","hash":"db37e0b924e7b34eb0e377d1e012cb2e6ee331bb","modified":1526442020417},{"_id":"public/2018-05-14/Container-Application-Design/1526261901806-402b717e-5379-476a-ab90-d419ff516bc8-image.png","hash":"412584a836024f329caf5d4370bf5a5b4bf27ca2","modified":1526442020417},{"_id":"public/2018-05-14/Container-Application-Design/1526261921352-50cf453f-a1eb-4d16-bde3-c47f7ecb5c96-image.png","hash":"49f9fd8a0c6b73dc3c0ecc31ef97e57ee6d550c8","modified":1526442020417},{"_id":"public/2018-05-14/Container-Application-Design/1526261951920-41f3d5f6-38ef-4619-91a1-1f802c90696a-image.png","hash":"88ea530bf686be60830ad49f0eef531c55237954","modified":1526442020417},{"_id":"public/2018-05-14/Container-Application-Design/1526261967663-aaa59614-51c8-43cc-bde6-237e644fbbb2-image.png","hash":"9ad5832f3f52745962aef3f363e4b6999ce1757f","modified":1526442020417},{"_id":"public/2018-05-14/Container-Application-Design/1526261996216-83455d4d-0512-4dbb-877e-1cd6e97e76ed-image.png","hash":"ca8a4886388f5c99f1c5bd5cfd57048f5660ce3f","modified":1526442020417},{"_id":"public/2018-05-14/Container-Application-Design/1526262095283-87098624-d8fc-4286-a2af-ac94f4b0f47b-image.png","hash":"de6b1888a417f04a414b0df94121c71c7759e2b7","modified":1526442020417},{"_id":"public/2018-05-14/Container-Application-Design/1526262054188-bc378617-e76c-4498-9c0b-82f7704e6496-image-resized.png","hash":"c6e31a0d21a6857691f4c19de047517e476cbe95","modified":1526442020417},{"_id":"public/2018-05-14/Container-Application-Design/1526262238219-a6221168-99d3-4f03-bfc6-ca2fad38c325-image.png","hash":"c8dfa49bb6814b0354abe05030f39c92b8ed14dc","modified":1526442020417},{"_id":"public/2018-05-14/Container-Application-Design/1526262303219-9324cca1-515f-4424-b9b8-c19b8814b9c3-image.png","hash":"2e0b6be6ed5ddfa841646ee1461221a633fa1a70","modified":1526442020417},{"_id":"public/2018-05-14/Container-Application-Design/1526262264669-62a724a4-88d8-4511-9120-328cd7a4af15-image-resized.png","hash":"4ffd61cb5bf47ced8cfb6b52ea7cb07e40caeafa","modified":1526442020417},{"_id":"public/2018-05-14/Container-Application-Design/1526262348948-fce2d10f-320e-4d52-89eb-931bf394454c-image-resized.png","hash":"ad7031fc1f83c5e5da331c73fa9c5f339fc040a1","modified":1526442020417},{"_id":"public/2018-05-14/Container-Application-Design/1526262383289-ee67fbb1-8251-4af3-bb61-f28db3e9bbc0-image.png","hash":"5bc79fb19611c8a03096d114bdd2692126c6a849","modified":1526442020417},{"_id":"public/2018-05-14/Container-Application-Design/1526262452948-23ea67c9-470f-4f7b-8a03-c76307b4415f-image-resized.png","hash":"3fad58540e4c8b618686fc6eb77b16d12248b463","modified":1526442020417},{"_id":"public/2018-05-14/Container-Application-Design/1526262469915-5b17a04f-67ce-46de-967f-8d8ef906ac68-image.png","hash":"d3623b1c127ca8960cdb0b4a920d09fb5d524b64","modified":1526442020417},{"_id":"public/2018-05-16/Talk-About-The-Architecture/1526437772448-7783bdeb-4306-4847-85db-3754065cdea8-image.png","hash":"8263de3f2822ac750fbb9fbf37cee5a8e8166ccb","modified":1526442020418},{"_id":"public/2018-05-16/Talk-About-The-Architecture/1526437909260-9eff08f6-b8c8-436d-81ff-2ebc3f639464-image.png","hash":"cc70b4068204e056f2868601a059f7f5fe471fe2","modified":1526442020418},{"_id":"public/2018-05-16/Talk-About-The-Architecture/1526438239613-1cdabcae-9196-4aad-869d-94285ae76d41-image.png","hash":"24cfb369578d6b80e692470f5edfd6d204a7db72","modified":1526442020418},{"_id":"public/2018-05-16/Talk-About-The-Architecture/1526438275615-26fee321-9534-4a04-b51e-7806434b66e7-image.png","hash":"b574536c18ec981f269d246f7f64353abe97cfc7","modified":1526442020418},{"_id":"public/2018-05-16/Talk-About-The-Architecture/1526438712437-0ddc81c3-0e3f-437a-8b2f-721e5a730e49-image.png","hash":"084d306b6b5cc388be92f647f8c125bdb4e35557","modified":1526442020418},{"_id":"public/2018-05-16/Talk-About-The-Architecture/1526438513492-00ba90a2-24fb-460d-aa4c-d30bed417433-image.png","hash":"d8f45cef8d8b02b060bf4d92311bef4c45ac3754","modified":1526442020418},{"_id":"public/2018-05-16/Talk-About-The-Architecture/1526438152354-6a181918-13db-4d45-855f-88257de3f429-image.png","hash":"45976092b622919fcd581622a7258f2f77622b04","modified":1526442020422},{"_id":"public/2018-05-16/Talk-About-The-Architecture/1526438216252-267d0e5e-63b3-44dc-b988-c9eb1758a10f-image.png","hash":"d9755e96b3c89bde56e76dab942e41f7b933b584","modified":1526442020422},{"_id":"public/2018-05-16/Talk-About-The-Architecture/1526438343067-0e351afe-72f7-4a7f-a6be-72fab9cd54c8-image.png","hash":"f064d7741875c2ae6cf6e6a8fbeaeab2a3230661","modified":1526442020422},{"_id":"public/2018-05-16/Talk-About-The-Architecture/1526438498119-90bbb34f-ef90-43cb-939b-aa0f696262ce-image.png","hash":"71b5d3a8f9cc9a12cac78964d4447d31a446dfb8","modified":1526442020423},{"_id":"public/2018-05-16/Talk-About-The-Architecture/1526438314473-c5da5a10-c62d-49a0-9209-5e43e54b88ca-image-resized.png","hash":"c548fdc882ea9fc5d5a51e376dac24f1e41e6d32","modified":1526442020423},{"_id":"public/2018-05-14/Container-Application-Design/1526262020618-7b150d6f-b6a3-4791-8212-38551258c423-image.png","hash":"9d8f968c2a79497cb8a3bea70c066396a74c32ac","modified":1526442020457}],"Category":[{"name":"Server","_id":"cjh8jw4v000036b8k0i4do9kl"},{"name":"Develop","_id":"cjh8jw4v700086b8k4hvtj5f4"},{"name":"Architect","_id":"cjh8jw4vd000d6b8kczixffsb"},{"name":"Software","_id":"cjh8jw4vj000l6b8ksxhdfk0m"},{"name":"Linux","_id":"cjh8jw4vn000r6b8k5hta7q6z"},{"name":"PHP","_id":"cjh8jw4vs00106b8kbv6z0dke"},{"name":"Rails","_id":"cjh8jw4vw00176b8k0bvp8u7y"}],"Data":[],"Page":[{"title":"About","date":"2016-09-23T09:17:38.000Z","_content":"\n<i class='fa fa-user'></i> NickName: [RobbsLuo](http://www.robbs.win \"Robbs Luo\")\n<i class='fa fa-envelope'></i> Email: [hongsheng.luo@foxmail.com](mailto:hongsheng.luo@foxmail.com \"Email\")\n<i class='fa fa-github'></i> Github: [@RobbsLuo](https://github.com/RobbsLuo \"Github\")\n","source":"about/index.md","raw":"---\ntitle: About\ndate: 2016-09-23 17:17:38\n---\n\n<i class='fa fa-user'></i> NickName: [RobbsLuo](http://www.robbs.win \"Robbs Luo\")\n<i class='fa fa-envelope'></i> Email: [hongsheng.luo@foxmail.com](mailto:hongsheng.luo@foxmail.com \"Email\")\n<i class='fa fa-github'></i> Github: [@RobbsLuo](https://github.com/RobbsLuo \"Github\")\n","updated":"2018-05-11T03:46:58.795Z","path":"about/index.html","comments":1,"layout":"page","_id":"cjh8jw4uw00016b8kzy4c5j75","content":"<p><i class=\"fa fa-user\"></i> NickName: <a href=\"http://www.robbs.win\" title=\"Robbs Luo\">RobbsLuo</a><br><i class=\"fa fa-envelope\"></i> Email: <a href=\"mailto:hongsheng.luo@foxmail.com\" title=\"Email\" target=\"_blank\" rel=\"noopener\">hongsheng.luo@foxmail.com</a><br><i class=\"fa fa-github\"></i> Github: <a href=\"https://github.com/RobbsLuo\" title=\"Github\" target=\"_blank\" rel=\"noopener\">@RobbsLuo</a></p>\n","site":{"data":{}},"excerpt":"","more":"<p><i class=\"fa fa-user\"></i> NickName: <a href=\"http://www.robbs.win\" title=\"Robbs Luo\">RobbsLuo</a><br><i class=\"fa fa-envelope\"></i> Email: <a href=\"mailto:hongsheng.luo@foxmail.com\" title=\"Email\" target=\"_blank\" rel=\"noopener\">hongsheng.luo@foxmail.com</a><br><i class=\"fa fa-github\"></i> Github: <a href=\"https://github.com/RobbsLuo\" title=\"Github\" target=\"_blank\" rel=\"noopener\">@RobbsLuo</a></p>\n"}],"Post":[{"title":"阿里云开启 IPv6 支持","date":"2017-05-01T15:36:43.000Z","description":"开启阿里云的 IPv6 支持","_content":"\n## 开启限制\n\n```shell\nvim /etc/sysctl.conf\n\n# 增加配置\nnet.ipv6.conf.all.disable_ipv6 = 0\nnet.ipv6.conf.default.disable_ipv6 = 0\nnet.ipv6.conf.lo.disable_ipv6 = 0\n\n```\n\n## 查看是否生效\n\n```shell\nifconfig\n\n# 信息\neth1: flags=4163<UP,BROADCAST,RUNNING,MULTICAST>  mtu 1500\n        inet 114.55.127.xxx  netmask 255.255.252.0  broadcast 114.55.119.255\n        inet6 fe80::219:3eff:fexx:32ec  prefixlen 64  scopeid 0x20<link>\n        ether 00:16:3e:01:49:37  txqueuelen 1000  (Ethernet)\n        RX packets 68348  bytes 41664492 (39.7 MiB)\n        RX errors 0  dropped 0  overruns 0  frame 0\n        TX packets 18859  bytes 3632548 (3.4 MiB)\n        TX errors 0  dropped 0 overruns 0  carrier 0  collisions 0\n\n```\n\n`fe80::219:3eff:fexx:32ec` 是IPv6地址。","source":"_posts/Aliyun-Open-IPv6.md","raw":"---\ntitle: 阿里云开启 IPv6 支持\ndate: 2017-05-01 23:36:43\ntags:\n - Aliyun\n - IPv6\ncategories:\n - Server\ndescription: 开启阿里云的 IPv6 支持\n---\n\n## 开启限制\n\n```shell\nvim /etc/sysctl.conf\n\n# 增加配置\nnet.ipv6.conf.all.disable_ipv6 = 0\nnet.ipv6.conf.default.disable_ipv6 = 0\nnet.ipv6.conf.lo.disable_ipv6 = 0\n\n```\n\n## 查看是否生效\n\n```shell\nifconfig\n\n# 信息\neth1: flags=4163<UP,BROADCAST,RUNNING,MULTICAST>  mtu 1500\n        inet 114.55.127.xxx  netmask 255.255.252.0  broadcast 114.55.119.255\n        inet6 fe80::219:3eff:fexx:32ec  prefixlen 64  scopeid 0x20<link>\n        ether 00:16:3e:01:49:37  txqueuelen 1000  (Ethernet)\n        RX packets 68348  bytes 41664492 (39.7 MiB)\n        RX errors 0  dropped 0  overruns 0  frame 0\n        TX packets 18859  bytes 3632548 (3.4 MiB)\n        TX errors 0  dropped 0 overruns 0  carrier 0  collisions 0\n\n```\n\n`fe80::219:3eff:fexx:32ec` 是IPv6地址。","slug":"Aliyun-Open-IPv6","published":1,"updated":"2018-05-11T03:46:58.788Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjh8jw4uq00006b8k1lfxdx34","content":"<h2 id=\"开启限制\"><a href=\"#开启限制\" class=\"headerlink\" title=\"开启限制\"></a>开启限制</h2><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">vim /etc/sysctl.conf</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span> 增加配置</span><br><span class=\"line\">net.ipv6.conf.all.disable_ipv6 = 0</span><br><span class=\"line\">net.ipv6.conf.default.disable_ipv6 = 0</span><br><span class=\"line\">net.ipv6.conf.lo.disable_ipv6 = 0</span><br></pre></td></tr></table></figure>\n<h2 id=\"查看是否生效\"><a href=\"#查看是否生效\" class=\"headerlink\" title=\"查看是否生效\"></a>查看是否生效</h2><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ifconfig</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span> 信息</span><br><span class=\"line\">eth1: flags=4163&lt;UP,BROADCAST,RUNNING,MULTICAST&gt;  mtu 1500</span><br><span class=\"line\">        inet 114.55.127.xxx  netmask 255.255.252.0  broadcast 114.55.119.255</span><br><span class=\"line\">        inet6 fe80::219:3eff:fexx:32ec  prefixlen 64  scopeid 0x20&lt;link&gt;</span><br><span class=\"line\">        ether 00:16:3e:01:49:37  txqueuelen 1000  (Ethernet)</span><br><span class=\"line\">        RX packets 68348  bytes 41664492 (39.7 MiB)</span><br><span class=\"line\">        RX errors 0  dropped 0  overruns 0  frame 0</span><br><span class=\"line\">        TX packets 18859  bytes 3632548 (3.4 MiB)</span><br><span class=\"line\">        TX errors 0  dropped 0 overruns 0  carrier 0  collisions 0</span><br></pre></td></tr></table></figure>\n<p><code>fe80::219:3eff:fexx:32ec</code> 是IPv6地址。</p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"开启限制\"><a href=\"#开启限制\" class=\"headerlink\" title=\"开启限制\"></a>开启限制</h2><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">vim /etc/sysctl.conf</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span> 增加配置</span><br><span class=\"line\">net.ipv6.conf.all.disable_ipv6 = 0</span><br><span class=\"line\">net.ipv6.conf.default.disable_ipv6 = 0</span><br><span class=\"line\">net.ipv6.conf.lo.disable_ipv6 = 0</span><br></pre></td></tr></table></figure>\n<h2 id=\"查看是否生效\"><a href=\"#查看是否生效\" class=\"headerlink\" title=\"查看是否生效\"></a>查看是否生效</h2><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ifconfig</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span> 信息</span><br><span class=\"line\">eth1: flags=4163&lt;UP,BROADCAST,RUNNING,MULTICAST&gt;  mtu 1500</span><br><span class=\"line\">        inet 114.55.127.xxx  netmask 255.255.252.0  broadcast 114.55.119.255</span><br><span class=\"line\">        inet6 fe80::219:3eff:fexx:32ec  prefixlen 64  scopeid 0x20&lt;link&gt;</span><br><span class=\"line\">        ether 00:16:3e:01:49:37  txqueuelen 1000  (Ethernet)</span><br><span class=\"line\">        RX packets 68348  bytes 41664492 (39.7 MiB)</span><br><span class=\"line\">        RX errors 0  dropped 0  overruns 0  frame 0</span><br><span class=\"line\">        TX packets 18859  bytes 3632548 (3.4 MiB)</span><br><span class=\"line\">        TX errors 0  dropped 0 overruns 0  carrier 0  collisions 0</span><br></pre></td></tr></table></figure>\n<p><code>fe80::219:3eff:fexx:32ec</code> 是IPv6地址。</p>\n"},{"title":"创建 Yii2 项目","date":"2016-10-25T14:07:50.000Z","description":"简单的讲解如何创建 Yii2 项目，和其中需要注意的地方。","_content":"## 前言\n### Yii\n  [Yii](http://www.yiiframework.com/) 是一个高性能的，适用于开发 WEB2.0 应用的 PHP 框架。\n  Yii 自带了丰富的功能 ，包括 MVC，DAO/ActiveRecord，I18N/L10N，缓存，身份验证和基于角色的访问控制，脚手架，测试等，可显著缩短开发时间。\n## 创建\n### 前期准备\n  * [PHP运行环境](/2016-09-30/Install-Nginx-PHP7-MySQL-on-Ubuntu16-04.html)\n  * Composer 环境\n    - Mac OS X\n      \n          ```bash\n         brew install composer\n          ```\n    - Ubuntu\n      \n      ```bash\n        # 下载\n        curl -sS https://getcomposer.org/installer | php -d detect_unicode=Off \n        # 全局\n        mv composer.phar /usr/local/bin/composer \n        # 权限\n        chmod a+x /usr/local/bin/composer\n        # 更新\n        composer self-update\n      ```\n### 安装\n1. #### Composer 安装\n     安装composer-asset-plugin插件\n      ```bash\n      # 切换国内镜像(http://pkg.phpcomposer.com/)\n      composer config -g repo.packagist composer https://packagist.phpcomposer.com\n      \n      composer global require \"fxp/composer-asset-plugin:^1.2.0\"\n      ```\n      安装基础版\n      ```bash\n      composer create-project yiisoft/yii2-app-basic xxx\n      ```\n      安装高级版\n      ```bash\n      composer create-project yiisoft/yii2-app-advanced xxx\n      ```\n2. #### 下载安装\n      [基础班](https://github.com/yiisoft/yii2/releases/download/2.0.10/yii-basic-app-2.0.10.tgz)\n      [高级版](https://github.com/yiisoft/yii2/releases/download/2.0.10/yii-advanced-app-2.0.10.tgz)\n\n## Tips\n  ```bash\n  The zip extension and unzip command are both missing, skipping.\n  ```\n  解决方案\n  ```bash\n  apt-get install php7.0-zip\n  ```\n  ---\n  ```bash\n  codeception/base 2.2.3 requires phpunit/phpunit >4.8.20 <5.5 -> satisfiable by phpunit/phpunit\n  phpunit/phpunit 5.6.2 requires ext-dom * -> the requested PHP extension dom is missing from your system.\n  ```\n  解决方案\n  ```bash\n  apt-get install php7.0-xml\n  ```","source":"_posts/Create-Yii2-Project.md","raw":"---\ntitle: 创建 Yii2 项目\ndate: 2016-10-25 22:07:50\ntags:\n  - PHP\n  - Yii2\ncategories:\n  -  Develop\ndescription: 简单的讲解如何创建 Yii2 项目，和其中需要注意的地方。\n---\n## 前言\n### Yii\n  [Yii](http://www.yiiframework.com/) 是一个高性能的，适用于开发 WEB2.0 应用的 PHP 框架。\n  Yii 自带了丰富的功能 ，包括 MVC，DAO/ActiveRecord，I18N/L10N，缓存，身份验证和基于角色的访问控制，脚手架，测试等，可显著缩短开发时间。\n## 创建\n### 前期准备\n  * [PHP运行环境](/2016-09-30/Install-Nginx-PHP7-MySQL-on-Ubuntu16-04.html)\n  * Composer 环境\n    - Mac OS X\n      \n          ```bash\n         brew install composer\n          ```\n    - Ubuntu\n      \n      ```bash\n        # 下载\n        curl -sS https://getcomposer.org/installer | php -d detect_unicode=Off \n        # 全局\n        mv composer.phar /usr/local/bin/composer \n        # 权限\n        chmod a+x /usr/local/bin/composer\n        # 更新\n        composer self-update\n      ```\n### 安装\n1. #### Composer 安装\n     安装composer-asset-plugin插件\n      ```bash\n      # 切换国内镜像(http://pkg.phpcomposer.com/)\n      composer config -g repo.packagist composer https://packagist.phpcomposer.com\n      \n      composer global require \"fxp/composer-asset-plugin:^1.2.0\"\n      ```\n      安装基础版\n      ```bash\n      composer create-project yiisoft/yii2-app-basic xxx\n      ```\n      安装高级版\n      ```bash\n      composer create-project yiisoft/yii2-app-advanced xxx\n      ```\n2. #### 下载安装\n      [基础班](https://github.com/yiisoft/yii2/releases/download/2.0.10/yii-basic-app-2.0.10.tgz)\n      [高级版](https://github.com/yiisoft/yii2/releases/download/2.0.10/yii-advanced-app-2.0.10.tgz)\n\n## Tips\n  ```bash\n  The zip extension and unzip command are both missing, skipping.\n  ```\n  解决方案\n  ```bash\n  apt-get install php7.0-zip\n  ```\n  ---\n  ```bash\n  codeception/base 2.2.3 requires phpunit/phpunit >4.8.20 <5.5 -> satisfiable by phpunit/phpunit\n  phpunit/phpunit 5.6.2 requires ext-dom * -> the requested PHP extension dom is missing from your system.\n  ```\n  解决方案\n  ```bash\n  apt-get install php7.0-xml\n  ```","slug":"Create-Yii2-Project","published":1,"updated":"2018-05-11T03:46:58.788Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjh8jw4ux00026b8ks08qutvt","content":"<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><h3 id=\"Yii\"><a href=\"#Yii\" class=\"headerlink\" title=\"Yii\"></a>Yii</h3><p>  <a href=\"http://www.yiiframework.com/\" target=\"_blank\" rel=\"noopener\">Yii</a> 是一个高性能的，适用于开发 WEB2.0 应用的 PHP 框架。<br>  Yii 自带了丰富的功能 ，包括 MVC，DAO/ActiveRecord，I18N/L10N，缓存，身份验证和基于角色的访问控制，脚手架，测试等，可显著缩短开发时间。</p>\n<h2 id=\"创建\"><a href=\"#创建\" class=\"headerlink\" title=\"创建\"></a>创建</h2><h3 id=\"前期准备\"><a href=\"#前期准备\" class=\"headerlink\" title=\"前期准备\"></a>前期准备</h3><ul>\n<li><a href=\"/2016-09-30/Install-Nginx-PHP7-MySQL-on-Ubuntu16-04.html\">PHP运行环境</a></li>\n<li><p>Composer 环境</p>\n<ul>\n<li><p>Mac OS X</p>\n<pre><code><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">brew install composer</span><br></pre></td></tr></table></figure>\n</code></pre></li>\n<li><p>Ubuntu</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 下载</span></span><br><span class=\"line\">curl -sS https://getcomposer.org/installer | php -d detect_unicode=Off </span><br><span class=\"line\"><span class=\"comment\"># 全局</span></span><br><span class=\"line\">mv composer.phar /usr/<span class=\"built_in\">local</span>/bin/composer </span><br><span class=\"line\"><span class=\"comment\"># 权限</span></span><br><span class=\"line\">chmod a+x /usr/<span class=\"built_in\">local</span>/bin/composer</span><br><span class=\"line\"><span class=\"comment\"># 更新</span></span><br><span class=\"line\">composer self-update</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h3><ol>\n<li><h4 id=\"Composer-安装\"><a href=\"#Composer-安装\" class=\"headerlink\" title=\"Composer 安装\"></a>Composer 安装</h4><p>  安装composer-asset-plugin插件</p>\n   <figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 切换国内镜像(http://pkg.phpcomposer.com/)</span></span><br><span class=\"line\">composer config -g repo.packagist composer https://packagist.phpcomposer.com</span><br><span class=\"line\"></span><br><span class=\"line\">composer global require <span class=\"string\">\"fxp/composer-asset-plugin:^1.2.0\"</span></span><br></pre></td></tr></table></figure>\n<p>   安装基础版</p>\n   <figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">composer create-project yiisoft/yii2-app-basic xxx</span><br></pre></td></tr></table></figure>\n<p>   安装高级版</p>\n   <figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">composer create-project yiisoft/yii2-app-advanced xxx</span><br></pre></td></tr></table></figure>\n</li>\n<li><h4 id=\"下载安装\"><a href=\"#下载安装\" class=\"headerlink\" title=\"下载安装\"></a>下载安装</h4><p>   <a href=\"https://github.com/yiisoft/yii2/releases/download/2.0.10/yii-basic-app-2.0.10.tgz\" target=\"_blank\" rel=\"noopener\">基础班</a><br>   <a href=\"https://github.com/yiisoft/yii2/releases/download/2.0.10/yii-advanced-app-2.0.10.tgz\" target=\"_blank\" rel=\"noopener\">高级版</a></p>\n</li>\n</ol>\n<h2 id=\"Tips\"><a href=\"#Tips\" class=\"headerlink\" title=\"Tips\"></a>Tips</h2>  <figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">The zip extension and unzip <span class=\"built_in\">command</span> are both missing, skipping.</span><br></pre></td></tr></table></figure>\n<p>  解决方案<br>  <figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">apt-get install php7.0-zip</span><br></pre></td></tr></table></figure></p>\n<hr>\n  <figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">codeception/base 2.2.3 requires phpunit/phpunit &gt;4.8.20 &lt;5.5 -&gt; satisfiable by phpunit/phpunit</span><br><span class=\"line\">phpunit/phpunit 5.6.2 requires ext-dom * -&gt; the requested PHP extension dom is missing from your system.</span><br></pre></td></tr></table></figure>\n<p>  解决方案<br>  <figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">apt-get install php7.0-xml</span><br></pre></td></tr></table></figure></p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><h3 id=\"Yii\"><a href=\"#Yii\" class=\"headerlink\" title=\"Yii\"></a>Yii</h3><p>  <a href=\"http://www.yiiframework.com/\" target=\"_blank\" rel=\"noopener\">Yii</a> 是一个高性能的，适用于开发 WEB2.0 应用的 PHP 框架。<br>  Yii 自带了丰富的功能 ，包括 MVC，DAO/ActiveRecord，I18N/L10N，缓存，身份验证和基于角色的访问控制，脚手架，测试等，可显著缩短开发时间。</p>\n<h2 id=\"创建\"><a href=\"#创建\" class=\"headerlink\" title=\"创建\"></a>创建</h2><h3 id=\"前期准备\"><a href=\"#前期准备\" class=\"headerlink\" title=\"前期准备\"></a>前期准备</h3><ul>\n<li><a href=\"/2016-09-30/Install-Nginx-PHP7-MySQL-on-Ubuntu16-04.html\">PHP运行环境</a></li>\n<li><p>Composer 环境</p>\n<ul>\n<li><p>Mac OS X</p>\n<pre><code><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">brew install composer</span><br></pre></td></tr></table></figure>\n</code></pre></li>\n<li><p>Ubuntu</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 下载</span></span><br><span class=\"line\">curl -sS https://getcomposer.org/installer | php -d detect_unicode=Off </span><br><span class=\"line\"><span class=\"comment\"># 全局</span></span><br><span class=\"line\">mv composer.phar /usr/<span class=\"built_in\">local</span>/bin/composer </span><br><span class=\"line\"><span class=\"comment\"># 权限</span></span><br><span class=\"line\">chmod a+x /usr/<span class=\"built_in\">local</span>/bin/composer</span><br><span class=\"line\"><span class=\"comment\"># 更新</span></span><br><span class=\"line\">composer self-update</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h3><ol>\n<li><h4 id=\"Composer-安装\"><a href=\"#Composer-安装\" class=\"headerlink\" title=\"Composer 安装\"></a>Composer 安装</h4><p>  安装composer-asset-plugin插件</p>\n   <figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 切换国内镜像(http://pkg.phpcomposer.com/)</span></span><br><span class=\"line\">composer config -g repo.packagist composer https://packagist.phpcomposer.com</span><br><span class=\"line\"></span><br><span class=\"line\">composer global require <span class=\"string\">\"fxp/composer-asset-plugin:^1.2.0\"</span></span><br></pre></td></tr></table></figure>\n<p>   安装基础版</p>\n   <figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">composer create-project yiisoft/yii2-app-basic xxx</span><br></pre></td></tr></table></figure>\n<p>   安装高级版</p>\n   <figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">composer create-project yiisoft/yii2-app-advanced xxx</span><br></pre></td></tr></table></figure>\n</li>\n<li><h4 id=\"下载安装\"><a href=\"#下载安装\" class=\"headerlink\" title=\"下载安装\"></a>下载安装</h4><p>   <a href=\"https://github.com/yiisoft/yii2/releases/download/2.0.10/yii-basic-app-2.0.10.tgz\" target=\"_blank\" rel=\"noopener\">基础班</a><br>   <a href=\"https://github.com/yiisoft/yii2/releases/download/2.0.10/yii-advanced-app-2.0.10.tgz\" target=\"_blank\" rel=\"noopener\">高级版</a></p>\n</li>\n</ol>\n<h2 id=\"Tips\"><a href=\"#Tips\" class=\"headerlink\" title=\"Tips\"></a>Tips</h2>  <figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">The zip extension and unzip <span class=\"built_in\">command</span> are both missing, skipping.</span><br></pre></td></tr></table></figure>\n<p>  解决方案<br>  <figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">apt-get install php7.0-zip</span><br></pre></td></tr></table></figure></p>\n<hr>\n  <figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">codeception/base 2.2.3 requires phpunit/phpunit &gt;4.8.20 &lt;5.5 -&gt; satisfiable by phpunit/phpunit</span><br><span class=\"line\">phpunit/phpunit 5.6.2 requires ext-dom * -&gt; the requested PHP extension dom is missing from your system.</span><br></pre></td></tr></table></figure>\n<p>  解决方案<br>  <figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">apt-get install php7.0-xml</span><br></pre></td></tr></table></figure></p>\n"},{"title":"如何才能成为一个优秀架构师","date":"2018-05-10T01:46:38.000Z","description":"成为一个架构师需要具备什么能力呢？该如何努力才能成为一个优秀的架构师？","_content":"\n## 知识面要广\n\n其实我认为做架构师的，从来都是CTO储备，因为需要涉及的能力太广。\n\n> **做架构，其实最简单的理解就是一句话，就是在有各种限制的情况下想办法解决问题。**\n\n所谓的限制就是`性能`、`稳定性`、`开发效率`、`可维护性`等因素。\n\n* 百度贴吧这种应用场景，每天可能有几十亿次的访问，几千万甚至上亿次的写入。肯定是性能要求为先，可能为了做性能的提升牺牲一部分开发的效率。\n\n* 银行的应用场景，不是非常在意用户的体验和访问延迟，但是对于数据的安全性和一致性非常非常重视。这种时候，肯定是安全和稳定优先，性能后面考虑。\n\n在限制中做权衡，也就是意味着要做大量的选择。但做选择那首先你得知道有哪些选择。\n\n所谓的性能和安全，除了这几个字之外，具体的技术实施上，总得知道都有哪些方案吧。\n\n* 例如 Java 体系、PHP 体系、C 体系、还有 Python/Node.js/Golang 等，各自有各自的优势劣势，你总得有过相关开发经验才能做出正确的选择吧。道听途说是没有发言权的。\n\n* 虽然现在数据库用的最多的是MySQL，但是 Oracle/PgSQL 也都有其优势。\n\n* 现在项目几乎没有不用到大数据的，那么大数据的算法至少得有些理解吧，大数据的平台得有些经验吧。\n\n* 玩转整体项目还有许多许多的点，例如代码如何管理、上线部署，如何测试保证Bug率，系统的监控，服务器部署，灰度发布等等。\n\n不要听那些一提架构师就好像多么高大上，做的都是些设计师类似的工作，系统设计、软件设计等。那些都是人云亦云YY出来的。\n\n**没有哪个互联网公司让你去专门做设计，因为互联网公司领导们统统无一例外需要的都是功能的实现，战略战术想法的实现。**\n\n**所有的大型系统架构，全部都是基于面临的问题一步一步解决迭代出来的。没有场景会让人一步到位(甚至哪怕提前一段提前量)去设计一套牛逼系统的，因为世界变化太快，项目如果不赶紧实现，明天可能就挂了，哪有那些闲心去给未来几年做设计。**\n\n**所以，做架构师最关键的是对整个项目的把控能力，可以让项目高效率的运转。**\n\n## 卓越的代码能力\n\n想要成为架构师，首先得是一个优秀的程序员。怎么样才算优秀的程序员呢？\n\n光写代码不思考、不学习肯定是不行的。\n\n最明确的，就是得深入掌握各类数据结构、各类设计模式、计算机网络、操作系统、各种常见的架构模式等。这些提的非常多，但是能做到深入理解的我感觉可能没几个人。\n\n包括我自己，当年刚开始看设计模式的时候，1个多月就感觉已经全部理解了。但是之后每次或者复习的时候，或者看到写的非常好的代码的时候，重新去温故此方面的知识，都能感到有新的收获、都会有更深的领悟。\n\n而且，理解也仅仅是开始。如何完完全全的融入自己的代码中，才是关键。\n\n写代码经常也同样充斥着架构设计的感觉。其实我认为，程序员写代码叫编码或Coding，而架构师写代码就叫架构设计。\n\n因为两者写代码时考虑问题的角度完全不同。程序员可能更多考虑的是如何实现功能，而优秀的程序员才可能会考虑的例如`性能`、`可读性`、`可维护性`等问题。\n\n而这些对于架构师来说则是必须考虑的，考虑的纬度经常还会更多一些。\n\n所以，不要想着一步到位的跳过优秀程序员而直接成为架构师。不现实。\n\n## 对某些相关领域要有深度\n\n刚才讲了技术的广度，但是如果什么都知道，但是什么也不善长，没有什么精通的。那依然只能做个程序员。\n\n那么哪些领域算是关键的领域呢？\n\n到此基本就由业务方向的不同而区分不同的架构师了。\n\n例如金融领域的架构师，可能需要金融知识。\n\n例如大数据领域，可能对 Hadoop/Spark/Hive 之类的大数据领域知识要求深一些。\n\n再如高并发领域，可能对整个系统的性能优化，分布式系统设计等更深入一些。\n\n## 要有技术洞见\n\n这个技术洞见是借用《重新定义公司》里的词。换个易理解的词，就是技术上的远见卓识。\n\n以事后诸葛亮的方式举几个例子：\n\n1. 当年的京东如果选用的不是Windows平台，可能发展比现在好不少。\n\n2. 百度如果不是李XX的目光短浅，总是比市场慢几拍，现在也不致于被AT远远甩开。\n\n3. ......\n\n不要感觉好像很虚幻，如果你现在身为一个创业公司的架构师，你现在的一个貌似正确的决策可能直接导致未来公司的大量损失，甚至倒闭。\n\n\n\n## 管理能力\n\n架构师少有不带项目、不带人的，所以管理能力肯定也是必须。\n\n但管理能力是个很大的主题，这里就不多说了。\n\n\n\n\n\n------\n\n回头看看，其实写的也都是些方向性的东西。\n\n但是由于架构师职业的特殊性，真的很难给出一条具体的道路，只要按照这个道路走下去就能成为优秀的架构师。\n\n但有些原则性的方法还是有的：\n\n作为架构师，其实所谓的设计能力并非关键，因为一个项目完全凭空设计的机会很少，而且也都可以基于当时情况的权衡，直接使用别人们的设计方案的组合。\n\n这就是为什么看架构师相关的帖子看多了，就会发现所谓的分布式架构、大型网站架构，基本来来回回就那么几种。导致是个人出来都能喊两句架构怎样怎样。\n\n那么关键的是什么？是项目的把控能力，以及面对具体问题的解决能力。\n\n而要锻炼项目的把控能力和解决一些具体问题的能力，有时候光靠公司里的项目是不够的。\n\n因为公司项目中你往往只是其中的一员，只能做某个具体的工作，例如前端JS、APP、后端业务等。项目整体的运转情况你一般是了解不到的。即使运气好，项目负责人对此的把控很到位，而且还愿意全部讲解给你听，但毕竟很多环境你没动手做出，光凭别人说是不大可能有深刻的理解的。\n\n**那怎么办？你应该自己抽空全新做一个自己的项目，例如 BBS网站、有后台的APP等。网站或APP本身不重要，重要是你要自己开发、自己搞定上线系统、搞定监控系统、搞定发布系统、搞定测试系统等等。**\n\n**就是像一个正式公司的正式产品一样对待这个自己的项目**\n\n这样几个回合下来之后，你就会发现，你对整个项目的感知度提高极大。不再像以前那样，对项目除了自己负责的部分，其它都是迷迷糊糊的。\n\n\n\n---\n> 来源: https://zhuanlan.zhihu.com/p/27979747","source":"_posts/How-to-become-an-excellent-architect.md","raw":"---\ntitle: 如何才能成为一个优秀架构师\ndate: 2018-05-10 09:46:38\ntags:\n  - Architect\n  - Humanity\ncategories:\n  - Architect\ndescription: 成为一个架构师需要具备什么能力呢？该如何努力才能成为一个优秀的架构师？\n---\n\n## 知识面要广\n\n其实我认为做架构师的，从来都是CTO储备，因为需要涉及的能力太广。\n\n> **做架构，其实最简单的理解就是一句话，就是在有各种限制的情况下想办法解决问题。**\n\n所谓的限制就是`性能`、`稳定性`、`开发效率`、`可维护性`等因素。\n\n* 百度贴吧这种应用场景，每天可能有几十亿次的访问，几千万甚至上亿次的写入。肯定是性能要求为先，可能为了做性能的提升牺牲一部分开发的效率。\n\n* 银行的应用场景，不是非常在意用户的体验和访问延迟，但是对于数据的安全性和一致性非常非常重视。这种时候，肯定是安全和稳定优先，性能后面考虑。\n\n在限制中做权衡，也就是意味着要做大量的选择。但做选择那首先你得知道有哪些选择。\n\n所谓的性能和安全，除了这几个字之外，具体的技术实施上，总得知道都有哪些方案吧。\n\n* 例如 Java 体系、PHP 体系、C 体系、还有 Python/Node.js/Golang 等，各自有各自的优势劣势，你总得有过相关开发经验才能做出正确的选择吧。道听途说是没有发言权的。\n\n* 虽然现在数据库用的最多的是MySQL，但是 Oracle/PgSQL 也都有其优势。\n\n* 现在项目几乎没有不用到大数据的，那么大数据的算法至少得有些理解吧，大数据的平台得有些经验吧。\n\n* 玩转整体项目还有许多许多的点，例如代码如何管理、上线部署，如何测试保证Bug率，系统的监控，服务器部署，灰度发布等等。\n\n不要听那些一提架构师就好像多么高大上，做的都是些设计师类似的工作，系统设计、软件设计等。那些都是人云亦云YY出来的。\n\n**没有哪个互联网公司让你去专门做设计，因为互联网公司领导们统统无一例外需要的都是功能的实现，战略战术想法的实现。**\n\n**所有的大型系统架构，全部都是基于面临的问题一步一步解决迭代出来的。没有场景会让人一步到位(甚至哪怕提前一段提前量)去设计一套牛逼系统的，因为世界变化太快，项目如果不赶紧实现，明天可能就挂了，哪有那些闲心去给未来几年做设计。**\n\n**所以，做架构师最关键的是对整个项目的把控能力，可以让项目高效率的运转。**\n\n## 卓越的代码能力\n\n想要成为架构师，首先得是一个优秀的程序员。怎么样才算优秀的程序员呢？\n\n光写代码不思考、不学习肯定是不行的。\n\n最明确的，就是得深入掌握各类数据结构、各类设计模式、计算机网络、操作系统、各种常见的架构模式等。这些提的非常多，但是能做到深入理解的我感觉可能没几个人。\n\n包括我自己，当年刚开始看设计模式的时候，1个多月就感觉已经全部理解了。但是之后每次或者复习的时候，或者看到写的非常好的代码的时候，重新去温故此方面的知识，都能感到有新的收获、都会有更深的领悟。\n\n而且，理解也仅仅是开始。如何完完全全的融入自己的代码中，才是关键。\n\n写代码经常也同样充斥着架构设计的感觉。其实我认为，程序员写代码叫编码或Coding，而架构师写代码就叫架构设计。\n\n因为两者写代码时考虑问题的角度完全不同。程序员可能更多考虑的是如何实现功能，而优秀的程序员才可能会考虑的例如`性能`、`可读性`、`可维护性`等问题。\n\n而这些对于架构师来说则是必须考虑的，考虑的纬度经常还会更多一些。\n\n所以，不要想着一步到位的跳过优秀程序员而直接成为架构师。不现实。\n\n## 对某些相关领域要有深度\n\n刚才讲了技术的广度，但是如果什么都知道，但是什么也不善长，没有什么精通的。那依然只能做个程序员。\n\n那么哪些领域算是关键的领域呢？\n\n到此基本就由业务方向的不同而区分不同的架构师了。\n\n例如金融领域的架构师，可能需要金融知识。\n\n例如大数据领域，可能对 Hadoop/Spark/Hive 之类的大数据领域知识要求深一些。\n\n再如高并发领域，可能对整个系统的性能优化，分布式系统设计等更深入一些。\n\n## 要有技术洞见\n\n这个技术洞见是借用《重新定义公司》里的词。换个易理解的词，就是技术上的远见卓识。\n\n以事后诸葛亮的方式举几个例子：\n\n1. 当年的京东如果选用的不是Windows平台，可能发展比现在好不少。\n\n2. 百度如果不是李XX的目光短浅，总是比市场慢几拍，现在也不致于被AT远远甩开。\n\n3. ......\n\n不要感觉好像很虚幻，如果你现在身为一个创业公司的架构师，你现在的一个貌似正确的决策可能直接导致未来公司的大量损失，甚至倒闭。\n\n\n\n## 管理能力\n\n架构师少有不带项目、不带人的，所以管理能力肯定也是必须。\n\n但管理能力是个很大的主题，这里就不多说了。\n\n\n\n\n\n------\n\n回头看看，其实写的也都是些方向性的东西。\n\n但是由于架构师职业的特殊性，真的很难给出一条具体的道路，只要按照这个道路走下去就能成为优秀的架构师。\n\n但有些原则性的方法还是有的：\n\n作为架构师，其实所谓的设计能力并非关键，因为一个项目完全凭空设计的机会很少，而且也都可以基于当时情况的权衡，直接使用别人们的设计方案的组合。\n\n这就是为什么看架构师相关的帖子看多了，就会发现所谓的分布式架构、大型网站架构，基本来来回回就那么几种。导致是个人出来都能喊两句架构怎样怎样。\n\n那么关键的是什么？是项目的把控能力，以及面对具体问题的解决能力。\n\n而要锻炼项目的把控能力和解决一些具体问题的能力，有时候光靠公司里的项目是不够的。\n\n因为公司项目中你往往只是其中的一员，只能做某个具体的工作，例如前端JS、APP、后端业务等。项目整体的运转情况你一般是了解不到的。即使运气好，项目负责人对此的把控很到位，而且还愿意全部讲解给你听，但毕竟很多环境你没动手做出，光凭别人说是不大可能有深刻的理解的。\n\n**那怎么办？你应该自己抽空全新做一个自己的项目，例如 BBS网站、有后台的APP等。网站或APP本身不重要，重要是你要自己开发、自己搞定上线系统、搞定监控系统、搞定发布系统、搞定测试系统等等。**\n\n**就是像一个正式公司的正式产品一样对待这个自己的项目**\n\n这样几个回合下来之后，你就会发现，你对整个项目的感知度提高极大。不再像以前那样，对项目除了自己负责的部分，其它都是迷迷糊糊的。\n\n\n\n---\n> 来源: https://zhuanlan.zhihu.com/p/27979747","slug":"How-to-become-an-excellent-architect","published":1,"updated":"2018-05-14T03:12:35.458Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjh8jw4v300056b8kqykbntuc","content":"<h2 id=\"知识面要广\"><a href=\"#知识面要广\" class=\"headerlink\" title=\"知识面要广\"></a>知识面要广</h2><p>其实我认为做架构师的，从来都是CTO储备，因为需要涉及的能力太广。</p>\n<blockquote>\n<p><strong>做架构，其实最简单的理解就是一句话，就是在有各种限制的情况下想办法解决问题。</strong></p>\n</blockquote>\n<p>所谓的限制就是<code>性能</code>、<code>稳定性</code>、<code>开发效率</code>、<code>可维护性</code>等因素。</p>\n<ul>\n<li><p>百度贴吧这种应用场景，每天可能有几十亿次的访问，几千万甚至上亿次的写入。肯定是性能要求为先，可能为了做性能的提升牺牲一部分开发的效率。</p>\n</li>\n<li><p>银行的应用场景，不是非常在意用户的体验和访问延迟，但是对于数据的安全性和一致性非常非常重视。这种时候，肯定是安全和稳定优先，性能后面考虑。</p>\n</li>\n</ul>\n<p>在限制中做权衡，也就是意味着要做大量的选择。但做选择那首先你得知道有哪些选择。</p>\n<p>所谓的性能和安全，除了这几个字之外，具体的技术实施上，总得知道都有哪些方案吧。</p>\n<ul>\n<li><p>例如 Java 体系、PHP 体系、C 体系、还有 Python/Node.js/Golang 等，各自有各自的优势劣势，你总得有过相关开发经验才能做出正确的选择吧。道听途说是没有发言权的。</p>\n</li>\n<li><p>虽然现在数据库用的最多的是MySQL，但是 Oracle/PgSQL 也都有其优势。</p>\n</li>\n<li><p>现在项目几乎没有不用到大数据的，那么大数据的算法至少得有些理解吧，大数据的平台得有些经验吧。</p>\n</li>\n<li><p>玩转整体项目还有许多许多的点，例如代码如何管理、上线部署，如何测试保证Bug率，系统的监控，服务器部署，灰度发布等等。</p>\n</li>\n</ul>\n<p>不要听那些一提架构师就好像多么高大上，做的都是些设计师类似的工作，系统设计、软件设计等。那些都是人云亦云YY出来的。</p>\n<p><strong>没有哪个互联网公司让你去专门做设计，因为互联网公司领导们统统无一例外需要的都是功能的实现，战略战术想法的实现。</strong></p>\n<p><strong>所有的大型系统架构，全部都是基于面临的问题一步一步解决迭代出来的。没有场景会让人一步到位(甚至哪怕提前一段提前量)去设计一套牛逼系统的，因为世界变化太快，项目如果不赶紧实现，明天可能就挂了，哪有那些闲心去给未来几年做设计。</strong></p>\n<p><strong>所以，做架构师最关键的是对整个项目的把控能力，可以让项目高效率的运转。</strong></p>\n<h2 id=\"卓越的代码能力\"><a href=\"#卓越的代码能力\" class=\"headerlink\" title=\"卓越的代码能力\"></a>卓越的代码能力</h2><p>想要成为架构师，首先得是一个优秀的程序员。怎么样才算优秀的程序员呢？</p>\n<p>光写代码不思考、不学习肯定是不行的。</p>\n<p>最明确的，就是得深入掌握各类数据结构、各类设计模式、计算机网络、操作系统、各种常见的架构模式等。这些提的非常多，但是能做到深入理解的我感觉可能没几个人。</p>\n<p>包括我自己，当年刚开始看设计模式的时候，1个多月就感觉已经全部理解了。但是之后每次或者复习的时候，或者看到写的非常好的代码的时候，重新去温故此方面的知识，都能感到有新的收获、都会有更深的领悟。</p>\n<p>而且，理解也仅仅是开始。如何完完全全的融入自己的代码中，才是关键。</p>\n<p>写代码经常也同样充斥着架构设计的感觉。其实我认为，程序员写代码叫编码或Coding，而架构师写代码就叫架构设计。</p>\n<p>因为两者写代码时考虑问题的角度完全不同。程序员可能更多考虑的是如何实现功能，而优秀的程序员才可能会考虑的例如<code>性能</code>、<code>可读性</code>、<code>可维护性</code>等问题。</p>\n<p>而这些对于架构师来说则是必须考虑的，考虑的纬度经常还会更多一些。</p>\n<p>所以，不要想着一步到位的跳过优秀程序员而直接成为架构师。不现实。</p>\n<h2 id=\"对某些相关领域要有深度\"><a href=\"#对某些相关领域要有深度\" class=\"headerlink\" title=\"对某些相关领域要有深度\"></a>对某些相关领域要有深度</h2><p>刚才讲了技术的广度，但是如果什么都知道，但是什么也不善长，没有什么精通的。那依然只能做个程序员。</p>\n<p>那么哪些领域算是关键的领域呢？</p>\n<p>到此基本就由业务方向的不同而区分不同的架构师了。</p>\n<p>例如金融领域的架构师，可能需要金融知识。</p>\n<p>例如大数据领域，可能对 Hadoop/Spark/Hive 之类的大数据领域知识要求深一些。</p>\n<p>再如高并发领域，可能对整个系统的性能优化，分布式系统设计等更深入一些。</p>\n<h2 id=\"要有技术洞见\"><a href=\"#要有技术洞见\" class=\"headerlink\" title=\"要有技术洞见\"></a>要有技术洞见</h2><p>这个技术洞见是借用《重新定义公司》里的词。换个易理解的词，就是技术上的远见卓识。</p>\n<p>以事后诸葛亮的方式举几个例子：</p>\n<ol>\n<li><p>当年的京东如果选用的不是Windows平台，可能发展比现在好不少。</p>\n</li>\n<li><p>百度如果不是李XX的目光短浅，总是比市场慢几拍，现在也不致于被AT远远甩开。</p>\n</li>\n<li><p>……</p>\n</li>\n</ol>\n<p>不要感觉好像很虚幻，如果你现在身为一个创业公司的架构师，你现在的一个貌似正确的决策可能直接导致未来公司的大量损失，甚至倒闭。</p>\n<h2 id=\"管理能力\"><a href=\"#管理能力\" class=\"headerlink\" title=\"管理能力\"></a>管理能力</h2><p>架构师少有不带项目、不带人的，所以管理能力肯定也是必须。</p>\n<p>但管理能力是个很大的主题，这里就不多说了。</p>\n<hr>\n<p>回头看看，其实写的也都是些方向性的东西。</p>\n<p>但是由于架构师职业的特殊性，真的很难给出一条具体的道路，只要按照这个道路走下去就能成为优秀的架构师。</p>\n<p>但有些原则性的方法还是有的：</p>\n<p>作为架构师，其实所谓的设计能力并非关键，因为一个项目完全凭空设计的机会很少，而且也都可以基于当时情况的权衡，直接使用别人们的设计方案的组合。</p>\n<p>这就是为什么看架构师相关的帖子看多了，就会发现所谓的分布式架构、大型网站架构，基本来来回回就那么几种。导致是个人出来都能喊两句架构怎样怎样。</p>\n<p>那么关键的是什么？是项目的把控能力，以及面对具体问题的解决能力。</p>\n<p>而要锻炼项目的把控能力和解决一些具体问题的能力，有时候光靠公司里的项目是不够的。</p>\n<p>因为公司项目中你往往只是其中的一员，只能做某个具体的工作，例如前端JS、APP、后端业务等。项目整体的运转情况你一般是了解不到的。即使运气好，项目负责人对此的把控很到位，而且还愿意全部讲解给你听，但毕竟很多环境你没动手做出，光凭别人说是不大可能有深刻的理解的。</p>\n<p><strong>那怎么办？你应该自己抽空全新做一个自己的项目，例如 BBS网站、有后台的APP等。网站或APP本身不重要，重要是你要自己开发、自己搞定上线系统、搞定监控系统、搞定发布系统、搞定测试系统等等。</strong></p>\n<p><strong>就是像一个正式公司的正式产品一样对待这个自己的项目</strong></p>\n<p>这样几个回合下来之后，你就会发现，你对整个项目的感知度提高极大。不再像以前那样，对项目除了自己负责的部分，其它都是迷迷糊糊的。</p>\n<hr>\n<blockquote>\n<p>来源: <a href=\"https://zhuanlan.zhihu.com/p/27979747\" target=\"_blank\" rel=\"noopener\">https://zhuanlan.zhihu.com/p/27979747</a></p>\n</blockquote>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"知识面要广\"><a href=\"#知识面要广\" class=\"headerlink\" title=\"知识面要广\"></a>知识面要广</h2><p>其实我认为做架构师的，从来都是CTO储备，因为需要涉及的能力太广。</p>\n<blockquote>\n<p><strong>做架构，其实最简单的理解就是一句话，就是在有各种限制的情况下想办法解决问题。</strong></p>\n</blockquote>\n<p>所谓的限制就是<code>性能</code>、<code>稳定性</code>、<code>开发效率</code>、<code>可维护性</code>等因素。</p>\n<ul>\n<li><p>百度贴吧这种应用场景，每天可能有几十亿次的访问，几千万甚至上亿次的写入。肯定是性能要求为先，可能为了做性能的提升牺牲一部分开发的效率。</p>\n</li>\n<li><p>银行的应用场景，不是非常在意用户的体验和访问延迟，但是对于数据的安全性和一致性非常非常重视。这种时候，肯定是安全和稳定优先，性能后面考虑。</p>\n</li>\n</ul>\n<p>在限制中做权衡，也就是意味着要做大量的选择。但做选择那首先你得知道有哪些选择。</p>\n<p>所谓的性能和安全，除了这几个字之外，具体的技术实施上，总得知道都有哪些方案吧。</p>\n<ul>\n<li><p>例如 Java 体系、PHP 体系、C 体系、还有 Python/Node.js/Golang 等，各自有各自的优势劣势，你总得有过相关开发经验才能做出正确的选择吧。道听途说是没有发言权的。</p>\n</li>\n<li><p>虽然现在数据库用的最多的是MySQL，但是 Oracle/PgSQL 也都有其优势。</p>\n</li>\n<li><p>现在项目几乎没有不用到大数据的，那么大数据的算法至少得有些理解吧，大数据的平台得有些经验吧。</p>\n</li>\n<li><p>玩转整体项目还有许多许多的点，例如代码如何管理、上线部署，如何测试保证Bug率，系统的监控，服务器部署，灰度发布等等。</p>\n</li>\n</ul>\n<p>不要听那些一提架构师就好像多么高大上，做的都是些设计师类似的工作，系统设计、软件设计等。那些都是人云亦云YY出来的。</p>\n<p><strong>没有哪个互联网公司让你去专门做设计，因为互联网公司领导们统统无一例外需要的都是功能的实现，战略战术想法的实现。</strong></p>\n<p><strong>所有的大型系统架构，全部都是基于面临的问题一步一步解决迭代出来的。没有场景会让人一步到位(甚至哪怕提前一段提前量)去设计一套牛逼系统的，因为世界变化太快，项目如果不赶紧实现，明天可能就挂了，哪有那些闲心去给未来几年做设计。</strong></p>\n<p><strong>所以，做架构师最关键的是对整个项目的把控能力，可以让项目高效率的运转。</strong></p>\n<h2 id=\"卓越的代码能力\"><a href=\"#卓越的代码能力\" class=\"headerlink\" title=\"卓越的代码能力\"></a>卓越的代码能力</h2><p>想要成为架构师，首先得是一个优秀的程序员。怎么样才算优秀的程序员呢？</p>\n<p>光写代码不思考、不学习肯定是不行的。</p>\n<p>最明确的，就是得深入掌握各类数据结构、各类设计模式、计算机网络、操作系统、各种常见的架构模式等。这些提的非常多，但是能做到深入理解的我感觉可能没几个人。</p>\n<p>包括我自己，当年刚开始看设计模式的时候，1个多月就感觉已经全部理解了。但是之后每次或者复习的时候，或者看到写的非常好的代码的时候，重新去温故此方面的知识，都能感到有新的收获、都会有更深的领悟。</p>\n<p>而且，理解也仅仅是开始。如何完完全全的融入自己的代码中，才是关键。</p>\n<p>写代码经常也同样充斥着架构设计的感觉。其实我认为，程序员写代码叫编码或Coding，而架构师写代码就叫架构设计。</p>\n<p>因为两者写代码时考虑问题的角度完全不同。程序员可能更多考虑的是如何实现功能，而优秀的程序员才可能会考虑的例如<code>性能</code>、<code>可读性</code>、<code>可维护性</code>等问题。</p>\n<p>而这些对于架构师来说则是必须考虑的，考虑的纬度经常还会更多一些。</p>\n<p>所以，不要想着一步到位的跳过优秀程序员而直接成为架构师。不现实。</p>\n<h2 id=\"对某些相关领域要有深度\"><a href=\"#对某些相关领域要有深度\" class=\"headerlink\" title=\"对某些相关领域要有深度\"></a>对某些相关领域要有深度</h2><p>刚才讲了技术的广度，但是如果什么都知道，但是什么也不善长，没有什么精通的。那依然只能做个程序员。</p>\n<p>那么哪些领域算是关键的领域呢？</p>\n<p>到此基本就由业务方向的不同而区分不同的架构师了。</p>\n<p>例如金融领域的架构师，可能需要金融知识。</p>\n<p>例如大数据领域，可能对 Hadoop/Spark/Hive 之类的大数据领域知识要求深一些。</p>\n<p>再如高并发领域，可能对整个系统的性能优化，分布式系统设计等更深入一些。</p>\n<h2 id=\"要有技术洞见\"><a href=\"#要有技术洞见\" class=\"headerlink\" title=\"要有技术洞见\"></a>要有技术洞见</h2><p>这个技术洞见是借用《重新定义公司》里的词。换个易理解的词，就是技术上的远见卓识。</p>\n<p>以事后诸葛亮的方式举几个例子：</p>\n<ol>\n<li><p>当年的京东如果选用的不是Windows平台，可能发展比现在好不少。</p>\n</li>\n<li><p>百度如果不是李XX的目光短浅，总是比市场慢几拍，现在也不致于被AT远远甩开。</p>\n</li>\n<li><p>……</p>\n</li>\n</ol>\n<p>不要感觉好像很虚幻，如果你现在身为一个创业公司的架构师，你现在的一个貌似正确的决策可能直接导致未来公司的大量损失，甚至倒闭。</p>\n<h2 id=\"管理能力\"><a href=\"#管理能力\" class=\"headerlink\" title=\"管理能力\"></a>管理能力</h2><p>架构师少有不带项目、不带人的，所以管理能力肯定也是必须。</p>\n<p>但管理能力是个很大的主题，这里就不多说了。</p>\n<hr>\n<p>回头看看，其实写的也都是些方向性的东西。</p>\n<p>但是由于架构师职业的特殊性，真的很难给出一条具体的道路，只要按照这个道路走下去就能成为优秀的架构师。</p>\n<p>但有些原则性的方法还是有的：</p>\n<p>作为架构师，其实所谓的设计能力并非关键，因为一个项目完全凭空设计的机会很少，而且也都可以基于当时情况的权衡，直接使用别人们的设计方案的组合。</p>\n<p>这就是为什么看架构师相关的帖子看多了，就会发现所谓的分布式架构、大型网站架构，基本来来回回就那么几种。导致是个人出来都能喊两句架构怎样怎样。</p>\n<p>那么关键的是什么？是项目的把控能力，以及面对具体问题的解决能力。</p>\n<p>而要锻炼项目的把控能力和解决一些具体问题的能力，有时候光靠公司里的项目是不够的。</p>\n<p>因为公司项目中你往往只是其中的一员，只能做某个具体的工作，例如前端JS、APP、后端业务等。项目整体的运转情况你一般是了解不到的。即使运气好，项目负责人对此的把控很到位，而且还愿意全部讲解给你听，但毕竟很多环境你没动手做出，光凭别人说是不大可能有深刻的理解的。</p>\n<p><strong>那怎么办？你应该自己抽空全新做一个自己的项目，例如 BBS网站、有后台的APP等。网站或APP本身不重要，重要是你要自己开发、自己搞定上线系统、搞定监控系统、搞定发布系统、搞定测试系统等等。</strong></p>\n<p><strong>就是像一个正式公司的正式产品一样对待这个自己的项目</strong></p>\n<p>这样几个回合下来之后，你就会发现，你对整个项目的感知度提高极大。不再像以前那样，对项目除了自己负责的部分，其它都是迷迷糊糊的。</p>\n<hr>\n<blockquote>\n<p>来源: <a href=\"https://zhuanlan.zhihu.com/p/27979747\" target=\"_blank\" rel=\"noopener\">https://zhuanlan.zhihu.com/p/27979747</a></p>\n</blockquote>\n"},{"title":"Ubuntu 上安装使用 DynamoDB","date":"2016-11-16T02:28:46.000Z","description":"记录在Ubuntu 上安装 DynamoDB","_content":"\n## 安装\n1. #### Java SDK\n   ```bash\n    aptitude install openjdk-8-jdk\n   ```\n\n2. ####   安装解压软件\n   ```bash    \n    # 安装解压软件\n    aptitude install unzip\n   ```\n\n3. #### 下载安装 DynamoDB\n   ```bash\n    # 下载压缩包\n    wget http://dynamodb-local.s3-website-us-west-2.amazonaws.com/dynamodb_local_latest.zip \n    \n    # 解压\n    unzip ./dynamodb_local_latest.zip \n    \n    # 启动\n    java -Djava.library.path=./DynamoDBLocal_lib -jar DynamoDBLocal.jar -sharedDb\n    \n    # 查看帮助\n    java -Djava.library.path=./DynamoDBLocal_lib -jar DynamoDBLocal.jar -help\n   ```\n\n4. #### javascript shell\n   [http://127.0.0.1:8000/shell/](http://127.0.0.1:8000/shell/)\n","source":"_posts/DynamoDB-Ubuntu.md","raw":"---\ntitle: Ubuntu 上安装使用 DynamoDB\ndate: 2016-11-16 10:28:46\ntags:\n  - DynamoDB\n  - Software\ncategories:\n  -  Software\ndescription: 记录在Ubuntu 上安装 DynamoDB\n---\n\n## 安装\n1. #### Java SDK\n   ```bash\n    aptitude install openjdk-8-jdk\n   ```\n\n2. ####   安装解压软件\n   ```bash    \n    # 安装解压软件\n    aptitude install unzip\n   ```\n\n3. #### 下载安装 DynamoDB\n   ```bash\n    # 下载压缩包\n    wget http://dynamodb-local.s3-website-us-west-2.amazonaws.com/dynamodb_local_latest.zip \n    \n    # 解压\n    unzip ./dynamodb_local_latest.zip \n    \n    # 启动\n    java -Djava.library.path=./DynamoDBLocal_lib -jar DynamoDBLocal.jar -sharedDb\n    \n    # 查看帮助\n    java -Djava.library.path=./DynamoDBLocal_lib -jar DynamoDBLocal.jar -help\n   ```\n\n4. #### javascript shell\n   [http://127.0.0.1:8000/shell/](http://127.0.0.1:8000/shell/)\n","slug":"DynamoDB-Ubuntu","published":1,"updated":"2018-05-11T03:46:58.788Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjh8jw4v500066b8kcl55nylp","content":"<h2 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h2><ol>\n<li><h4 id=\"Java-SDK\"><a href=\"#Java-SDK\" class=\"headerlink\" title=\"Java SDK\"></a>Java SDK</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">aptitude install openjdk-8-jdk</span><br></pre></td></tr></table></figure>\n</li>\n<li><h4 id=\"安装解压软件\"><a href=\"#安装解压软件\" class=\"headerlink\" title=\"安装解压软件\"></a>安装解压软件</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 安装解压软件</span></span><br><span class=\"line\">aptitude install unzip</span><br></pre></td></tr></table></figure>\n</li>\n<li><h4 id=\"下载安装-DynamoDB\"><a href=\"#下载安装-DynamoDB\" class=\"headerlink\" title=\"下载安装 DynamoDB\"></a>下载安装 DynamoDB</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 下载压缩包</span></span><br><span class=\"line\">wget http://dynamodb-local.s3-website-us-west-2.amazonaws.com/dynamodb_local_latest.zip </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 解压</span></span><br><span class=\"line\">unzip ./dynamodb_local_latest.zip </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 启动</span></span><br><span class=\"line\">java -Djava.library.path=./DynamoDBLocal_lib -jar DynamoDBLocal.jar -sharedDb</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 查看帮助</span></span><br><span class=\"line\">java -Djava.library.path=./DynamoDBLocal_lib -jar DynamoDBLocal.jar -<span class=\"built_in\">help</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><h4 id=\"javascript-shell\"><a href=\"#javascript-shell\" class=\"headerlink\" title=\"javascript shell\"></a>javascript shell</h4><p><a href=\"http://127.0.0.1:8000/shell/\" target=\"_blank\" rel=\"noopener\">http://127.0.0.1:8000/shell/</a></p>\n</li>\n</ol>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h2><ol>\n<li><h4 id=\"Java-SDK\"><a href=\"#Java-SDK\" class=\"headerlink\" title=\"Java SDK\"></a>Java SDK</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">aptitude install openjdk-8-jdk</span><br></pre></td></tr></table></figure>\n</li>\n<li><h4 id=\"安装解压软件\"><a href=\"#安装解压软件\" class=\"headerlink\" title=\"安装解压软件\"></a>安装解压软件</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 安装解压软件</span></span><br><span class=\"line\">aptitude install unzip</span><br></pre></td></tr></table></figure>\n</li>\n<li><h4 id=\"下载安装-DynamoDB\"><a href=\"#下载安装-DynamoDB\" class=\"headerlink\" title=\"下载安装 DynamoDB\"></a>下载安装 DynamoDB</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 下载压缩包</span></span><br><span class=\"line\">wget http://dynamodb-local.s3-website-us-west-2.amazonaws.com/dynamodb_local_latest.zip </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 解压</span></span><br><span class=\"line\">unzip ./dynamodb_local_latest.zip </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 启动</span></span><br><span class=\"line\">java -Djava.library.path=./DynamoDBLocal_lib -jar DynamoDBLocal.jar -sharedDb</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 查看帮助</span></span><br><span class=\"line\">java -Djava.library.path=./DynamoDBLocal_lib -jar DynamoDBLocal.jar -<span class=\"built_in\">help</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><h4 id=\"javascript-shell\"><a href=\"#javascript-shell\" class=\"headerlink\" title=\"javascript shell\"></a>javascript shell</h4><p><a href=\"http://127.0.0.1:8000/shell/\" target=\"_blank\" rel=\"noopener\">http://127.0.0.1:8000/shell/</a></p>\n</li>\n</ol>\n"},{"title":"采用Let's Encrypt 证书在Nginx上实现 HTTPS","date":"2016-10-11T03:09:50.000Z","description":"简单介绍怎么采用Let's Encrypt 推荐的工具Certbot在Nginx上实现Https","_content":"## 前言\n\n### 什么是HTTPS\n  HTTPS（全称：Hyper Text Transfer Protocol over Secure Socket Layer），是以安全为目标的HTTP通道，简单讲是HTTP的安全版。即HTTP下加入SSL层，HTTPS的安全基础是SSL，因此加密的详细内容就需要SSL。\n  \n### 为什么使用HTTPS\n  我们大致也明白了HTTPS其实就是一个经过加密后的HTTP，具有更高的安全性。\n  \n### 证书选择\n目前市面上比较成熟的HTTPS 证书提供商：\n- 做证书起家的[VeriSign](http://www.verisign.com/ \"VeriSign\")\n- 老牌的 [StartSSL](https://www.startssl.com/ \"StartSSL\")\n- 新星 [Let’s Encrypt](https://letsencrypt.org/ \"Let’s Encrypt\")\n- 国内的 [沃通](https://www.wosign.com/ \"沃通\")\n- ......\n \n本文将使用Let's Encrypt证书，因为它免费、快速、可自动化续签......\n\n## 实践\n### 需要工具\n   - Ubuntu16.04的服务器 \n   - 域名\n \n### 安装\n  根据Let’s Encrypt上官方推荐我们将采用自动化工具[Certbot](https://certbot.eff.org/ 'Certbot')，并安装推荐教程直接操作。\n\n1.  安装Certbot   \n```bash\nsudo apt-get install letsencrypt\n```\n2. 申请证书\n```bash\nletsencrypt certonly --agree-tos --email xx@xx.com --webroot -w /var/www/example -d example.com -d www.example.com -w /var/www/thing -d thing.is -d m.thing.is\n# --email 后面替换成自己的Email用来接受通知\n# -d 填写需要Https访问的域名，可多个\n```\n  命令运行完以后会在`/etc/letsencrypt/live/example.com/`目录下生成一下文件\n  - cert.pem  服务器证书文件\n  - chain.pem\n  - fullchain.pem =  cert.pem + chain.pem  `Nginx配置文件中的 ssl_certificate`\n  - privkey.pem `Nginx 配置文件中的 ssl_certificate_key`\n3. 配置Nginx\n  ```bash\n  vim /etc/nginx/sites-available/default\n  ```\n  ```bash\nserver {\n    listen 80;\n    # listen [::]:80;\n    server_name example.com;\n\n    # Redirect all HTTP requests to HTTPS with a 301 Moved Permanently response.\n    return 301 https://$host$request_uri;\n}\n\nserver {\n    # SSL configuration\n    #\n    listen 443 ssl default_server;\n    listen [::]:443 ssl default_server;\n    server_name example.com;\n\n    location / {\n        root   /var/www/html;\n        index  index.html index.htm;\n    }\n    #error_page  404              /404.html;\n\n    # redirect server error pages to the static page /50x.html\n    #\n    error_page   500 502 503 504  /50x.html;\n    location = /50x.html {\n        root   /usr/share/nginx/html;\n    }\n\n    # certs sent to the client in SERVER HELLO are concatenated in ssl_certificate\n    ssl_certificate /etc/letsencrypt/live/example.com/fullchain.pem;\n    ssl_certificate_key /etc/letsencrypt/live/example.com/privkey.pem;\n    ssl_session_timeout 1d;\n    ssl_session_cache shared:SSL:50m;\n    ssl_session_tickets off;\n\n    # Diffie-Hellman parameter for DHE ciphersuites, recommended 2048 bits\n    # ssl_dhparam /etc/ssl/certs/dhparam.pem;\n\n    # intermediate configuration. tweak to your needs.\n    ssl_protocols TLSv1 TLSv1.1 TLSv1.2;\n    ssl_ciphers 'ECDHE-ECDSA-CHACHA20-POLY1305:ECDHE-RSA-CHACHA20-POLY1305:ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384:DHE-RSA-AES128-GCM-SHA256:DHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-AES128-SHA256:ECDHE-RSA-AES128-SHA256:ECDHE-ECDSA-AES128-SHA:ECDHE-RSA-AES256-SHA384:ECDHE-RSA-AES128-SHA:ECDHE-ECDSA-AES256-SHA384:ECDHE-ECDSA-AES256-SHA:ECDHE-RSA-AES256-SHA:DHE-RSA-AES128-SHA256:DHE-RSA-AES128-SHA:DHE-RSA-AES256-SHA256:DHE-RSA-AES256-SHA:ECDHE-ECDSA-DES-CBC3-SHA:ECDHE-RSA-DES-CBC3-SHA:EDH-RSA-DES-CBC3-SHA:AES128-GCM-SHA256:AES256-GCM-SHA384:AES128-SHA256:AES256-SHA256:AES128-SHA:AES256-SHA:DES-CBC3-SHA:!DSS';\n    ssl_prefer_server_ciphers on;\n\n    # HSTS (ngx_http_headers_module is required) (15768000 seconds = 6 months)\n    add_header Strict-Transport-Security max-age=15768000;\n\n    # OCSP Stapling ---\n    # fetch OCSP records from URL in ssl_certificate and cache them\n    ssl_stapling on;\n    ssl_stapling_verify on;\n\n    ## verify chain of trust of OCSP response using Root CA and Intermediate certs\n    # ssl_trusted_certificate /etc/letsencrypt/live/walfud.com/root_ca_cert_plus_intermediates;\n\n    # resolver 8.8.8.8 8.8.4.4 valid=300s;\n    # resolver_timeout 5s;\n    # pass the PHP scripts to FastCGI server listening on 127.0.0.1:9000\n    #\n    location ~ \\.php$ {\n        include snippets/fastcgi-php.conf;\n        # With php7.0-cgi alone:  \n        fastcgi_pass 127.0.0.1:9000;\n        # With php7.0-fpm:\n        # fastcgi_pass unix:/var/run/php7.0-fpm.sock;\n    }\n}\n```\n4. 重启Nginx\n  ```bash\n  service nginx reload\n  ```\n5. 自动续签\n    Let’s Encrypt 证书的有效期是 90 天，为了保证证书的有效性，我们需要及时的去续签(renew) 证书。这里我们采用`cron`来进行定期的续签。`letsencrypt renew`只会在证书过期的时候才会刷新证书，如果证书没有过期将不会执行任何命令。\n  ```bash\n  crontab -e \n  ```\n  ```bash\n  # 每天夜里凌晨 0 点续签:\n  * 0 * * * letsencrypt renew\n\n  # 重启 nginx 以使证书生效\n  * 1 * * * service nginx reload\n  ```\n\n\n","source":"_posts/Https-Nginx.md","raw":"---\ntitle:   采用Let's Encrypt 证书在Nginx上实现 HTTPS\ndate: 2016-10-11 11:09:50\ntags:\n  - Ubuntu\n  - HTTPS\n  - Nginx\n  - Server\ncategories:\n  - Server\ndescription:  简单介绍怎么采用Let's Encrypt 推荐的工具Certbot在Nginx上实现Https\n---\n## 前言\n\n### 什么是HTTPS\n  HTTPS（全称：Hyper Text Transfer Protocol over Secure Socket Layer），是以安全为目标的HTTP通道，简单讲是HTTP的安全版。即HTTP下加入SSL层，HTTPS的安全基础是SSL，因此加密的详细内容就需要SSL。\n  \n### 为什么使用HTTPS\n  我们大致也明白了HTTPS其实就是一个经过加密后的HTTP，具有更高的安全性。\n  \n### 证书选择\n目前市面上比较成熟的HTTPS 证书提供商：\n- 做证书起家的[VeriSign](http://www.verisign.com/ \"VeriSign\")\n- 老牌的 [StartSSL](https://www.startssl.com/ \"StartSSL\")\n- 新星 [Let’s Encrypt](https://letsencrypt.org/ \"Let’s Encrypt\")\n- 国内的 [沃通](https://www.wosign.com/ \"沃通\")\n- ......\n \n本文将使用Let's Encrypt证书，因为它免费、快速、可自动化续签......\n\n## 实践\n### 需要工具\n   - Ubuntu16.04的服务器 \n   - 域名\n \n### 安装\n  根据Let’s Encrypt上官方推荐我们将采用自动化工具[Certbot](https://certbot.eff.org/ 'Certbot')，并安装推荐教程直接操作。\n\n1.  安装Certbot   \n```bash\nsudo apt-get install letsencrypt\n```\n2. 申请证书\n```bash\nletsencrypt certonly --agree-tos --email xx@xx.com --webroot -w /var/www/example -d example.com -d www.example.com -w /var/www/thing -d thing.is -d m.thing.is\n# --email 后面替换成自己的Email用来接受通知\n# -d 填写需要Https访问的域名，可多个\n```\n  命令运行完以后会在`/etc/letsencrypt/live/example.com/`目录下生成一下文件\n  - cert.pem  服务器证书文件\n  - chain.pem\n  - fullchain.pem =  cert.pem + chain.pem  `Nginx配置文件中的 ssl_certificate`\n  - privkey.pem `Nginx 配置文件中的 ssl_certificate_key`\n3. 配置Nginx\n  ```bash\n  vim /etc/nginx/sites-available/default\n  ```\n  ```bash\nserver {\n    listen 80;\n    # listen [::]:80;\n    server_name example.com;\n\n    # Redirect all HTTP requests to HTTPS with a 301 Moved Permanently response.\n    return 301 https://$host$request_uri;\n}\n\nserver {\n    # SSL configuration\n    #\n    listen 443 ssl default_server;\n    listen [::]:443 ssl default_server;\n    server_name example.com;\n\n    location / {\n        root   /var/www/html;\n        index  index.html index.htm;\n    }\n    #error_page  404              /404.html;\n\n    # redirect server error pages to the static page /50x.html\n    #\n    error_page   500 502 503 504  /50x.html;\n    location = /50x.html {\n        root   /usr/share/nginx/html;\n    }\n\n    # certs sent to the client in SERVER HELLO are concatenated in ssl_certificate\n    ssl_certificate /etc/letsencrypt/live/example.com/fullchain.pem;\n    ssl_certificate_key /etc/letsencrypt/live/example.com/privkey.pem;\n    ssl_session_timeout 1d;\n    ssl_session_cache shared:SSL:50m;\n    ssl_session_tickets off;\n\n    # Diffie-Hellman parameter for DHE ciphersuites, recommended 2048 bits\n    # ssl_dhparam /etc/ssl/certs/dhparam.pem;\n\n    # intermediate configuration. tweak to your needs.\n    ssl_protocols TLSv1 TLSv1.1 TLSv1.2;\n    ssl_ciphers 'ECDHE-ECDSA-CHACHA20-POLY1305:ECDHE-RSA-CHACHA20-POLY1305:ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384:DHE-RSA-AES128-GCM-SHA256:DHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-AES128-SHA256:ECDHE-RSA-AES128-SHA256:ECDHE-ECDSA-AES128-SHA:ECDHE-RSA-AES256-SHA384:ECDHE-RSA-AES128-SHA:ECDHE-ECDSA-AES256-SHA384:ECDHE-ECDSA-AES256-SHA:ECDHE-RSA-AES256-SHA:DHE-RSA-AES128-SHA256:DHE-RSA-AES128-SHA:DHE-RSA-AES256-SHA256:DHE-RSA-AES256-SHA:ECDHE-ECDSA-DES-CBC3-SHA:ECDHE-RSA-DES-CBC3-SHA:EDH-RSA-DES-CBC3-SHA:AES128-GCM-SHA256:AES256-GCM-SHA384:AES128-SHA256:AES256-SHA256:AES128-SHA:AES256-SHA:DES-CBC3-SHA:!DSS';\n    ssl_prefer_server_ciphers on;\n\n    # HSTS (ngx_http_headers_module is required) (15768000 seconds = 6 months)\n    add_header Strict-Transport-Security max-age=15768000;\n\n    # OCSP Stapling ---\n    # fetch OCSP records from URL in ssl_certificate and cache them\n    ssl_stapling on;\n    ssl_stapling_verify on;\n\n    ## verify chain of trust of OCSP response using Root CA and Intermediate certs\n    # ssl_trusted_certificate /etc/letsencrypt/live/walfud.com/root_ca_cert_plus_intermediates;\n\n    # resolver 8.8.8.8 8.8.4.4 valid=300s;\n    # resolver_timeout 5s;\n    # pass the PHP scripts to FastCGI server listening on 127.0.0.1:9000\n    #\n    location ~ \\.php$ {\n        include snippets/fastcgi-php.conf;\n        # With php7.0-cgi alone:  \n        fastcgi_pass 127.0.0.1:9000;\n        # With php7.0-fpm:\n        # fastcgi_pass unix:/var/run/php7.0-fpm.sock;\n    }\n}\n```\n4. 重启Nginx\n  ```bash\n  service nginx reload\n  ```\n5. 自动续签\n    Let’s Encrypt 证书的有效期是 90 天，为了保证证书的有效性，我们需要及时的去续签(renew) 证书。这里我们采用`cron`来进行定期的续签。`letsencrypt renew`只会在证书过期的时候才会刷新证书，如果证书没有过期将不会执行任何命令。\n  ```bash\n  crontab -e \n  ```\n  ```bash\n  # 每天夜里凌晨 0 点续签:\n  * 0 * * * letsencrypt renew\n\n  # 重启 nginx 以使证书生效\n  * 1 * * * service nginx reload\n  ```\n\n\n","slug":"Https-Nginx","published":1,"updated":"2018-05-11T03:46:58.790Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjh8jw4v600076b8kymndkcee","content":"<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><h3 id=\"什么是HTTPS\"><a href=\"#什么是HTTPS\" class=\"headerlink\" title=\"什么是HTTPS\"></a>什么是HTTPS</h3><p>  HTTPS（全称：Hyper Text Transfer Protocol over Secure Socket Layer），是以安全为目标的HTTP通道，简单讲是HTTP的安全版。即HTTP下加入SSL层，HTTPS的安全基础是SSL，因此加密的详细内容就需要SSL。</p>\n<h3 id=\"为什么使用HTTPS\"><a href=\"#为什么使用HTTPS\" class=\"headerlink\" title=\"为什么使用HTTPS\"></a>为什么使用HTTPS</h3><p>  我们大致也明白了HTTPS其实就是一个经过加密后的HTTP，具有更高的安全性。</p>\n<h3 id=\"证书选择\"><a href=\"#证书选择\" class=\"headerlink\" title=\"证书选择\"></a>证书选择</h3><p>目前市面上比较成熟的HTTPS 证书提供商：</p>\n<ul>\n<li>做证书起家的<a href=\"http://www.verisign.com/\" title=\"VeriSign\" target=\"_blank\" rel=\"noopener\">VeriSign</a></li>\n<li>老牌的 <a href=\"https://www.startssl.com/\" title=\"StartSSL\" target=\"_blank\" rel=\"noopener\">StartSSL</a></li>\n<li>新星 <a href=\"https://letsencrypt.org/\" title=\"Let’s Encrypt\" target=\"_blank\" rel=\"noopener\">Let’s Encrypt</a></li>\n<li>国内的 <a href=\"https://www.wosign.com/\" title=\"沃通\" target=\"_blank\" rel=\"noopener\">沃通</a></li>\n<li>……</li>\n</ul>\n<p>本文将使用Let’s Encrypt证书，因为它免费、快速、可自动化续签……</p>\n<h2 id=\"实践\"><a href=\"#实践\" class=\"headerlink\" title=\"实践\"></a>实践</h2><h3 id=\"需要工具\"><a href=\"#需要工具\" class=\"headerlink\" title=\"需要工具\"></a>需要工具</h3><ul>\n<li>Ubuntu16.04的服务器 </li>\n<li>域名</li>\n</ul>\n<h3 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h3><p>  根据Let’s Encrypt上官方推荐我们将采用自动化工具<a href=\"https://certbot.eff.org/\" title=\"Certbot\" target=\"_blank\" rel=\"noopener\">Certbot</a>，并安装推荐教程直接操作。</p>\n<ol>\n<li><p>安装Certbot   </p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo apt-get install letsencrypt</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>申请证书</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">letsencrypt certonly --agree-tos --email xx@xx.com --webroot -w /var/www/example -d example.com -d www.example.com -w /var/www/thing -d thing.is -d m.thing.is</span><br><span class=\"line\"><span class=\"comment\"># --email 后面替换成自己的Email用来接受通知</span></span><br><span class=\"line\"><span class=\"comment\"># -d 填写需要Https访问的域名，可多个</span></span><br></pre></td></tr></table></figure>\n<p>命令运行完以后会在<code>/etc/letsencrypt/live/example.com/</code>目录下生成一下文件</p>\n<ul>\n<li>cert.pem  服务器证书文件</li>\n<li>chain.pem</li>\n<li>fullchain.pem =  cert.pem + chain.pem  <code>Nginx配置文件中的 ssl_certificate</code></li>\n<li>privkey.pem <code>Nginx 配置文件中的 ssl_certificate_key</code></li>\n</ul>\n</li>\n<li><p>配置Nginx</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">vim /etc/nginx/sites-available/default</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">server &#123;</span><br><span class=\"line\">    listen 80;</span><br><span class=\"line\">    <span class=\"comment\"># listen [::]:80;</span></span><br><span class=\"line\">    server_name example.com;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\"># Redirect all HTTP requests to HTTPS with a 301 Moved Permanently response.</span></span><br><span class=\"line\">    <span class=\"built_in\">return</span> 301 https://<span class=\"variable\">$host</span><span class=\"variable\">$request_uri</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">server &#123;</span><br><span class=\"line\">    <span class=\"comment\"># SSL configuration</span></span><br><span class=\"line\">    <span class=\"comment\">#</span></span><br><span class=\"line\">    listen 443 ssl default_server;</span><br><span class=\"line\">    listen [::]:443 ssl default_server;</span><br><span class=\"line\">    server_name example.com;</span><br><span class=\"line\"></span><br><span class=\"line\">    location / &#123;</span><br><span class=\"line\">        root   /var/www/html;</span><br><span class=\"line\">        index  index.html index.htm;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">#error_page  404              /404.html;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\"># redirect server error pages to the static page /50x.html</span></span><br><span class=\"line\">    <span class=\"comment\">#</span></span><br><span class=\"line\">    error_page   500 502 503 504  /50x.html;</span><br><span class=\"line\">    location = /50x.html &#123;</span><br><span class=\"line\">        root   /usr/share/nginx/html;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\"># certs sent to the client in SERVER HELLO are concatenated in ssl_certificate</span></span><br><span class=\"line\">    ssl_certificate /etc/letsencrypt/live/example.com/fullchain.pem;</span><br><span class=\"line\">    ssl_certificate_key /etc/letsencrypt/live/example.com/privkey.pem;</span><br><span class=\"line\">    ssl_session_timeout 1d;</span><br><span class=\"line\">    ssl_session_cache shared:SSL:50m;</span><br><span class=\"line\">    ssl_session_tickets off;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\"># Diffie-Hellman parameter for DHE ciphersuites, recommended 2048 bits</span></span><br><span class=\"line\">    <span class=\"comment\"># ssl_dhparam /etc/ssl/certs/dhparam.pem;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\"># intermediate configuration. tweak to your needs.</span></span><br><span class=\"line\">    ssl_protocols TLSv1 TLSv1.1 TLSv1.2;</span><br><span class=\"line\">    ssl_ciphers <span class=\"string\">'ECDHE-ECDSA-CHACHA20-POLY1305:ECDHE-RSA-CHACHA20-POLY1305:ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384:DHE-RSA-AES128-GCM-SHA256:DHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-AES128-SHA256:ECDHE-RSA-AES128-SHA256:ECDHE-ECDSA-AES128-SHA:ECDHE-RSA-AES256-SHA384:ECDHE-RSA-AES128-SHA:ECDHE-ECDSA-AES256-SHA384:ECDHE-ECDSA-AES256-SHA:ECDHE-RSA-AES256-SHA:DHE-RSA-AES128-SHA256:DHE-RSA-AES128-SHA:DHE-RSA-AES256-SHA256:DHE-RSA-AES256-SHA:ECDHE-ECDSA-DES-CBC3-SHA:ECDHE-RSA-DES-CBC3-SHA:EDH-RSA-DES-CBC3-SHA:AES128-GCM-SHA256:AES256-GCM-SHA384:AES128-SHA256:AES256-SHA256:AES128-SHA:AES256-SHA:DES-CBC3-SHA:!DSS'</span>;</span><br><span class=\"line\">    ssl_prefer_server_ciphers on;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\"># HSTS (ngx_http_headers_module is required) (15768000 seconds = 6 months)</span></span><br><span class=\"line\">    add_header Strict-Transport-Security max-age=15768000;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\"># OCSP Stapling ---</span></span><br><span class=\"line\">    <span class=\"comment\"># fetch OCSP records from URL in ssl_certificate and cache them</span></span><br><span class=\"line\">    ssl_stapling on;</span><br><span class=\"line\">    ssl_stapling_verify on;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">## verify chain of trust of OCSP response using Root CA and Intermediate certs</span></span><br><span class=\"line\">    <span class=\"comment\"># ssl_trusted_certificate /etc/letsencrypt/live/walfud.com/root_ca_cert_plus_intermediates;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\"># resolver 8.8.8.8 8.8.4.4 valid=300s;</span></span><br><span class=\"line\">    <span class=\"comment\"># resolver_timeout 5s;</span></span><br><span class=\"line\">    <span class=\"comment\"># pass the PHP scripts to FastCGI server listening on 127.0.0.1:9000</span></span><br><span class=\"line\">    <span class=\"comment\">#</span></span><br><span class=\"line\">    location ~ \\.php$ &#123;</span><br><span class=\"line\">        include snippets/fastcgi-php.conf;</span><br><span class=\"line\">        <span class=\"comment\"># With php7.0-cgi alone:  </span></span><br><span class=\"line\">        fastcgi_pass 127.0.0.1:9000;</span><br><span class=\"line\">        <span class=\"comment\"># With php7.0-fpm:</span></span><br><span class=\"line\">        <span class=\"comment\"># fastcgi_pass unix:/var/run/php7.0-fpm.sock;</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>重启Nginx</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">service nginx reload</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>自动续签<br> Let’s Encrypt 证书的有效期是 90 天，为了保证证书的有效性，我们需要及时的去续签(renew) 证书。这里我们采用<code>cron</code>来进行定期的续签。<code>letsencrypt renew</code>只会在证书过期的时候才会刷新证书，如果证书没有过期将不会执行任何命令。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">crontab -e</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 每天夜里凌晨 0 点续签:</span></span><br><span class=\"line\">* 0 * * * letsencrypt renew</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 重启 nginx 以使证书生效</span></span><br><span class=\"line\">* 1 * * * service nginx reload</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><h3 id=\"什么是HTTPS\"><a href=\"#什么是HTTPS\" class=\"headerlink\" title=\"什么是HTTPS\"></a>什么是HTTPS</h3><p>  HTTPS（全称：Hyper Text Transfer Protocol over Secure Socket Layer），是以安全为目标的HTTP通道，简单讲是HTTP的安全版。即HTTP下加入SSL层，HTTPS的安全基础是SSL，因此加密的详细内容就需要SSL。</p>\n<h3 id=\"为什么使用HTTPS\"><a href=\"#为什么使用HTTPS\" class=\"headerlink\" title=\"为什么使用HTTPS\"></a>为什么使用HTTPS</h3><p>  我们大致也明白了HTTPS其实就是一个经过加密后的HTTP，具有更高的安全性。</p>\n<h3 id=\"证书选择\"><a href=\"#证书选择\" class=\"headerlink\" title=\"证书选择\"></a>证书选择</h3><p>目前市面上比较成熟的HTTPS 证书提供商：</p>\n<ul>\n<li>做证书起家的<a href=\"http://www.verisign.com/\" title=\"VeriSign\" target=\"_blank\" rel=\"noopener\">VeriSign</a></li>\n<li>老牌的 <a href=\"https://www.startssl.com/\" title=\"StartSSL\" target=\"_blank\" rel=\"noopener\">StartSSL</a></li>\n<li>新星 <a href=\"https://letsencrypt.org/\" title=\"Let’s Encrypt\" target=\"_blank\" rel=\"noopener\">Let’s Encrypt</a></li>\n<li>国内的 <a href=\"https://www.wosign.com/\" title=\"沃通\" target=\"_blank\" rel=\"noopener\">沃通</a></li>\n<li>……</li>\n</ul>\n<p>本文将使用Let’s Encrypt证书，因为它免费、快速、可自动化续签……</p>\n<h2 id=\"实践\"><a href=\"#实践\" class=\"headerlink\" title=\"实践\"></a>实践</h2><h3 id=\"需要工具\"><a href=\"#需要工具\" class=\"headerlink\" title=\"需要工具\"></a>需要工具</h3><ul>\n<li>Ubuntu16.04的服务器 </li>\n<li>域名</li>\n</ul>\n<h3 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h3><p>  根据Let’s Encrypt上官方推荐我们将采用自动化工具<a href=\"https://certbot.eff.org/\" title=\"Certbot\" target=\"_blank\" rel=\"noopener\">Certbot</a>，并安装推荐教程直接操作。</p>\n<ol>\n<li><p>安装Certbot   </p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo apt-get install letsencrypt</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>申请证书</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">letsencrypt certonly --agree-tos --email xx@xx.com --webroot -w /var/www/example -d example.com -d www.example.com -w /var/www/thing -d thing.is -d m.thing.is</span><br><span class=\"line\"><span class=\"comment\"># --email 后面替换成自己的Email用来接受通知</span></span><br><span class=\"line\"><span class=\"comment\"># -d 填写需要Https访问的域名，可多个</span></span><br></pre></td></tr></table></figure>\n<p>命令运行完以后会在<code>/etc/letsencrypt/live/example.com/</code>目录下生成一下文件</p>\n<ul>\n<li>cert.pem  服务器证书文件</li>\n<li>chain.pem</li>\n<li>fullchain.pem =  cert.pem + chain.pem  <code>Nginx配置文件中的 ssl_certificate</code></li>\n<li>privkey.pem <code>Nginx 配置文件中的 ssl_certificate_key</code></li>\n</ul>\n</li>\n<li><p>配置Nginx</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">vim /etc/nginx/sites-available/default</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">server &#123;</span><br><span class=\"line\">    listen 80;</span><br><span class=\"line\">    <span class=\"comment\"># listen [::]:80;</span></span><br><span class=\"line\">    server_name example.com;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\"># Redirect all HTTP requests to HTTPS with a 301 Moved Permanently response.</span></span><br><span class=\"line\">    <span class=\"built_in\">return</span> 301 https://<span class=\"variable\">$host</span><span class=\"variable\">$request_uri</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">server &#123;</span><br><span class=\"line\">    <span class=\"comment\"># SSL configuration</span></span><br><span class=\"line\">    <span class=\"comment\">#</span></span><br><span class=\"line\">    listen 443 ssl default_server;</span><br><span class=\"line\">    listen [::]:443 ssl default_server;</span><br><span class=\"line\">    server_name example.com;</span><br><span class=\"line\"></span><br><span class=\"line\">    location / &#123;</span><br><span class=\"line\">        root   /var/www/html;</span><br><span class=\"line\">        index  index.html index.htm;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">#error_page  404              /404.html;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\"># redirect server error pages to the static page /50x.html</span></span><br><span class=\"line\">    <span class=\"comment\">#</span></span><br><span class=\"line\">    error_page   500 502 503 504  /50x.html;</span><br><span class=\"line\">    location = /50x.html &#123;</span><br><span class=\"line\">        root   /usr/share/nginx/html;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\"># certs sent to the client in SERVER HELLO are concatenated in ssl_certificate</span></span><br><span class=\"line\">    ssl_certificate /etc/letsencrypt/live/example.com/fullchain.pem;</span><br><span class=\"line\">    ssl_certificate_key /etc/letsencrypt/live/example.com/privkey.pem;</span><br><span class=\"line\">    ssl_session_timeout 1d;</span><br><span class=\"line\">    ssl_session_cache shared:SSL:50m;</span><br><span class=\"line\">    ssl_session_tickets off;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\"># Diffie-Hellman parameter for DHE ciphersuites, recommended 2048 bits</span></span><br><span class=\"line\">    <span class=\"comment\"># ssl_dhparam /etc/ssl/certs/dhparam.pem;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\"># intermediate configuration. tweak to your needs.</span></span><br><span class=\"line\">    ssl_protocols TLSv1 TLSv1.1 TLSv1.2;</span><br><span class=\"line\">    ssl_ciphers <span class=\"string\">'ECDHE-ECDSA-CHACHA20-POLY1305:ECDHE-RSA-CHACHA20-POLY1305:ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384:DHE-RSA-AES128-GCM-SHA256:DHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-AES128-SHA256:ECDHE-RSA-AES128-SHA256:ECDHE-ECDSA-AES128-SHA:ECDHE-RSA-AES256-SHA384:ECDHE-RSA-AES128-SHA:ECDHE-ECDSA-AES256-SHA384:ECDHE-ECDSA-AES256-SHA:ECDHE-RSA-AES256-SHA:DHE-RSA-AES128-SHA256:DHE-RSA-AES128-SHA:DHE-RSA-AES256-SHA256:DHE-RSA-AES256-SHA:ECDHE-ECDSA-DES-CBC3-SHA:ECDHE-RSA-DES-CBC3-SHA:EDH-RSA-DES-CBC3-SHA:AES128-GCM-SHA256:AES256-GCM-SHA384:AES128-SHA256:AES256-SHA256:AES128-SHA:AES256-SHA:DES-CBC3-SHA:!DSS'</span>;</span><br><span class=\"line\">    ssl_prefer_server_ciphers on;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\"># HSTS (ngx_http_headers_module is required) (15768000 seconds = 6 months)</span></span><br><span class=\"line\">    add_header Strict-Transport-Security max-age=15768000;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\"># OCSP Stapling ---</span></span><br><span class=\"line\">    <span class=\"comment\"># fetch OCSP records from URL in ssl_certificate and cache them</span></span><br><span class=\"line\">    ssl_stapling on;</span><br><span class=\"line\">    ssl_stapling_verify on;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">## verify chain of trust of OCSP response using Root CA and Intermediate certs</span></span><br><span class=\"line\">    <span class=\"comment\"># ssl_trusted_certificate /etc/letsencrypt/live/walfud.com/root_ca_cert_plus_intermediates;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\"># resolver 8.8.8.8 8.8.4.4 valid=300s;</span></span><br><span class=\"line\">    <span class=\"comment\"># resolver_timeout 5s;</span></span><br><span class=\"line\">    <span class=\"comment\"># pass the PHP scripts to FastCGI server listening on 127.0.0.1:9000</span></span><br><span class=\"line\">    <span class=\"comment\">#</span></span><br><span class=\"line\">    location ~ \\.php$ &#123;</span><br><span class=\"line\">        include snippets/fastcgi-php.conf;</span><br><span class=\"line\">        <span class=\"comment\"># With php7.0-cgi alone:  </span></span><br><span class=\"line\">        fastcgi_pass 127.0.0.1:9000;</span><br><span class=\"line\">        <span class=\"comment\"># With php7.0-fpm:</span></span><br><span class=\"line\">        <span class=\"comment\"># fastcgi_pass unix:/var/run/php7.0-fpm.sock;</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>重启Nginx</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">service nginx reload</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>自动续签<br> Let’s Encrypt 证书的有效期是 90 天，为了保证证书的有效性，我们需要及时的去续签(renew) 证书。这里我们采用<code>cron</code>来进行定期的续签。<code>letsencrypt renew</code>只会在证书过期的时候才会刷新证书，如果证书没有过期将不会执行任何命令。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">crontab -e</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 每天夜里凌晨 0 点续签:</span></span><br><span class=\"line\">* 0 * * * letsencrypt renew</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 重启 nginx 以使证书生效</span></span><br><span class=\"line\">* 1 * * * service nginx reload</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n"},{"title":"安装和部署AirFlow","date":"2017-01-19T08:44:02.000Z","description":"简单介绍如何安装和部署AirFlow","_content":"\n## 简介\n\nAirFlow 是采用 Python 编写的一个开源工作流调度器，它有一个丰富的UI。\n\n## 安装\n\n### Python\n\n```Shell\naptitude install python\naptitude install python-dev\naptirude install python-pip\naptitude install libmysqlclient-dev\n```\n\n### AirFlow\n\n```shell\npip install airflow\n```\n\n### Supervisor\n\n```shell\naptitude install supervisor\n```\n\n## 配置\n\n### AirFlow\n\n#### 初始化\n\n```shell\nairflow initdb\n```\n\n#### 添加用户登录\n\n安装相应模块\n\n```\npip install \"airflow[password]\"\n```\n\n添加配置\n\n```\nvim airflow.cfg\n## 在 [webserver]下 加入\nauthenticate = True\nauth_backend = airflow.contrib.auth.backends.password_auth\n```\n\n进入airflow目录下\n\n```\ncd ~/airflow\npython\n```\n\n运行Python命令\n\n```\nimport airflow\nfrom airflow import models, settings\nfrom airflow.contrib.auth.backends.password_auth import PasswordUser\nuser = PasswordUser(models.User())\nuser.username = 'user_name'\nuser.email = 'email@example.com'\nuser.password = 'password'\nsession = settings.Session()\nsession.add(user)\nsession.commit()\nsession.close()\nexit()\n```\n\n#### Supervisord\n\n加入 webserver 和 scheduler 启动管理\n\n```\nvim /etc/supervisor/conf.d/airflow.conf \n\n## 加入\n[program:airflow_webserver]\ncommand=airflow webserver\nuser=ubuntu\nstderr_logfile=/var/log/airflow/webserver.err.log\nstdout_logfile=/var/log/airflow/webserver.out.log\n[program:airflow_scheduler]\ncommand=airflow scheduler\nuser=ubuntu\nstderr_logfile=/var/log/airflow/scheduler.err.log\nstdout_logfile=/var/log/airflow/scheduler.out.log\n```\n\n## 问题\n\n```\nImportError: No module named pidlockfile\n\n## 解决方案\n\naptitude remove python-lockfile\npip install lockfile\nImportError: cannot import name MySqlOperator\n\n## 解决方案\n\npip install airflow[celery]\n```","source":"_posts/Install-And-Deploy-AirFlow.md","raw":"---\ntitle: 安装和部署AirFlow\ndate: 2017-01-19 16:44:02\ntags:\n- AirFlow\n- Server\n- Supervisord\ncategories: Server\ndescription: 简单介绍如何安装和部署AirFlow\n---\n\n## 简介\n\nAirFlow 是采用 Python 编写的一个开源工作流调度器，它有一个丰富的UI。\n\n## 安装\n\n### Python\n\n```Shell\naptitude install python\naptitude install python-dev\naptirude install python-pip\naptitude install libmysqlclient-dev\n```\n\n### AirFlow\n\n```shell\npip install airflow\n```\n\n### Supervisor\n\n```shell\naptitude install supervisor\n```\n\n## 配置\n\n### AirFlow\n\n#### 初始化\n\n```shell\nairflow initdb\n```\n\n#### 添加用户登录\n\n安装相应模块\n\n```\npip install \"airflow[password]\"\n```\n\n添加配置\n\n```\nvim airflow.cfg\n## 在 [webserver]下 加入\nauthenticate = True\nauth_backend = airflow.contrib.auth.backends.password_auth\n```\n\n进入airflow目录下\n\n```\ncd ~/airflow\npython\n```\n\n运行Python命令\n\n```\nimport airflow\nfrom airflow import models, settings\nfrom airflow.contrib.auth.backends.password_auth import PasswordUser\nuser = PasswordUser(models.User())\nuser.username = 'user_name'\nuser.email = 'email@example.com'\nuser.password = 'password'\nsession = settings.Session()\nsession.add(user)\nsession.commit()\nsession.close()\nexit()\n```\n\n#### Supervisord\n\n加入 webserver 和 scheduler 启动管理\n\n```\nvim /etc/supervisor/conf.d/airflow.conf \n\n## 加入\n[program:airflow_webserver]\ncommand=airflow webserver\nuser=ubuntu\nstderr_logfile=/var/log/airflow/webserver.err.log\nstdout_logfile=/var/log/airflow/webserver.out.log\n[program:airflow_scheduler]\ncommand=airflow scheduler\nuser=ubuntu\nstderr_logfile=/var/log/airflow/scheduler.err.log\nstdout_logfile=/var/log/airflow/scheduler.out.log\n```\n\n## 问题\n\n```\nImportError: No module named pidlockfile\n\n## 解决方案\n\naptitude remove python-lockfile\npip install lockfile\nImportError: cannot import name MySqlOperator\n\n## 解决方案\n\npip install airflow[celery]\n```","slug":"Install-And-Deploy-AirFlow","published":1,"updated":"2018-05-11T03:46:58.791Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjh8jw4v9000a6b8kd0465wjw","content":"<h2 id=\"简介\"><a href=\"#简介\" class=\"headerlink\" title=\"简介\"></a>简介</h2><p>AirFlow 是采用 Python 编写的一个开源工作流调度器，它有一个丰富的UI。</p>\n<h2 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h2><h3 id=\"Python\"><a href=\"#Python\" class=\"headerlink\" title=\"Python\"></a>Python</h3><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">aptitude install python</span><br><span class=\"line\">aptitude install python-dev</span><br><span class=\"line\">aptirude install python-pip</span><br><span class=\"line\">aptitude install libmysqlclient-dev</span><br></pre></td></tr></table></figure>\n<h3 id=\"AirFlow\"><a href=\"#AirFlow\" class=\"headerlink\" title=\"AirFlow\"></a>AirFlow</h3><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pip install airflow</span><br></pre></td></tr></table></figure>\n<h3 id=\"Supervisor\"><a href=\"#Supervisor\" class=\"headerlink\" title=\"Supervisor\"></a>Supervisor</h3><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">aptitude install supervisor</span><br></pre></td></tr></table></figure>\n<h2 id=\"配置\"><a href=\"#配置\" class=\"headerlink\" title=\"配置\"></a>配置</h2><h3 id=\"AirFlow-1\"><a href=\"#AirFlow-1\" class=\"headerlink\" title=\"AirFlow\"></a>AirFlow</h3><h4 id=\"初始化\"><a href=\"#初始化\" class=\"headerlink\" title=\"初始化\"></a>初始化</h4><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">airflow initdb</span><br></pre></td></tr></table></figure>\n<h4 id=\"添加用户登录\"><a href=\"#添加用户登录\" class=\"headerlink\" title=\"添加用户登录\"></a>添加用户登录</h4><p>安装相应模块</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pip install &quot;airflow[password]&quot;</span><br></pre></td></tr></table></figure>\n<p>添加配置</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">vim airflow.cfg</span><br><span class=\"line\">## 在 [webserver]下 加入</span><br><span class=\"line\">authenticate = True</span><br><span class=\"line\">auth_backend = airflow.contrib.auth.backends.password_auth</span><br></pre></td></tr></table></figure>\n<p>进入airflow目录下</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cd ~/airflow</span><br><span class=\"line\">python</span><br></pre></td></tr></table></figure>\n<p>运行Python命令</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import airflow</span><br><span class=\"line\">from airflow import models, settings</span><br><span class=\"line\">from airflow.contrib.auth.backends.password_auth import PasswordUser</span><br><span class=\"line\">user = PasswordUser(models.User())</span><br><span class=\"line\">user.username = &apos;user_name&apos;</span><br><span class=\"line\">user.email = &apos;email@example.com&apos;</span><br><span class=\"line\">user.password = &apos;password&apos;</span><br><span class=\"line\">session = settings.Session()</span><br><span class=\"line\">session.add(user)</span><br><span class=\"line\">session.commit()</span><br><span class=\"line\">session.close()</span><br><span class=\"line\">exit()</span><br></pre></td></tr></table></figure>\n<h4 id=\"Supervisord\"><a href=\"#Supervisord\" class=\"headerlink\" title=\"Supervisord\"></a>Supervisord</h4><p>加入 webserver 和 scheduler 启动管理</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">vim /etc/supervisor/conf.d/airflow.conf </span><br><span class=\"line\"></span><br><span class=\"line\">## 加入</span><br><span class=\"line\">[program:airflow_webserver]</span><br><span class=\"line\">command=airflow webserver</span><br><span class=\"line\">user=ubuntu</span><br><span class=\"line\">stderr_logfile=/var/log/airflow/webserver.err.log</span><br><span class=\"line\">stdout_logfile=/var/log/airflow/webserver.out.log</span><br><span class=\"line\">[program:airflow_scheduler]</span><br><span class=\"line\">command=airflow scheduler</span><br><span class=\"line\">user=ubuntu</span><br><span class=\"line\">stderr_logfile=/var/log/airflow/scheduler.err.log</span><br><span class=\"line\">stdout_logfile=/var/log/airflow/scheduler.out.log</span><br></pre></td></tr></table></figure>\n<h2 id=\"问题\"><a href=\"#问题\" class=\"headerlink\" title=\"问题\"></a>问题</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ImportError: No module named pidlockfile</span><br><span class=\"line\"></span><br><span class=\"line\">## 解决方案</span><br><span class=\"line\"></span><br><span class=\"line\">aptitude remove python-lockfile</span><br><span class=\"line\">pip install lockfile</span><br><span class=\"line\">ImportError: cannot import name MySqlOperator</span><br><span class=\"line\"></span><br><span class=\"line\">## 解决方案</span><br><span class=\"line\"></span><br><span class=\"line\">pip install airflow[celery]</span><br></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"","more":"<h2 id=\"简介\"><a href=\"#简介\" class=\"headerlink\" title=\"简介\"></a>简介</h2><p>AirFlow 是采用 Python 编写的一个开源工作流调度器，它有一个丰富的UI。</p>\n<h2 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h2><h3 id=\"Python\"><a href=\"#Python\" class=\"headerlink\" title=\"Python\"></a>Python</h3><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">aptitude install python</span><br><span class=\"line\">aptitude install python-dev</span><br><span class=\"line\">aptirude install python-pip</span><br><span class=\"line\">aptitude install libmysqlclient-dev</span><br></pre></td></tr></table></figure>\n<h3 id=\"AirFlow\"><a href=\"#AirFlow\" class=\"headerlink\" title=\"AirFlow\"></a>AirFlow</h3><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pip install airflow</span><br></pre></td></tr></table></figure>\n<h3 id=\"Supervisor\"><a href=\"#Supervisor\" class=\"headerlink\" title=\"Supervisor\"></a>Supervisor</h3><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">aptitude install supervisor</span><br></pre></td></tr></table></figure>\n<h2 id=\"配置\"><a href=\"#配置\" class=\"headerlink\" title=\"配置\"></a>配置</h2><h3 id=\"AirFlow-1\"><a href=\"#AirFlow-1\" class=\"headerlink\" title=\"AirFlow\"></a>AirFlow</h3><h4 id=\"初始化\"><a href=\"#初始化\" class=\"headerlink\" title=\"初始化\"></a>初始化</h4><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">airflow initdb</span><br></pre></td></tr></table></figure>\n<h4 id=\"添加用户登录\"><a href=\"#添加用户登录\" class=\"headerlink\" title=\"添加用户登录\"></a>添加用户登录</h4><p>安装相应模块</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pip install &quot;airflow[password]&quot;</span><br></pre></td></tr></table></figure>\n<p>添加配置</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">vim airflow.cfg</span><br><span class=\"line\">## 在 [webserver]下 加入</span><br><span class=\"line\">authenticate = True</span><br><span class=\"line\">auth_backend = airflow.contrib.auth.backends.password_auth</span><br></pre></td></tr></table></figure>\n<p>进入airflow目录下</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cd ~/airflow</span><br><span class=\"line\">python</span><br></pre></td></tr></table></figure>\n<p>运行Python命令</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import airflow</span><br><span class=\"line\">from airflow import models, settings</span><br><span class=\"line\">from airflow.contrib.auth.backends.password_auth import PasswordUser</span><br><span class=\"line\">user = PasswordUser(models.User())</span><br><span class=\"line\">user.username = &apos;user_name&apos;</span><br><span class=\"line\">user.email = &apos;email@example.com&apos;</span><br><span class=\"line\">user.password = &apos;password&apos;</span><br><span class=\"line\">session = settings.Session()</span><br><span class=\"line\">session.add(user)</span><br><span class=\"line\">session.commit()</span><br><span class=\"line\">session.close()</span><br><span class=\"line\">exit()</span><br></pre></td></tr></table></figure>\n<h4 id=\"Supervisord\"><a href=\"#Supervisord\" class=\"headerlink\" title=\"Supervisord\"></a>Supervisord</h4><p>加入 webserver 和 scheduler 启动管理</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">vim /etc/supervisor/conf.d/airflow.conf </span><br><span class=\"line\"></span><br><span class=\"line\">## 加入</span><br><span class=\"line\">[program:airflow_webserver]</span><br><span class=\"line\">command=airflow webserver</span><br><span class=\"line\">user=ubuntu</span><br><span class=\"line\">stderr_logfile=/var/log/airflow/webserver.err.log</span><br><span class=\"line\">stdout_logfile=/var/log/airflow/webserver.out.log</span><br><span class=\"line\">[program:airflow_scheduler]</span><br><span class=\"line\">command=airflow scheduler</span><br><span class=\"line\">user=ubuntu</span><br><span class=\"line\">stderr_logfile=/var/log/airflow/scheduler.err.log</span><br><span class=\"line\">stdout_logfile=/var/log/airflow/scheduler.out.log</span><br></pre></td></tr></table></figure>\n<h2 id=\"问题\"><a href=\"#问题\" class=\"headerlink\" title=\"问题\"></a>问题</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ImportError: No module named pidlockfile</span><br><span class=\"line\"></span><br><span class=\"line\">## 解决方案</span><br><span class=\"line\"></span><br><span class=\"line\">aptitude remove python-lockfile</span><br><span class=\"line\">pip install lockfile</span><br><span class=\"line\">ImportError: cannot import name MySqlOperator</span><br><span class=\"line\"></span><br><span class=\"line\">## 解决方案</span><br><span class=\"line\"></span><br><span class=\"line\">pip install airflow[celery]</span><br></pre></td></tr></table></figure>"},{"title":"Ubuntu16.04 安装 MongoDB","date":"2017-04-25T07:03:36.000Z","description":"介绍在 Ubuntu 16.04上安装 MongoDB, 并增加帐号密码密码访问","_content":"\n## 添加软件源\n\n```shell\n$ sudo apt-key adv --keyserver hkp://keyserver.ubuntu.com:80 --recv 0C49F3730359A14518585931BC711F9BA15703C6\n\n\necho \"deb [ arch=amd64,arm64 ] http://repo.mongodb.org/apt/ubuntu \"$(lsb_release -sc)\"/mongodb-org/3.4 multiverse\" | sudo tee /etc/apt/sources.list.d/mongodb-3.4.list\n```\n\n## 安装MongoDB\n\n```Sh\napt-get update\napt-get install mongodb-org -y\n```\n\n## 启动\n\n```shell\nservice mongod start\nservice mongod stop\n```\n\n## 创建帐号密码\n\n```shell\n# 添加配置文件\nvim /ect/mongod.conf\n\nsecurity:  \nauthorization: \"enabled\"\n\n# 重启服务\nservice mongod stop\nservice mongod start\n\n# 进入数据库\nmongo\n> use admin\n> db.createUser({user:\"user_test\",pwd:\"pwd_test\",roles:[\"root\"]}) # 创建账号  \n> db.auth(\"user_test\",\"pwd_test\") # 就可以进入了\n```\n\n","source":"_posts/Install-MongoDB-on-ubuntu16-04.md","raw":"---\ntitle: Ubuntu16.04 安装 MongoDB\ndate: 2017-04-25 15:03:36\ntags:\n - MongoDB\n - Ubuntu\ncategories:\n - Server\ndescription: 介绍在 Ubuntu 16.04上安装 MongoDB, 并增加帐号密码密码访问\n---\n\n## 添加软件源\n\n```shell\n$ sudo apt-key adv --keyserver hkp://keyserver.ubuntu.com:80 --recv 0C49F3730359A14518585931BC711F9BA15703C6\n\n\necho \"deb [ arch=amd64,arm64 ] http://repo.mongodb.org/apt/ubuntu \"$(lsb_release -sc)\"/mongodb-org/3.4 multiverse\" | sudo tee /etc/apt/sources.list.d/mongodb-3.4.list\n```\n\n## 安装MongoDB\n\n```Sh\napt-get update\napt-get install mongodb-org -y\n```\n\n## 启动\n\n```shell\nservice mongod start\nservice mongod stop\n```\n\n## 创建帐号密码\n\n```shell\n# 添加配置文件\nvim /ect/mongod.conf\n\nsecurity:  \nauthorization: \"enabled\"\n\n# 重启服务\nservice mongod stop\nservice mongod start\n\n# 进入数据库\nmongo\n> use admin\n> db.createUser({user:\"user_test\",pwd:\"pwd_test\",roles:[\"root\"]}) # 创建账号  \n> db.auth(\"user_test\",\"pwd_test\") # 就可以进入了\n```\n\n","slug":"Install-MongoDB-on-ubuntu16-04","published":1,"updated":"2018-05-11T03:46:58.791Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjh8jw4vb000b6b8k99qm1bhl","content":"<h2 id=\"添加软件源\"><a href=\"#添加软件源\" class=\"headerlink\" title=\"添加软件源\"></a>添加软件源</h2><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> sudo apt-key adv --keyserver hkp://keyserver.ubuntu.com:80 --recv 0C49F3730359A14518585931BC711F9BA15703C6</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">echo \"deb [ arch=amd64,arm64 ] http://repo.mongodb.org/apt/ubuntu \"$(lsb_release -sc)\"/mongodb-org/3.4 multiverse\" | sudo tee /etc/apt/sources.list.d/mongodb-3.4.list</span><br></pre></td></tr></table></figure>\n<h2 id=\"安装MongoDB\"><a href=\"#安装MongoDB\" class=\"headerlink\" title=\"安装MongoDB\"></a>安装MongoDB</h2><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">apt-get update</span><br><span class=\"line\">apt-get install mongodb-org -y</span><br></pre></td></tr></table></figure>\n<h2 id=\"启动\"><a href=\"#启动\" class=\"headerlink\" title=\"启动\"></a>启动</h2><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">service mongod start</span><br><span class=\"line\">service mongod stop</span><br></pre></td></tr></table></figure>\n<h2 id=\"创建帐号密码\"><a href=\"#创建帐号密码\" class=\"headerlink\" title=\"创建帐号密码\"></a>创建帐号密码</h2><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 添加配置文件</span></span><br><span class=\"line\">vim /ect/mongod.conf</span><br><span class=\"line\"></span><br><span class=\"line\">security:  </span><br><span class=\"line\">authorization: \"enabled\"</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 重启服务</span></span><br><span class=\"line\">service mongod stop</span><br><span class=\"line\">service mongod start</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 进入数据库</span></span><br><span class=\"line\">mongo</span><br><span class=\"line\"><span class=\"meta\">&gt;</span><span class=\"bash\"> use admin</span></span><br><span class=\"line\"><span class=\"meta\">&gt;</span><span class=\"bash\"> db.createUser(&#123;user:<span class=\"string\">\"user_test\"</span>,<span class=\"built_in\">pwd</span>:<span class=\"string\">\"pwd_test\"</span>,roles:[<span class=\"string\">\"root\"</span>]&#125;) <span class=\"comment\"># 创建账号  </span></span></span><br><span class=\"line\"><span class=\"meta\">&gt;</span><span class=\"bash\"> db.auth(<span class=\"string\">\"user_test\"</span>,<span class=\"string\">\"pwd_test\"</span>) <span class=\"comment\"># 就可以进入了</span></span></span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"添加软件源\"><a href=\"#添加软件源\" class=\"headerlink\" title=\"添加软件源\"></a>添加软件源</h2><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> sudo apt-key adv --keyserver hkp://keyserver.ubuntu.com:80 --recv 0C49F3730359A14518585931BC711F9BA15703C6</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">echo \"deb [ arch=amd64,arm64 ] http://repo.mongodb.org/apt/ubuntu \"$(lsb_release -sc)\"/mongodb-org/3.4 multiverse\" | sudo tee /etc/apt/sources.list.d/mongodb-3.4.list</span><br></pre></td></tr></table></figure>\n<h2 id=\"安装MongoDB\"><a href=\"#安装MongoDB\" class=\"headerlink\" title=\"安装MongoDB\"></a>安装MongoDB</h2><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">apt-get update</span><br><span class=\"line\">apt-get install mongodb-org -y</span><br></pre></td></tr></table></figure>\n<h2 id=\"启动\"><a href=\"#启动\" class=\"headerlink\" title=\"启动\"></a>启动</h2><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">service mongod start</span><br><span class=\"line\">service mongod stop</span><br></pre></td></tr></table></figure>\n<h2 id=\"创建帐号密码\"><a href=\"#创建帐号密码\" class=\"headerlink\" title=\"创建帐号密码\"></a>创建帐号密码</h2><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 添加配置文件</span></span><br><span class=\"line\">vim /ect/mongod.conf</span><br><span class=\"line\"></span><br><span class=\"line\">security:  </span><br><span class=\"line\">authorization: \"enabled\"</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 重启服务</span></span><br><span class=\"line\">service mongod stop</span><br><span class=\"line\">service mongod start</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 进入数据库</span></span><br><span class=\"line\">mongo</span><br><span class=\"line\"><span class=\"meta\">&gt;</span><span class=\"bash\"> use admin</span></span><br><span class=\"line\"><span class=\"meta\">&gt;</span><span class=\"bash\"> db.createUser(&#123;user:<span class=\"string\">\"user_test\"</span>,<span class=\"built_in\">pwd</span>:<span class=\"string\">\"pwd_test\"</span>,roles:[<span class=\"string\">\"root\"</span>]&#125;) <span class=\"comment\"># 创建账号  </span></span></span><br><span class=\"line\"><span class=\"meta\">&gt;</span><span class=\"bash\"> db.auth(<span class=\"string\">\"user_test\"</span>,<span class=\"string\">\"pwd_test\"</span>) <span class=\"comment\"># 就可以进入了</span></span></span><br></pre></td></tr></table></figure>\n"},{"title":"Ubuntu16.04 安装Nginx、PHP7、MySQL5.7","date":"2016-09-30T04:04:51.000Z","description":"如何在Ubuntu16.04上采用PPA的形式安装Nginx、PHP7、MySQL5.7","_content":"\n## 前置工作\n安装前先添加相应的 [PPA](/2016-09-30/Software-PPA-Sources.html \"常用的软件 PPA 源\") 源。\n## 安装\n### Nginx\n```bash\naptitude install nginx -y\n```\n### MySQL\n```bash\naptitude install mysql-server-5.7 -y\n```\n### PHP7.0\n```bash\naptitude install php7.0 php7.0-mysql php7.0-mcrypt php7.0-mbstring php7.0-fpm php7.0-cli php7.0-xml php7.0-zip -y\naptitude install composer\n```\n\n## 配置\n### PHP\n```bash\n### vim /etc/php/7.0/fpm/pool.d/www.conf\n### 修改 Unix socket To TCP socket\nlisten = 127.0.0.1:9000\n```\n### Nginx\n```bash\n### vim /etc/nginx/sites-available/default\n\nroot /var/www/html;\n# Add index.php to the list if you are using PHP\nindex index.php index.html index.htm;\nserver_name _;\nlocation ~ \\.php$ {\n        include snippets/fastcgi-php.conf;\n        # With php7.0-cgi alone:\n        fastcgi_pass 127.0.0.1:9000;\n        # With php7.0-fpm:\n        # fastcgi_pass unix:/var/run/php7.0-fpm.sock;\n}\n```\n\n## 其他\n### 相关命令\n```bash\nservice php7.0-fpm {start|stop|status|restart|reload|force-reload}\nservice mysql {start|stop|restart|reload|force-reload|status}\nservice nginx {start|stop|restart|reload|force-reload|status|configtest}\n```","source":"_posts/Install-Nginx-PHP7-MySQL-on-Ubuntu16-04.md","raw":"---\ntitle: Ubuntu16.04 安装Nginx、PHP7、MySQL5.7\ndate: 2016-09-30 12:04:51\ntags:\n  - Server\n  - Ubuntu\n  -  Nginx\ncategories:\n  - Server\ndescription:  如何在Ubuntu16.04上采用PPA的形式安装Nginx、PHP7、MySQL5.7\n---\n\n## 前置工作\n安装前先添加相应的 [PPA](/2016-09-30/Software-PPA-Sources.html \"常用的软件 PPA 源\") 源。\n## 安装\n### Nginx\n```bash\naptitude install nginx -y\n```\n### MySQL\n```bash\naptitude install mysql-server-5.7 -y\n```\n### PHP7.0\n```bash\naptitude install php7.0 php7.0-mysql php7.0-mcrypt php7.0-mbstring php7.0-fpm php7.0-cli php7.0-xml php7.0-zip -y\naptitude install composer\n```\n\n## 配置\n### PHP\n```bash\n### vim /etc/php/7.0/fpm/pool.d/www.conf\n### 修改 Unix socket To TCP socket\nlisten = 127.0.0.1:9000\n```\n### Nginx\n```bash\n### vim /etc/nginx/sites-available/default\n\nroot /var/www/html;\n# Add index.php to the list if you are using PHP\nindex index.php index.html index.htm;\nserver_name _;\nlocation ~ \\.php$ {\n        include snippets/fastcgi-php.conf;\n        # With php7.0-cgi alone:\n        fastcgi_pass 127.0.0.1:9000;\n        # With php7.0-fpm:\n        # fastcgi_pass unix:/var/run/php7.0-fpm.sock;\n}\n```\n\n## 其他\n### 相关命令\n```bash\nservice php7.0-fpm {start|stop|status|restart|reload|force-reload}\nservice mysql {start|stop|restart|reload|force-reload|status}\nservice nginx {start|stop|restart|reload|force-reload|status|configtest}\n```","slug":"Install-Nginx-PHP7-MySQL-on-Ubuntu16-04","published":1,"updated":"2018-05-11T03:46:58.792Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjh8jw4ve000f6b8kzn0i690j","content":"<h2 id=\"前置工作\"><a href=\"#前置工作\" class=\"headerlink\" title=\"前置工作\"></a>前置工作</h2><p>安装前先添加相应的 <a href=\"/2016-09-30/Software-PPA-Sources.html\" title=\"常用的软件 PPA 源\">PPA</a> 源。</p>\n<h2 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h2><h3 id=\"Nginx\"><a href=\"#Nginx\" class=\"headerlink\" title=\"Nginx\"></a>Nginx</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">aptitude install nginx -y</span><br></pre></td></tr></table></figure>\n<h3 id=\"MySQL\"><a href=\"#MySQL\" class=\"headerlink\" title=\"MySQL\"></a>MySQL</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">aptitude install mysql-server-5.7 -y</span><br></pre></td></tr></table></figure>\n<h3 id=\"PHP7-0\"><a href=\"#PHP7-0\" class=\"headerlink\" title=\"PHP7.0\"></a>PHP7.0</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">aptitude install php7.0 php7.0-mysql php7.0-mcrypt php7.0-mbstring php7.0-fpm php7.0-cli php7.0-xml php7.0-zip -y</span><br><span class=\"line\">aptitude install composer</span><br></pre></td></tr></table></figure>\n<h2 id=\"配置\"><a href=\"#配置\" class=\"headerlink\" title=\"配置\"></a>配置</h2><h3 id=\"PHP\"><a href=\"#PHP\" class=\"headerlink\" title=\"PHP\"></a>PHP</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">### vim /etc/php/7.0/fpm/pool.d/www.conf</span></span><br><span class=\"line\"><span class=\"comment\">### 修改 Unix socket To TCP socket</span></span><br><span class=\"line\">listen = 127.0.0.1:9000</span><br></pre></td></tr></table></figure>\n<h3 id=\"Nginx-1\"><a href=\"#Nginx-1\" class=\"headerlink\" title=\"Nginx\"></a>Nginx</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">### vim /etc/nginx/sites-available/default</span></span><br><span class=\"line\"></span><br><span class=\"line\">root /var/www/html;</span><br><span class=\"line\"><span class=\"comment\"># Add index.php to the list if you are using PHP</span></span><br><span class=\"line\">index index.php index.html index.htm;</span><br><span class=\"line\">server_name _;</span><br><span class=\"line\">location ~ \\.php$ &#123;</span><br><span class=\"line\">        include snippets/fastcgi-php.conf;</span><br><span class=\"line\">        <span class=\"comment\"># With php7.0-cgi alone:</span></span><br><span class=\"line\">        fastcgi_pass 127.0.0.1:9000;</span><br><span class=\"line\">        <span class=\"comment\"># With php7.0-fpm:</span></span><br><span class=\"line\">        <span class=\"comment\"># fastcgi_pass unix:/var/run/php7.0-fpm.sock;</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"其他\"><a href=\"#其他\" class=\"headerlink\" title=\"其他\"></a>其他</h2><h3 id=\"相关命令\"><a href=\"#相关命令\" class=\"headerlink\" title=\"相关命令\"></a>相关命令</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">service php7.0-fpm &#123;start|stop|status|restart|reload|force-reload&#125;</span><br><span class=\"line\">service mysql &#123;start|stop|restart|reload|force-reload|status&#125;</span><br><span class=\"line\">service nginx &#123;start|stop|restart|reload|force-reload|status|configtest&#125;</span><br></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"","more":"<h2 id=\"前置工作\"><a href=\"#前置工作\" class=\"headerlink\" title=\"前置工作\"></a>前置工作</h2><p>安装前先添加相应的 <a href=\"/2016-09-30/Software-PPA-Sources.html\" title=\"常用的软件 PPA 源\">PPA</a> 源。</p>\n<h2 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h2><h3 id=\"Nginx\"><a href=\"#Nginx\" class=\"headerlink\" title=\"Nginx\"></a>Nginx</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">aptitude install nginx -y</span><br></pre></td></tr></table></figure>\n<h3 id=\"MySQL\"><a href=\"#MySQL\" class=\"headerlink\" title=\"MySQL\"></a>MySQL</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">aptitude install mysql-server-5.7 -y</span><br></pre></td></tr></table></figure>\n<h3 id=\"PHP7-0\"><a href=\"#PHP7-0\" class=\"headerlink\" title=\"PHP7.0\"></a>PHP7.0</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">aptitude install php7.0 php7.0-mysql php7.0-mcrypt php7.0-mbstring php7.0-fpm php7.0-cli php7.0-xml php7.0-zip -y</span><br><span class=\"line\">aptitude install composer</span><br></pre></td></tr></table></figure>\n<h2 id=\"配置\"><a href=\"#配置\" class=\"headerlink\" title=\"配置\"></a>配置</h2><h3 id=\"PHP\"><a href=\"#PHP\" class=\"headerlink\" title=\"PHP\"></a>PHP</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">### vim /etc/php/7.0/fpm/pool.d/www.conf</span></span><br><span class=\"line\"><span class=\"comment\">### 修改 Unix socket To TCP socket</span></span><br><span class=\"line\">listen = 127.0.0.1:9000</span><br></pre></td></tr></table></figure>\n<h3 id=\"Nginx-1\"><a href=\"#Nginx-1\" class=\"headerlink\" title=\"Nginx\"></a>Nginx</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">### vim /etc/nginx/sites-available/default</span></span><br><span class=\"line\"></span><br><span class=\"line\">root /var/www/html;</span><br><span class=\"line\"><span class=\"comment\"># Add index.php to the list if you are using PHP</span></span><br><span class=\"line\">index index.php index.html index.htm;</span><br><span class=\"line\">server_name _;</span><br><span class=\"line\">location ~ \\.php$ &#123;</span><br><span class=\"line\">        include snippets/fastcgi-php.conf;</span><br><span class=\"line\">        <span class=\"comment\"># With php7.0-cgi alone:</span></span><br><span class=\"line\">        fastcgi_pass 127.0.0.1:9000;</span><br><span class=\"line\">        <span class=\"comment\"># With php7.0-fpm:</span></span><br><span class=\"line\">        <span class=\"comment\"># fastcgi_pass unix:/var/run/php7.0-fpm.sock;</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"其他\"><a href=\"#其他\" class=\"headerlink\" title=\"其他\"></a>其他</h2><h3 id=\"相关命令\"><a href=\"#相关命令\" class=\"headerlink\" title=\"相关命令\"></a>相关命令</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">service php7.0-fpm &#123;start|stop|status|restart|reload|force-reload&#125;</span><br><span class=\"line\">service mysql &#123;start|stop|restart|reload|force-reload|status&#125;</span><br><span class=\"line\">service nginx &#123;start|stop|restart|reload|force-reload|status|configtest&#125;</span><br></pre></td></tr></table></figure>"},{"title":"Linux 常用命令","date":"2016-09-23T11:14:35.000Z","description":["整理了一些自己比较常用的命令，后期将持续更新。"],"_content":"## 前言\n整理了一些自己比较常用的命令，后期将持续更新。\n## 详解\n### 文件命令\n``` bash\n$ ls                 ## 查看目录下的子节点（文件夹和文件）信息  -a:显示隐藏文件  -l:列表显示\n$ pwd                ## 查看当前所在的工作目录的全路径\n$ cd dir             ## 打开目录 - 前一个工作目录 ~ 当前用户目录\n$ rm                 ## 删除文件  -r  删除目录 -f 强制删除文件\n$ cp file1 file2     ## 复制  -r  赋值目录，没有就创建\n$ ln -s file link    ## 创建file的符号连接link\n$ touch file         ## 创建文件\n$ mkdir dir          ## 创建目录\n$ more file          ## 查看file内容\n$ tail -f file       ## 从后10行开始查看file\n$ chmod octal file   ## 更改file权限  777 755\n$ chown              ## 更改文件所有者\n$ Ctrl + W           ## 删除当前行中的字\n$ Ctrl + U           ## 删除整行\n```\n### 进程管理\n```bash\n$ ps            ## 现实当前的活动进程\n$ top           ## 显示所有正在运行的进程\n$ kill pid      ## 杀掉进程 pid\n$ killall proc  ## 杀掉所有名位为 proc 的进程\n$ Ctrl + C      ## 停止当前命令\n$ Ctrl + \\      ## 停止当前命令，当 Ctrl + C 不好用的时候\n$ Ctrl + Z      ## 停止当前命令，并使用 fg 恢复\n$ Ctrl + D      ## 注销当前会话，与 exit 相似\n$ !!            ## 重复上次的命令\n$ fg            ## 将进程转到前台\n$ bg pid        ## 将进程转到前台\n```\n### SSH\n```bash\n$ ssh user@host         ## 以user去登录host   -p 端口 -i key文件 -vvv Debug模式mkdir\n$ ssh-copy-id user@host ## 将密钥添加到host实现无密码登录\n```\n### 系统信息\n```bash\n$ date                   ## 显示当前日期和时间\n$ ntpdate ntp.ubuntu.com ## 与Ubuntu NTP server同步时间\n$ cal                    ## 显示当月日历\n$ uptime                 ## 显示系统从开机到现在所运行的时间\n$ getent passwd          ## 所有用户列表\n$ w                      ## 显示登录的用户\n$ whoami                 ## 查看当前用户名\n$ finger user            ## 显示user相关信息\n$ uname -a               ## 显示内核信息\n$ cat /proc/cpuinfo      ## 显示cpu信息\n$ cat /proc/meminfo      ## 显示内存信息\n$ man command            ## 显示command 的说明手册\n$ df                     ## 显示磁盘占用\n$ du                     ## 显示目录空间占用\n$ free                   ## 显示内存及交换区占用情况\n```\n### 网络\n```bash\n$ ping host                      ## ping host 并输出结果\n$ nmap host                      ## 扫描网络寻找开放的端口\n$ whois domain                   ## 获取 domain 的 whois 信息\n$ dig domain                     ## 获取 domain 的 DNS 信息\n$ dig -x domain                  ## 逆向查询 host\n$ wget file                      ## 下载file\n$ wget -c file                   ## 断点续传\n$ curl -I http://www.q.com       ## 获取HTTP头信息\n```\n### 安装\n```bash\n$ ./configure\n$ make\n$ make install\n```\n### 搜索\n```bash\n$ grep\n$ find\n```\n","source":"_posts/Linux-common-shells.md","raw":"---\ntitle: Linux 常用命令\ndate: 2016-09-23 19:14:35\ntags:\n  - Linux\n  - Shell\ncategories:\n  - Linux\ndescription:\n  - 整理了一些自己比较常用的命令，后期将持续更新。\n---\n## 前言\n整理了一些自己比较常用的命令，后期将持续更新。\n## 详解\n### 文件命令\n``` bash\n$ ls                 ## 查看目录下的子节点（文件夹和文件）信息  -a:显示隐藏文件  -l:列表显示\n$ pwd                ## 查看当前所在的工作目录的全路径\n$ cd dir             ## 打开目录 - 前一个工作目录 ~ 当前用户目录\n$ rm                 ## 删除文件  -r  删除目录 -f 强制删除文件\n$ cp file1 file2     ## 复制  -r  赋值目录，没有就创建\n$ ln -s file link    ## 创建file的符号连接link\n$ touch file         ## 创建文件\n$ mkdir dir          ## 创建目录\n$ more file          ## 查看file内容\n$ tail -f file       ## 从后10行开始查看file\n$ chmod octal file   ## 更改file权限  777 755\n$ chown              ## 更改文件所有者\n$ Ctrl + W           ## 删除当前行中的字\n$ Ctrl + U           ## 删除整行\n```\n### 进程管理\n```bash\n$ ps            ## 现实当前的活动进程\n$ top           ## 显示所有正在运行的进程\n$ kill pid      ## 杀掉进程 pid\n$ killall proc  ## 杀掉所有名位为 proc 的进程\n$ Ctrl + C      ## 停止当前命令\n$ Ctrl + \\      ## 停止当前命令，当 Ctrl + C 不好用的时候\n$ Ctrl + Z      ## 停止当前命令，并使用 fg 恢复\n$ Ctrl + D      ## 注销当前会话，与 exit 相似\n$ !!            ## 重复上次的命令\n$ fg            ## 将进程转到前台\n$ bg pid        ## 将进程转到前台\n```\n### SSH\n```bash\n$ ssh user@host         ## 以user去登录host   -p 端口 -i key文件 -vvv Debug模式mkdir\n$ ssh-copy-id user@host ## 将密钥添加到host实现无密码登录\n```\n### 系统信息\n```bash\n$ date                   ## 显示当前日期和时间\n$ ntpdate ntp.ubuntu.com ## 与Ubuntu NTP server同步时间\n$ cal                    ## 显示当月日历\n$ uptime                 ## 显示系统从开机到现在所运行的时间\n$ getent passwd          ## 所有用户列表\n$ w                      ## 显示登录的用户\n$ whoami                 ## 查看当前用户名\n$ finger user            ## 显示user相关信息\n$ uname -a               ## 显示内核信息\n$ cat /proc/cpuinfo      ## 显示cpu信息\n$ cat /proc/meminfo      ## 显示内存信息\n$ man command            ## 显示command 的说明手册\n$ df                     ## 显示磁盘占用\n$ du                     ## 显示目录空间占用\n$ free                   ## 显示内存及交换区占用情况\n```\n### 网络\n```bash\n$ ping host                      ## ping host 并输出结果\n$ nmap host                      ## 扫描网络寻找开放的端口\n$ whois domain                   ## 获取 domain 的 whois 信息\n$ dig domain                     ## 获取 domain 的 DNS 信息\n$ dig -x domain                  ## 逆向查询 host\n$ wget file                      ## 下载file\n$ wget -c file                   ## 断点续传\n$ curl -I http://www.q.com       ## 获取HTTP头信息\n```\n### 安装\n```bash\n$ ./configure\n$ make\n$ make install\n```\n### 搜索\n```bash\n$ grep\n$ find\n```\n","slug":"Linux-common-shells","published":1,"updated":"2018-05-11T03:46:58.792Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjh8jw4vh000i6b8k8qw3083k","content":"<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>整理了一些自己比较常用的命令，后期将持续更新。</p>\n<h2 id=\"详解\"><a href=\"#详解\" class=\"headerlink\" title=\"详解\"></a>详解</h2><h3 id=\"文件命令\"><a href=\"#文件命令\" class=\"headerlink\" title=\"文件命令\"></a>文件命令</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ ls                 <span class=\"comment\">## 查看目录下的子节点（文件夹和文件）信息  -a:显示隐藏文件  -l:列表显示</span></span><br><span class=\"line\">$ <span class=\"built_in\">pwd</span>                <span class=\"comment\">## 查看当前所在的工作目录的全路径</span></span><br><span class=\"line\">$ <span class=\"built_in\">cd</span> dir             <span class=\"comment\">## 打开目录 - 前一个工作目录 ~ 当前用户目录</span></span><br><span class=\"line\">$ rm                 <span class=\"comment\">## 删除文件  -r  删除目录 -f 强制删除文件</span></span><br><span class=\"line\">$ cp file1 file2     <span class=\"comment\">## 复制  -r  赋值目录，没有就创建</span></span><br><span class=\"line\">$ ln -s file link    <span class=\"comment\">## 创建file的符号连接link</span></span><br><span class=\"line\">$ touch file         <span class=\"comment\">## 创建文件</span></span><br><span class=\"line\">$ mkdir dir          <span class=\"comment\">## 创建目录</span></span><br><span class=\"line\">$ more file          <span class=\"comment\">## 查看file内容</span></span><br><span class=\"line\">$ tail -f file       <span class=\"comment\">## 从后10行开始查看file</span></span><br><span class=\"line\">$ chmod octal file   <span class=\"comment\">## 更改file权限  777 755</span></span><br><span class=\"line\">$ chown              <span class=\"comment\">## 更改文件所有者</span></span><br><span class=\"line\">$ Ctrl + W           <span class=\"comment\">## 删除当前行中的字</span></span><br><span class=\"line\">$ Ctrl + U           <span class=\"comment\">## 删除整行</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"进程管理\"><a href=\"#进程管理\" class=\"headerlink\" title=\"进程管理\"></a>进程管理</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ ps            <span class=\"comment\">## 现实当前的活动进程</span></span><br><span class=\"line\">$ top           <span class=\"comment\">## 显示所有正在运行的进程</span></span><br><span class=\"line\">$ <span class=\"built_in\">kill</span> pid      <span class=\"comment\">## 杀掉进程 pid</span></span><br><span class=\"line\">$ killall proc  <span class=\"comment\">## 杀掉所有名位为 proc 的进程</span></span><br><span class=\"line\">$ Ctrl + C      <span class=\"comment\">## 停止当前命令</span></span><br><span class=\"line\">$ Ctrl + \\      <span class=\"comment\">## 停止当前命令，当 Ctrl + C 不好用的时候</span></span><br><span class=\"line\">$ Ctrl + Z      <span class=\"comment\">## 停止当前命令，并使用 fg 恢复</span></span><br><span class=\"line\">$ Ctrl + D      <span class=\"comment\">## 注销当前会话，与 exit 相似</span></span><br><span class=\"line\">$ !!            <span class=\"comment\">## 重复上次的命令</span></span><br><span class=\"line\">$ <span class=\"built_in\">fg</span>            <span class=\"comment\">## 将进程转到前台</span></span><br><span class=\"line\">$ <span class=\"built_in\">bg</span> pid        <span class=\"comment\">## 将进程转到前台</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"SSH\"><a href=\"#SSH\" class=\"headerlink\" title=\"SSH\"></a>SSH</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ ssh user@host         <span class=\"comment\">## 以user去登录host   -p 端口 -i key文件 -vvv Debug模式mkdir</span></span><br><span class=\"line\">$ ssh-copy-id user@host <span class=\"comment\">## 将密钥添加到host实现无密码登录</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"系统信息\"><a href=\"#系统信息\" class=\"headerlink\" title=\"系统信息\"></a>系统信息</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ date                   <span class=\"comment\">## 显示当前日期和时间</span></span><br><span class=\"line\">$ ntpdate ntp.ubuntu.com <span class=\"comment\">## 与Ubuntu NTP server同步时间</span></span><br><span class=\"line\">$ cal                    <span class=\"comment\">## 显示当月日历</span></span><br><span class=\"line\">$ uptime                 <span class=\"comment\">## 显示系统从开机到现在所运行的时间</span></span><br><span class=\"line\">$ getent passwd          <span class=\"comment\">## 所有用户列表</span></span><br><span class=\"line\">$ w                      <span class=\"comment\">## 显示登录的用户</span></span><br><span class=\"line\">$ whoami                 <span class=\"comment\">## 查看当前用户名</span></span><br><span class=\"line\">$ finger user            <span class=\"comment\">## 显示user相关信息</span></span><br><span class=\"line\">$ uname -a               <span class=\"comment\">## 显示内核信息</span></span><br><span class=\"line\">$ cat /proc/cpuinfo      <span class=\"comment\">## 显示cpu信息</span></span><br><span class=\"line\">$ cat /proc/meminfo      <span class=\"comment\">## 显示内存信息</span></span><br><span class=\"line\">$ man <span class=\"built_in\">command</span>            <span class=\"comment\">## 显示command 的说明手册</span></span><br><span class=\"line\">$ df                     <span class=\"comment\">## 显示磁盘占用</span></span><br><span class=\"line\">$ du                     <span class=\"comment\">## 显示目录空间占用</span></span><br><span class=\"line\">$ free                   <span class=\"comment\">## 显示内存及交换区占用情况</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"网络\"><a href=\"#网络\" class=\"headerlink\" title=\"网络\"></a>网络</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ ping host                      <span class=\"comment\">## ping host 并输出结果</span></span><br><span class=\"line\">$ nmap host                      <span class=\"comment\">## 扫描网络寻找开放的端口</span></span><br><span class=\"line\">$ whois domain                   <span class=\"comment\">## 获取 domain 的 whois 信息</span></span><br><span class=\"line\">$ dig domain                     <span class=\"comment\">## 获取 domain 的 DNS 信息</span></span><br><span class=\"line\">$ dig -x domain                  <span class=\"comment\">## 逆向查询 host</span></span><br><span class=\"line\">$ wget file                      <span class=\"comment\">## 下载file</span></span><br><span class=\"line\">$ wget -c file                   <span class=\"comment\">## 断点续传</span></span><br><span class=\"line\">$ curl -I http://www.q.com       <span class=\"comment\">## 获取HTTP头信息</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ ./configure</span><br><span class=\"line\">$ make</span><br><span class=\"line\">$ make install</span><br></pre></td></tr></table></figure>\n<h3 id=\"搜索\"><a href=\"#搜索\" class=\"headerlink\" title=\"搜索\"></a>搜索</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ grep</span><br><span class=\"line\">$ find</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>整理了一些自己比较常用的命令，后期将持续更新。</p>\n<h2 id=\"详解\"><a href=\"#详解\" class=\"headerlink\" title=\"详解\"></a>详解</h2><h3 id=\"文件命令\"><a href=\"#文件命令\" class=\"headerlink\" title=\"文件命令\"></a>文件命令</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ ls                 <span class=\"comment\">## 查看目录下的子节点（文件夹和文件）信息  -a:显示隐藏文件  -l:列表显示</span></span><br><span class=\"line\">$ <span class=\"built_in\">pwd</span>                <span class=\"comment\">## 查看当前所在的工作目录的全路径</span></span><br><span class=\"line\">$ <span class=\"built_in\">cd</span> dir             <span class=\"comment\">## 打开目录 - 前一个工作目录 ~ 当前用户目录</span></span><br><span class=\"line\">$ rm                 <span class=\"comment\">## 删除文件  -r  删除目录 -f 强制删除文件</span></span><br><span class=\"line\">$ cp file1 file2     <span class=\"comment\">## 复制  -r  赋值目录，没有就创建</span></span><br><span class=\"line\">$ ln -s file link    <span class=\"comment\">## 创建file的符号连接link</span></span><br><span class=\"line\">$ touch file         <span class=\"comment\">## 创建文件</span></span><br><span class=\"line\">$ mkdir dir          <span class=\"comment\">## 创建目录</span></span><br><span class=\"line\">$ more file          <span class=\"comment\">## 查看file内容</span></span><br><span class=\"line\">$ tail -f file       <span class=\"comment\">## 从后10行开始查看file</span></span><br><span class=\"line\">$ chmod octal file   <span class=\"comment\">## 更改file权限  777 755</span></span><br><span class=\"line\">$ chown              <span class=\"comment\">## 更改文件所有者</span></span><br><span class=\"line\">$ Ctrl + W           <span class=\"comment\">## 删除当前行中的字</span></span><br><span class=\"line\">$ Ctrl + U           <span class=\"comment\">## 删除整行</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"进程管理\"><a href=\"#进程管理\" class=\"headerlink\" title=\"进程管理\"></a>进程管理</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ ps            <span class=\"comment\">## 现实当前的活动进程</span></span><br><span class=\"line\">$ top           <span class=\"comment\">## 显示所有正在运行的进程</span></span><br><span class=\"line\">$ <span class=\"built_in\">kill</span> pid      <span class=\"comment\">## 杀掉进程 pid</span></span><br><span class=\"line\">$ killall proc  <span class=\"comment\">## 杀掉所有名位为 proc 的进程</span></span><br><span class=\"line\">$ Ctrl + C      <span class=\"comment\">## 停止当前命令</span></span><br><span class=\"line\">$ Ctrl + \\      <span class=\"comment\">## 停止当前命令，当 Ctrl + C 不好用的时候</span></span><br><span class=\"line\">$ Ctrl + Z      <span class=\"comment\">## 停止当前命令，并使用 fg 恢复</span></span><br><span class=\"line\">$ Ctrl + D      <span class=\"comment\">## 注销当前会话，与 exit 相似</span></span><br><span class=\"line\">$ !!            <span class=\"comment\">## 重复上次的命令</span></span><br><span class=\"line\">$ <span class=\"built_in\">fg</span>            <span class=\"comment\">## 将进程转到前台</span></span><br><span class=\"line\">$ <span class=\"built_in\">bg</span> pid        <span class=\"comment\">## 将进程转到前台</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"SSH\"><a href=\"#SSH\" class=\"headerlink\" title=\"SSH\"></a>SSH</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ ssh user@host         <span class=\"comment\">## 以user去登录host   -p 端口 -i key文件 -vvv Debug模式mkdir</span></span><br><span class=\"line\">$ ssh-copy-id user@host <span class=\"comment\">## 将密钥添加到host实现无密码登录</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"系统信息\"><a href=\"#系统信息\" class=\"headerlink\" title=\"系统信息\"></a>系统信息</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ date                   <span class=\"comment\">## 显示当前日期和时间</span></span><br><span class=\"line\">$ ntpdate ntp.ubuntu.com <span class=\"comment\">## 与Ubuntu NTP server同步时间</span></span><br><span class=\"line\">$ cal                    <span class=\"comment\">## 显示当月日历</span></span><br><span class=\"line\">$ uptime                 <span class=\"comment\">## 显示系统从开机到现在所运行的时间</span></span><br><span class=\"line\">$ getent passwd          <span class=\"comment\">## 所有用户列表</span></span><br><span class=\"line\">$ w                      <span class=\"comment\">## 显示登录的用户</span></span><br><span class=\"line\">$ whoami                 <span class=\"comment\">## 查看当前用户名</span></span><br><span class=\"line\">$ finger user            <span class=\"comment\">## 显示user相关信息</span></span><br><span class=\"line\">$ uname -a               <span class=\"comment\">## 显示内核信息</span></span><br><span class=\"line\">$ cat /proc/cpuinfo      <span class=\"comment\">## 显示cpu信息</span></span><br><span class=\"line\">$ cat /proc/meminfo      <span class=\"comment\">## 显示内存信息</span></span><br><span class=\"line\">$ man <span class=\"built_in\">command</span>            <span class=\"comment\">## 显示command 的说明手册</span></span><br><span class=\"line\">$ df                     <span class=\"comment\">## 显示磁盘占用</span></span><br><span class=\"line\">$ du                     <span class=\"comment\">## 显示目录空间占用</span></span><br><span class=\"line\">$ free                   <span class=\"comment\">## 显示内存及交换区占用情况</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"网络\"><a href=\"#网络\" class=\"headerlink\" title=\"网络\"></a>网络</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ ping host                      <span class=\"comment\">## ping host 并输出结果</span></span><br><span class=\"line\">$ nmap host                      <span class=\"comment\">## 扫描网络寻找开放的端口</span></span><br><span class=\"line\">$ whois domain                   <span class=\"comment\">## 获取 domain 的 whois 信息</span></span><br><span class=\"line\">$ dig domain                     <span class=\"comment\">## 获取 domain 的 DNS 信息</span></span><br><span class=\"line\">$ dig -x domain                  <span class=\"comment\">## 逆向查询 host</span></span><br><span class=\"line\">$ wget file                      <span class=\"comment\">## 下载file</span></span><br><span class=\"line\">$ wget -c file                   <span class=\"comment\">## 断点续传</span></span><br><span class=\"line\">$ curl -I http://www.q.com       <span class=\"comment\">## 获取HTTP头信息</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ ./configure</span><br><span class=\"line\">$ make</span><br><span class=\"line\">$ make install</span><br></pre></td></tr></table></figure>\n<h3 id=\"搜索\"><a href=\"#搜索\" class=\"headerlink\" title=\"搜索\"></a>搜索</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ grep</span><br><span class=\"line\">$ find</span><br></pre></td></tr></table></figure>\n"},{"title":"Mac OS 基础软件","date":"2016-12-26T08:39:02.000Z","description":"主要介绍在 Mac OS 下使用的基本的软件。","_content":"\n## 简介\n\n主要介绍在 Mac OS 下使用的基本的软件。\n\n## 软件\n\n### Command Line Tool\n\n```\nxcode-select --install\n```\n\n### Homebrew\n\n[Homebrew](http://brew.sh/,)\n\n```\n/usr/bin/ruby -e \"$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)\"\n```\n\n### Oh My Zsh\n\n[Oh My Zsh](https://github.com/robbyrussell/oh-my-zsh)\n\n```\nbrew install zsh\n\nsh -c \"$(curl -fsSL https://raw.githubusercontent.com/robbyrussell/oh-my-zsh/master/tools/install.sh)\"\n```\n\n### Prezto\n\n[Prezto](https://github.com/sorin-ionescu/prezto)\n\n```\n# Launch Zsh:\nzsh\n\n#Clone the repository:\ngit clone --recursive https://github.com/sorin-ionescu/prezto.git \"${ZDOTDIR:-$HOME}/.zprezto\"\n\n#Create a new Zsh configuration by copying the Zsh configuration files provided:\nsetopt EXTENDED_GLOB\nfor rcfile in \"${ZDOTDIR:-$HOME}\"/.zprezto/runcoms/^README.md(.N); do\n  ln -s \"$rcfile\" \"${ZDOTDIR:-$HOME}/.${rcfile:t}\"\ndone\n\n# Set Zsh as your default shell:\nchsh -s /bin/zsh\n```\n\n### Brew Cask\n\n[Homebrew Cask](https://caskroom.github.io/)\n\n```\nbrew tap phinze/cask\nbrew install brew-cask\n```\n\n### TotalTerminal\n\n```\nbrew cask install totalterminal\n```\n\n### LaunchRocket\n\n```\nbrew cask install launchrocket\n```\n\n### shadowssocks\n\n```\nhttps://github.com/shadowsocks/shadowsocks-iOS/releases\n```\n\n### alfred 3\n\n```\nbrew cask install alfred\n```\n\n### moom\n\n```\nbrew cask install moom\n```","source":"_posts/Mac-OSX-Basic-SoftWare.md","raw":"---\ntitle: Mac OS 基础软件\ndate: 2016-12-26 16:39:02\ntags:\n  - Software\n  - OSX\ncategories: Software\ndescription: 主要介绍在 Mac OS 下使用的基本的软件。\n---\n\n## 简介\n\n主要介绍在 Mac OS 下使用的基本的软件。\n\n## 软件\n\n### Command Line Tool\n\n```\nxcode-select --install\n```\n\n### Homebrew\n\n[Homebrew](http://brew.sh/,)\n\n```\n/usr/bin/ruby -e \"$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)\"\n```\n\n### Oh My Zsh\n\n[Oh My Zsh](https://github.com/robbyrussell/oh-my-zsh)\n\n```\nbrew install zsh\n\nsh -c \"$(curl -fsSL https://raw.githubusercontent.com/robbyrussell/oh-my-zsh/master/tools/install.sh)\"\n```\n\n### Prezto\n\n[Prezto](https://github.com/sorin-ionescu/prezto)\n\n```\n# Launch Zsh:\nzsh\n\n#Clone the repository:\ngit clone --recursive https://github.com/sorin-ionescu/prezto.git \"${ZDOTDIR:-$HOME}/.zprezto\"\n\n#Create a new Zsh configuration by copying the Zsh configuration files provided:\nsetopt EXTENDED_GLOB\nfor rcfile in \"${ZDOTDIR:-$HOME}\"/.zprezto/runcoms/^README.md(.N); do\n  ln -s \"$rcfile\" \"${ZDOTDIR:-$HOME}/.${rcfile:t}\"\ndone\n\n# Set Zsh as your default shell:\nchsh -s /bin/zsh\n```\n\n### Brew Cask\n\n[Homebrew Cask](https://caskroom.github.io/)\n\n```\nbrew tap phinze/cask\nbrew install brew-cask\n```\n\n### TotalTerminal\n\n```\nbrew cask install totalterminal\n```\n\n### LaunchRocket\n\n```\nbrew cask install launchrocket\n```\n\n### shadowssocks\n\n```\nhttps://github.com/shadowsocks/shadowsocks-iOS/releases\n```\n\n### alfred 3\n\n```\nbrew cask install alfred\n```\n\n### moom\n\n```\nbrew cask install moom\n```","slug":"Mac-OSX-Basic-SoftWare","published":1,"updated":"2018-05-11T03:46:58.793Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjh8jw4vj000n6b8ku7sb35gm","content":"<h2 id=\"简介\"><a href=\"#简介\" class=\"headerlink\" title=\"简介\"></a>简介</h2><p>主要介绍在 Mac OS 下使用的基本的软件。</p>\n<h2 id=\"软件\"><a href=\"#软件\" class=\"headerlink\" title=\"软件\"></a>软件</h2><h3 id=\"Command-Line-Tool\"><a href=\"#Command-Line-Tool\" class=\"headerlink\" title=\"Command Line Tool\"></a>Command Line Tool</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">xcode-select --install</span><br></pre></td></tr></table></figure>\n<h3 id=\"Homebrew\"><a href=\"#Homebrew\" class=\"headerlink\" title=\"Homebrew\"></a>Homebrew</h3><p><a href=\"http://brew.sh/,\" target=\"_blank\" rel=\"noopener\">Homebrew</a></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/usr/bin/ruby -e &quot;$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)&quot;</span><br></pre></td></tr></table></figure>\n<h3 id=\"Oh-My-Zsh\"><a href=\"#Oh-My-Zsh\" class=\"headerlink\" title=\"Oh My Zsh\"></a>Oh My Zsh</h3><p><a href=\"https://github.com/robbyrussell/oh-my-zsh\" target=\"_blank\" rel=\"noopener\">Oh My Zsh</a></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">brew install zsh</span><br><span class=\"line\"></span><br><span class=\"line\">sh -c &quot;$(curl -fsSL https://raw.githubusercontent.com/robbyrussell/oh-my-zsh/master/tools/install.sh)&quot;</span><br></pre></td></tr></table></figure>\n<h3 id=\"Prezto\"><a href=\"#Prezto\" class=\"headerlink\" title=\"Prezto\"></a>Prezto</h3><p><a href=\"https://github.com/sorin-ionescu/prezto\" target=\"_blank\" rel=\"noopener\">Prezto</a></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># Launch Zsh:</span><br><span class=\"line\">zsh</span><br><span class=\"line\"></span><br><span class=\"line\">#Clone the repository:</span><br><span class=\"line\">git clone --recursive https://github.com/sorin-ionescu/prezto.git &quot;$&#123;ZDOTDIR:-$HOME&#125;/.zprezto&quot;</span><br><span class=\"line\"></span><br><span class=\"line\">#Create a new Zsh configuration by copying the Zsh configuration files provided:</span><br><span class=\"line\">setopt EXTENDED_GLOB</span><br><span class=\"line\">for rcfile in &quot;$&#123;ZDOTDIR:-$HOME&#125;&quot;/.zprezto/runcoms/^README.md(.N); do</span><br><span class=\"line\">  ln -s &quot;$rcfile&quot; &quot;$&#123;ZDOTDIR:-$HOME&#125;/.$&#123;rcfile:t&#125;&quot;</span><br><span class=\"line\">done</span><br><span class=\"line\"></span><br><span class=\"line\"># Set Zsh as your default shell:</span><br><span class=\"line\">chsh -s /bin/zsh</span><br></pre></td></tr></table></figure>\n<h3 id=\"Brew-Cask\"><a href=\"#Brew-Cask\" class=\"headerlink\" title=\"Brew Cask\"></a>Brew Cask</h3><p><a href=\"https://caskroom.github.io/\" target=\"_blank\" rel=\"noopener\">Homebrew Cask</a></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">brew tap phinze/cask</span><br><span class=\"line\">brew install brew-cask</span><br></pre></td></tr></table></figure>\n<h3 id=\"TotalTerminal\"><a href=\"#TotalTerminal\" class=\"headerlink\" title=\"TotalTerminal\"></a>TotalTerminal</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">brew cask install totalterminal</span><br></pre></td></tr></table></figure>\n<h3 id=\"LaunchRocket\"><a href=\"#LaunchRocket\" class=\"headerlink\" title=\"LaunchRocket\"></a>LaunchRocket</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">brew cask install launchrocket</span><br></pre></td></tr></table></figure>\n<h3 id=\"shadowssocks\"><a href=\"#shadowssocks\" class=\"headerlink\" title=\"shadowssocks\"></a>shadowssocks</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">https://github.com/shadowsocks/shadowsocks-iOS/releases</span><br></pre></td></tr></table></figure>\n<h3 id=\"alfred-3\"><a href=\"#alfred-3\" class=\"headerlink\" title=\"alfred 3\"></a>alfred 3</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">brew cask install alfred</span><br></pre></td></tr></table></figure>\n<h3 id=\"moom\"><a href=\"#moom\" class=\"headerlink\" title=\"moom\"></a>moom</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">brew cask install moom</span><br></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"","more":"<h2 id=\"简介\"><a href=\"#简介\" class=\"headerlink\" title=\"简介\"></a>简介</h2><p>主要介绍在 Mac OS 下使用的基本的软件。</p>\n<h2 id=\"软件\"><a href=\"#软件\" class=\"headerlink\" title=\"软件\"></a>软件</h2><h3 id=\"Command-Line-Tool\"><a href=\"#Command-Line-Tool\" class=\"headerlink\" title=\"Command Line Tool\"></a>Command Line Tool</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">xcode-select --install</span><br></pre></td></tr></table></figure>\n<h3 id=\"Homebrew\"><a href=\"#Homebrew\" class=\"headerlink\" title=\"Homebrew\"></a>Homebrew</h3><p><a href=\"http://brew.sh/,\" target=\"_blank\" rel=\"noopener\">Homebrew</a></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/usr/bin/ruby -e &quot;$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)&quot;</span><br></pre></td></tr></table></figure>\n<h3 id=\"Oh-My-Zsh\"><a href=\"#Oh-My-Zsh\" class=\"headerlink\" title=\"Oh My Zsh\"></a>Oh My Zsh</h3><p><a href=\"https://github.com/robbyrussell/oh-my-zsh\" target=\"_blank\" rel=\"noopener\">Oh My Zsh</a></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">brew install zsh</span><br><span class=\"line\"></span><br><span class=\"line\">sh -c &quot;$(curl -fsSL https://raw.githubusercontent.com/robbyrussell/oh-my-zsh/master/tools/install.sh)&quot;</span><br></pre></td></tr></table></figure>\n<h3 id=\"Prezto\"><a href=\"#Prezto\" class=\"headerlink\" title=\"Prezto\"></a>Prezto</h3><p><a href=\"https://github.com/sorin-ionescu/prezto\" target=\"_blank\" rel=\"noopener\">Prezto</a></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># Launch Zsh:</span><br><span class=\"line\">zsh</span><br><span class=\"line\"></span><br><span class=\"line\">#Clone the repository:</span><br><span class=\"line\">git clone --recursive https://github.com/sorin-ionescu/prezto.git &quot;$&#123;ZDOTDIR:-$HOME&#125;/.zprezto&quot;</span><br><span class=\"line\"></span><br><span class=\"line\">#Create a new Zsh configuration by copying the Zsh configuration files provided:</span><br><span class=\"line\">setopt EXTENDED_GLOB</span><br><span class=\"line\">for rcfile in &quot;$&#123;ZDOTDIR:-$HOME&#125;&quot;/.zprezto/runcoms/^README.md(.N); do</span><br><span class=\"line\">  ln -s &quot;$rcfile&quot; &quot;$&#123;ZDOTDIR:-$HOME&#125;/.$&#123;rcfile:t&#125;&quot;</span><br><span class=\"line\">done</span><br><span class=\"line\"></span><br><span class=\"line\"># Set Zsh as your default shell:</span><br><span class=\"line\">chsh -s /bin/zsh</span><br></pre></td></tr></table></figure>\n<h3 id=\"Brew-Cask\"><a href=\"#Brew-Cask\" class=\"headerlink\" title=\"Brew Cask\"></a>Brew Cask</h3><p><a href=\"https://caskroom.github.io/\" target=\"_blank\" rel=\"noopener\">Homebrew Cask</a></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">brew tap phinze/cask</span><br><span class=\"line\">brew install brew-cask</span><br></pre></td></tr></table></figure>\n<h3 id=\"TotalTerminal\"><a href=\"#TotalTerminal\" class=\"headerlink\" title=\"TotalTerminal\"></a>TotalTerminal</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">brew cask install totalterminal</span><br></pre></td></tr></table></figure>\n<h3 id=\"LaunchRocket\"><a href=\"#LaunchRocket\" class=\"headerlink\" title=\"LaunchRocket\"></a>LaunchRocket</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">brew cask install launchrocket</span><br></pre></td></tr></table></figure>\n<h3 id=\"shadowssocks\"><a href=\"#shadowssocks\" class=\"headerlink\" title=\"shadowssocks\"></a>shadowssocks</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">https://github.com/shadowsocks/shadowsocks-iOS/releases</span><br></pre></td></tr></table></figure>\n<h3 id=\"alfred-3\"><a href=\"#alfred-3\" class=\"headerlink\" title=\"alfred 3\"></a>alfred 3</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">brew cask install alfred</span><br></pre></td></tr></table></figure>\n<h3 id=\"moom\"><a href=\"#moom\" class=\"headerlink\" title=\"moom\"></a>moom</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">brew cask install moom</span><br></pre></td></tr></table></figure>"},{"title":"安装 Shadowsocks 服务器端","date":"2016-11-08T02:23:20.000Z","description":"如何在服务器上安装并配置 Shadowsocks 。","_content":"## 前言\n随着国内『墙』的越来越『高』，掌握一门方便、快捷、便宜的『飞檐走壁』技巧成为了刚需。下面我们介绍一款轻量、多平台、安装配置十分简单的开源软件 [Shadowsocks](https://github.com/shadowsocks/shadowsocks \"Shadowsocks\") 。\n\n## 安装\n### 准备工作\n* VPS 一台\n    可以使用 [digitalocean](https://www.digitalocean.com) 的 SFO 机房\n* Python 环境\n\n### 服务器安装\n 1. #### pip 安装法\n     * 安装 pip\n       ```bash\n       apt-get install python-pip\n       ```\n     * 安装 shadowsocks\n          ```bash\n          pip install shadowsocks\n          ```\n          \n### 配置\n  ```bash\n  vim /etc/shadowsocks.json\n  ```\n  加入以下内容\n  ```bash\n  {\n      \"server\": \"my_server_ip\",               # 服务器IP\n      \"server_port\": 8000,                    # 开启端口\n      \"local_address\": \"x.x.x.x\",             # 服务器本地地址\n      \"local_port\": 1080,                     # 服务器本地端口\n      \"password\": \"mypassword\",               # 连接密码\n      \"timeout\": 300,                         # 连接超时时间\n      \"method\": \"rc4-md5\"\n      \"fast_open\": true                       # 是否开启TCP_FASTOPEN，需要系统开启支持\n      \"workers\": 5                            # 进程数\n  }\n  ```\n  \n  ### 系统优化\n  确认系统内核是 3.7.1 以上\n   ```bash\n   uname -r\n   \n   # 4.4.0-45-generic\n   ```\n1. #### 系统文件描述符的最大限数\n   * Shadowsocks 每次启动前\n     ```bash\n     ulimit -SHn 51200\n     ```\n   * 系统启动时生效\n     ```bash\n     vim /etc/security/limits.conf\n     # 添加\n     * soft nofile 51200\n     * hard nofile 51200\n     # 第一列 是用户或者用户组\n     # 第二列 hard: 硬限制，soft: 软件限制，一般来说 soft 要比 hard 小，超过 soft 报警，hard 是底线\n     # 第三列 nofile 打开文件数\n     ```\n     ```bash\n     vim  /etc/pam.d/common-session\n     #添加一行\n     session required pam_limits.so\n     ```\n     ```bash\n     vim /etc/profile\n     # 在文件末尾加入\n     ulimit -SHn 51200\n     ```\n2. ####  调整内核参数\n     ```bash\n     vim /etc/sysctl.conf\n\n     # 添加配置\n\n     fs.file-max = 51200                            # max open files\n\n      net.core.rmem_max = 67108864                  # max read buffer\n      net.core.wmem_max = 67108864                  # max write buffer\n      net.core.netdev_max_backlog = 250000          # max processor input queue\n      net.core.somaxconn = 4096                     # max backlog\n\n      net.ipv4.tcp_syncookies = 1                   # resist SYN flood attacks\n      net.ipv4.tcp_tw_reuse = 1                     # reuse timewait sockets when safe\n      net.ipv4.tcp_tw_recycle = 0                   # turn off fast timewait sockets recycling\n      net.ipv4.tcp_fin_timeout = 30                 # short FIN timeout\n      net.ipv4.tcp_keepalive_time = 1200            # short keepalive time\n      net.ipv4.ip_local_port_range = 10000 65000    # outbound port range\n      net.ipv4.tcp_max_syn_backlog = 8192           # max SYN backlog\n      net.ipv4.tcp_max_tw_buckets = 5000            # max timewait sockets held by system simultaneously\n      net.ipv4.tcp_rmem = 4096 87380 67108864       # TCP receive buffer\n      net.ipv4.tcp_wmem = 4096 65536 67108864       # TCP write buffer\n      net.ipv4.tcp_mtu_probing = 1                  # turn on path MTU discovery\n\n      net.ipv4.tcp_fastopen = 3                     # enable TCP_FASTOPEN \n\n      net.ipv4.tcp_congestion_control = hybla\n\n\n      #使配置生效\n      sysctl -p\n     ```\n   * TCP_FASTOPEN\n     服务端和客户端Linux内核版本必须新于 3.7.1\n     ```bash\n     # 查看是否生效\n     sysctl net.ipv4.tcp_fastopen\n     \n     # net.ipv4.tcp_fastopen = 3\n     ```\n   * TCP拥塞控制算法\n     Linux 中提供了多套TCP拥塞控制算法。\n     1. reno是最基本的拥塞控制算法，也是TCP协议的实验原型。\n     2. bic适用于rtt较高但丢包极为罕见的情况，比如北美和欧洲之间的线路，这是2.6.8到2.6.18之间的Linux内核的默认算法。\n     3. cubic是修改版的bic，适用环境比bic广泛一点，它是2.6.19之后的linux内核的默认算法\n     4. hybla适用于高延时、高丢包率的网络，比如卫星链路——同样适用于中美之间的链路。\n     \n     ```bash\n     # 查看系统支持的算法\n     sysctl net.ipv4.tcp_available_congestion_control\n     \n     # net.ipv4.tcp_available_congestion_control = hybla cubic reno\n     ```\n### 启动\n * 直接启动\n ```bash\n ssserver -p 8000 -k password -m rc4-md5 -d {start | stop}\n ```\n * 配置文件启动\n ```bash\n ssserver -c /etc/shadowsocks.json -d {start | stop}\n ```\n ## 小结\n 采用 digitalocean 的 SFO2 机房 300+ms 延迟的情况下，能够很流畅的查看Youtube的 1080P （湖南电信）","source":"_posts/Install-Shadowsocks-Server.md","raw":"---\ntitle: 安装 Shadowsocks 服务器端\ndate: 2016-11-08 10:23:20\ntags:\n  - Server\n  - Shadowsocks\ncategories:\n  - Server\ndescription: 如何在服务器上安装并配置 Shadowsocks 。\n---\n## 前言\n随着国内『墙』的越来越『高』，掌握一门方便、快捷、便宜的『飞檐走壁』技巧成为了刚需。下面我们介绍一款轻量、多平台、安装配置十分简单的开源软件 [Shadowsocks](https://github.com/shadowsocks/shadowsocks \"Shadowsocks\") 。\n\n## 安装\n### 准备工作\n* VPS 一台\n    可以使用 [digitalocean](https://www.digitalocean.com) 的 SFO 机房\n* Python 环境\n\n### 服务器安装\n 1. #### pip 安装法\n     * 安装 pip\n       ```bash\n       apt-get install python-pip\n       ```\n     * 安装 shadowsocks\n          ```bash\n          pip install shadowsocks\n          ```\n          \n### 配置\n  ```bash\n  vim /etc/shadowsocks.json\n  ```\n  加入以下内容\n  ```bash\n  {\n      \"server\": \"my_server_ip\",               # 服务器IP\n      \"server_port\": 8000,                    # 开启端口\n      \"local_address\": \"x.x.x.x\",             # 服务器本地地址\n      \"local_port\": 1080,                     # 服务器本地端口\n      \"password\": \"mypassword\",               # 连接密码\n      \"timeout\": 300,                         # 连接超时时间\n      \"method\": \"rc4-md5\"\n      \"fast_open\": true                       # 是否开启TCP_FASTOPEN，需要系统开启支持\n      \"workers\": 5                            # 进程数\n  }\n  ```\n  \n  ### 系统优化\n  确认系统内核是 3.7.1 以上\n   ```bash\n   uname -r\n   \n   # 4.4.0-45-generic\n   ```\n1. #### 系统文件描述符的最大限数\n   * Shadowsocks 每次启动前\n     ```bash\n     ulimit -SHn 51200\n     ```\n   * 系统启动时生效\n     ```bash\n     vim /etc/security/limits.conf\n     # 添加\n     * soft nofile 51200\n     * hard nofile 51200\n     # 第一列 是用户或者用户组\n     # 第二列 hard: 硬限制，soft: 软件限制，一般来说 soft 要比 hard 小，超过 soft 报警，hard 是底线\n     # 第三列 nofile 打开文件数\n     ```\n     ```bash\n     vim  /etc/pam.d/common-session\n     #添加一行\n     session required pam_limits.so\n     ```\n     ```bash\n     vim /etc/profile\n     # 在文件末尾加入\n     ulimit -SHn 51200\n     ```\n2. ####  调整内核参数\n     ```bash\n     vim /etc/sysctl.conf\n\n     # 添加配置\n\n     fs.file-max = 51200                            # max open files\n\n      net.core.rmem_max = 67108864                  # max read buffer\n      net.core.wmem_max = 67108864                  # max write buffer\n      net.core.netdev_max_backlog = 250000          # max processor input queue\n      net.core.somaxconn = 4096                     # max backlog\n\n      net.ipv4.tcp_syncookies = 1                   # resist SYN flood attacks\n      net.ipv4.tcp_tw_reuse = 1                     # reuse timewait sockets when safe\n      net.ipv4.tcp_tw_recycle = 0                   # turn off fast timewait sockets recycling\n      net.ipv4.tcp_fin_timeout = 30                 # short FIN timeout\n      net.ipv4.tcp_keepalive_time = 1200            # short keepalive time\n      net.ipv4.ip_local_port_range = 10000 65000    # outbound port range\n      net.ipv4.tcp_max_syn_backlog = 8192           # max SYN backlog\n      net.ipv4.tcp_max_tw_buckets = 5000            # max timewait sockets held by system simultaneously\n      net.ipv4.tcp_rmem = 4096 87380 67108864       # TCP receive buffer\n      net.ipv4.tcp_wmem = 4096 65536 67108864       # TCP write buffer\n      net.ipv4.tcp_mtu_probing = 1                  # turn on path MTU discovery\n\n      net.ipv4.tcp_fastopen = 3                     # enable TCP_FASTOPEN \n\n      net.ipv4.tcp_congestion_control = hybla\n\n\n      #使配置生效\n      sysctl -p\n     ```\n   * TCP_FASTOPEN\n     服务端和客户端Linux内核版本必须新于 3.7.1\n     ```bash\n     # 查看是否生效\n     sysctl net.ipv4.tcp_fastopen\n     \n     # net.ipv4.tcp_fastopen = 3\n     ```\n   * TCP拥塞控制算法\n     Linux 中提供了多套TCP拥塞控制算法。\n     1. reno是最基本的拥塞控制算法，也是TCP协议的实验原型。\n     2. bic适用于rtt较高但丢包极为罕见的情况，比如北美和欧洲之间的线路，这是2.6.8到2.6.18之间的Linux内核的默认算法。\n     3. cubic是修改版的bic，适用环境比bic广泛一点，它是2.6.19之后的linux内核的默认算法\n     4. hybla适用于高延时、高丢包率的网络，比如卫星链路——同样适用于中美之间的链路。\n     \n     ```bash\n     # 查看系统支持的算法\n     sysctl net.ipv4.tcp_available_congestion_control\n     \n     # net.ipv4.tcp_available_congestion_control = hybla cubic reno\n     ```\n### 启动\n * 直接启动\n ```bash\n ssserver -p 8000 -k password -m rc4-md5 -d {start | stop}\n ```\n * 配置文件启动\n ```bash\n ssserver -c /etc/shadowsocks.json -d {start | stop}\n ```\n ## 小结\n 采用 digitalocean 的 SFO2 机房 300+ms 延迟的情况下，能够很流畅的查看Youtube的 1080P （湖南电信）","slug":"Install-Shadowsocks-Server","published":1,"updated":"2018-05-11T03:46:58.792Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjh8jw4vl000p6b8krpnnn5d5","content":"<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>随着国内『墙』的越来越『高』，掌握一门方便、快捷、便宜的『飞檐走壁』技巧成为了刚需。下面我们介绍一款轻量、多平台、安装配置十分简单的开源软件 <a href=\"https://github.com/shadowsocks/shadowsocks\" title=\"Shadowsocks\" target=\"_blank\" rel=\"noopener\">Shadowsocks</a> 。</p>\n<h2 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h2><h3 id=\"准备工作\"><a href=\"#准备工作\" class=\"headerlink\" title=\"准备工作\"></a>准备工作</h3><ul>\n<li>VPS 一台<br>  可以使用 <a href=\"https://www.digitalocean.com\" target=\"_blank\" rel=\"noopener\">digitalocean</a> 的 SFO 机房</li>\n<li>Python 环境</li>\n</ul>\n<h3 id=\"服务器安装\"><a href=\"#服务器安装\" class=\"headerlink\" title=\"服务器安装\"></a>服务器安装</h3><ol>\n<li><h4 id=\"pip-安装法\"><a href=\"#pip-安装法\" class=\"headerlink\" title=\"pip 安装法\"></a>pip 安装法</h4><ul>\n<li><p>安装 pip</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">apt-get install python-pip</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>安装 shadowsocks</p>\n   <figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pip install shadowsocks</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n</li>\n</ol>\n<h3 id=\"配置\"><a href=\"#配置\" class=\"headerlink\" title=\"配置\"></a>配置</h3>  <figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">vim /etc/shadowsocks.json</span><br></pre></td></tr></table></figure>\n<p>  加入以下内容<br>  <figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"string\">\"server\"</span>: <span class=\"string\">\"my_server_ip\"</span>,               <span class=\"comment\"># 服务器IP</span></span><br><span class=\"line\">    <span class=\"string\">\"server_port\"</span>: 8000,                    <span class=\"comment\"># 开启端口</span></span><br><span class=\"line\">    <span class=\"string\">\"local_address\"</span>: <span class=\"string\">\"x.x.x.x\"</span>,             <span class=\"comment\"># 服务器本地地址</span></span><br><span class=\"line\">    <span class=\"string\">\"local_port\"</span>: 1080,                     <span class=\"comment\"># 服务器本地端口</span></span><br><span class=\"line\">    <span class=\"string\">\"password\"</span>: <span class=\"string\">\"mypassword\"</span>,               <span class=\"comment\"># 连接密码</span></span><br><span class=\"line\">    <span class=\"string\">\"timeout\"</span>: 300,                         <span class=\"comment\"># 连接超时时间</span></span><br><span class=\"line\">    <span class=\"string\">\"method\"</span>: <span class=\"string\">\"rc4-md5\"</span></span><br><span class=\"line\">    <span class=\"string\">\"fast_open\"</span>: <span class=\"literal\">true</span>                       <span class=\"comment\"># 是否开启TCP_FASTOPEN，需要系统开启支持</span></span><br><span class=\"line\">    <span class=\"string\">\"workers\"</span>: 5                            <span class=\"comment\"># 进程数</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"系统优化\"><a href=\"#系统优化\" class=\"headerlink\" title=\"系统优化\"></a>系统优化</h3><p>  确认系统内核是 3.7.1 以上<br>   <figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">uname -r</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 4.4.0-45-generic</span></span><br></pre></td></tr></table></figure></p>\n<ol>\n<li><h4 id=\"系统文件描述符的最大限数\"><a href=\"#系统文件描述符的最大限数\" class=\"headerlink\" title=\"系统文件描述符的最大限数\"></a>系统文件描述符的最大限数</h4><ul>\n<li><p>Shadowsocks 每次启动前</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">ulimit</span> -SHn 51200</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>系统启动时生效</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">vim /etc/security/limits.conf</span><br><span class=\"line\"><span class=\"comment\"># 添加</span></span><br><span class=\"line\">* soft nofile 51200</span><br><span class=\"line\">* hard nofile 51200</span><br><span class=\"line\"><span class=\"comment\"># 第一列 是用户或者用户组</span></span><br><span class=\"line\"><span class=\"comment\"># 第二列 hard: 硬限制，soft: 软件限制，一般来说 soft 要比 hard 小，超过 soft 报警，hard 是底线</span></span><br><span class=\"line\"><span class=\"comment\"># 第三列 nofile 打开文件数</span></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">vim  /etc/pam.d/common-session</span><br><span class=\"line\"><span class=\"comment\">#添加一行</span></span><br><span class=\"line\">session required pam_limits.so</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">vim /etc/profile</span><br><span class=\"line\"><span class=\"comment\"># 在文件末尾加入</span></span><br><span class=\"line\"><span class=\"built_in\">ulimit</span> -SHn 51200</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n</li>\n<li><h4 id=\"调整内核参数\"><a href=\"#调整内核参数\" class=\"headerlink\" title=\"调整内核参数\"></a>调整内核参数</h4>  <figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">vim /etc/sysctl.conf</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 添加配置</span></span><br><span class=\"line\"></span><br><span class=\"line\">fs.file-max = 51200                            <span class=\"comment\"># max open files</span></span><br><span class=\"line\"></span><br><span class=\"line\"> net.core.rmem_max = 67108864                  <span class=\"comment\"># max read buffer</span></span><br><span class=\"line\"> net.core.wmem_max = 67108864                  <span class=\"comment\"># max write buffer</span></span><br><span class=\"line\"> net.core.netdev_max_backlog = 250000          <span class=\"comment\"># max processor input queue</span></span><br><span class=\"line\"> net.core.somaxconn = 4096                     <span class=\"comment\"># max backlog</span></span><br><span class=\"line\"></span><br><span class=\"line\"> net.ipv4.tcp_syncookies = 1                   <span class=\"comment\"># resist SYN flood attacks</span></span><br><span class=\"line\"> net.ipv4.tcp_tw_reuse = 1                     <span class=\"comment\"># reuse timewait sockets when safe</span></span><br><span class=\"line\"> net.ipv4.tcp_tw_recycle = 0                   <span class=\"comment\"># turn off fast timewait sockets recycling</span></span><br><span class=\"line\"> net.ipv4.tcp_fin_timeout = 30                 <span class=\"comment\"># short FIN timeout</span></span><br><span class=\"line\"> net.ipv4.tcp_keepalive_time = 1200            <span class=\"comment\"># short keepalive time</span></span><br><span class=\"line\"> net.ipv4.ip_local_port_range = 10000 65000    <span class=\"comment\"># outbound port range</span></span><br><span class=\"line\"> net.ipv4.tcp_max_syn_backlog = 8192           <span class=\"comment\"># max SYN backlog</span></span><br><span class=\"line\"> net.ipv4.tcp_max_tw_buckets = 5000            <span class=\"comment\"># max timewait sockets held by system simultaneously</span></span><br><span class=\"line\"> net.ipv4.tcp_rmem = 4096 87380 67108864       <span class=\"comment\"># TCP receive buffer</span></span><br><span class=\"line\"> net.ipv4.tcp_wmem = 4096 65536 67108864       <span class=\"comment\"># TCP write buffer</span></span><br><span class=\"line\"> net.ipv4.tcp_mtu_probing = 1                  <span class=\"comment\"># turn on path MTU discovery</span></span><br><span class=\"line\"></span><br><span class=\"line\"> net.ipv4.tcp_fastopen = 3                     <span class=\"comment\"># enable TCP_FASTOPEN </span></span><br><span class=\"line\"></span><br><span class=\"line\"> net.ipv4.tcp_congestion_control = hybla</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"> <span class=\"comment\">#使配置生效</span></span><br><span class=\"line\"> sysctl -p</span><br></pre></td></tr></table></figure>\n<ul>\n<li><p>TCP_FASTOPEN<br>服务端和客户端Linux内核版本必须新于 3.7.1</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 查看是否生效</span></span><br><span class=\"line\">sysctl net.ipv4.tcp_fastopen</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># net.ipv4.tcp_fastopen = 3</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>TCP拥塞控制算法<br>Linux 中提供了多套TCP拥塞控制算法。</p>\n<ol>\n<li>reno是最基本的拥塞控制算法，也是TCP协议的实验原型。</li>\n<li>bic适用于rtt较高但丢包极为罕见的情况，比如北美和欧洲之间的线路，这是2.6.8到2.6.18之间的Linux内核的默认算法。</li>\n<li>cubic是修改版的bic，适用环境比bic广泛一点，它是2.6.19之后的linux内核的默认算法</li>\n<li>hybla适用于高延时、高丢包率的网络，比如卫星链路——同样适用于中美之间的链路。</li>\n</ol>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 查看系统支持的算法</span></span><br><span class=\"line\">sysctl net.ipv4.tcp_available_congestion_control</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># net.ipv4.tcp_available_congestion_control = hybla cubic reno</span></span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n</li>\n</ol>\n<h3 id=\"启动\"><a href=\"#启动\" class=\"headerlink\" title=\"启动\"></a>启动</h3><ul>\n<li><p>直接启动</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ssserver -p 8000 -k password -m rc4-md5 -d &#123;start | stop&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>配置文件启动</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ssserver -c /etc/shadowsocks.json -d &#123;start | stop&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"小结\"><a href=\"#小结\" class=\"headerlink\" title=\"小结\"></a>小结</h2><p>采用 digitalocean 的 SFO2 机房 300+ms 延迟的情况下，能够很流畅的查看Youtube的 1080P （湖南电信）</p>\n</li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>随着国内『墙』的越来越『高』，掌握一门方便、快捷、便宜的『飞檐走壁』技巧成为了刚需。下面我们介绍一款轻量、多平台、安装配置十分简单的开源软件 <a href=\"https://github.com/shadowsocks/shadowsocks\" title=\"Shadowsocks\" target=\"_blank\" rel=\"noopener\">Shadowsocks</a> 。</p>\n<h2 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h2><h3 id=\"准备工作\"><a href=\"#准备工作\" class=\"headerlink\" title=\"准备工作\"></a>准备工作</h3><ul>\n<li>VPS 一台<br>  可以使用 <a href=\"https://www.digitalocean.com\" target=\"_blank\" rel=\"noopener\">digitalocean</a> 的 SFO 机房</li>\n<li>Python 环境</li>\n</ul>\n<h3 id=\"服务器安装\"><a href=\"#服务器安装\" class=\"headerlink\" title=\"服务器安装\"></a>服务器安装</h3><ol>\n<li><h4 id=\"pip-安装法\"><a href=\"#pip-安装法\" class=\"headerlink\" title=\"pip 安装法\"></a>pip 安装法</h4><ul>\n<li><p>安装 pip</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">apt-get install python-pip</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>安装 shadowsocks</p>\n   <figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pip install shadowsocks</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n</li>\n</ol>\n<h3 id=\"配置\"><a href=\"#配置\" class=\"headerlink\" title=\"配置\"></a>配置</h3>  <figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">vim /etc/shadowsocks.json</span><br></pre></td></tr></table></figure>\n<p>  加入以下内容<br>  <figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"string\">\"server\"</span>: <span class=\"string\">\"my_server_ip\"</span>,               <span class=\"comment\"># 服务器IP</span></span><br><span class=\"line\">    <span class=\"string\">\"server_port\"</span>: 8000,                    <span class=\"comment\"># 开启端口</span></span><br><span class=\"line\">    <span class=\"string\">\"local_address\"</span>: <span class=\"string\">\"x.x.x.x\"</span>,             <span class=\"comment\"># 服务器本地地址</span></span><br><span class=\"line\">    <span class=\"string\">\"local_port\"</span>: 1080,                     <span class=\"comment\"># 服务器本地端口</span></span><br><span class=\"line\">    <span class=\"string\">\"password\"</span>: <span class=\"string\">\"mypassword\"</span>,               <span class=\"comment\"># 连接密码</span></span><br><span class=\"line\">    <span class=\"string\">\"timeout\"</span>: 300,                         <span class=\"comment\"># 连接超时时间</span></span><br><span class=\"line\">    <span class=\"string\">\"method\"</span>: <span class=\"string\">\"rc4-md5\"</span></span><br><span class=\"line\">    <span class=\"string\">\"fast_open\"</span>: <span class=\"literal\">true</span>                       <span class=\"comment\"># 是否开启TCP_FASTOPEN，需要系统开启支持</span></span><br><span class=\"line\">    <span class=\"string\">\"workers\"</span>: 5                            <span class=\"comment\"># 进程数</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"系统优化\"><a href=\"#系统优化\" class=\"headerlink\" title=\"系统优化\"></a>系统优化</h3><p>  确认系统内核是 3.7.1 以上<br>   <figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">uname -r</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 4.4.0-45-generic</span></span><br></pre></td></tr></table></figure></p>\n<ol>\n<li><h4 id=\"系统文件描述符的最大限数\"><a href=\"#系统文件描述符的最大限数\" class=\"headerlink\" title=\"系统文件描述符的最大限数\"></a>系统文件描述符的最大限数</h4><ul>\n<li><p>Shadowsocks 每次启动前</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">ulimit</span> -SHn 51200</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>系统启动时生效</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">vim /etc/security/limits.conf</span><br><span class=\"line\"><span class=\"comment\"># 添加</span></span><br><span class=\"line\">* soft nofile 51200</span><br><span class=\"line\">* hard nofile 51200</span><br><span class=\"line\"><span class=\"comment\"># 第一列 是用户或者用户组</span></span><br><span class=\"line\"><span class=\"comment\"># 第二列 hard: 硬限制，soft: 软件限制，一般来说 soft 要比 hard 小，超过 soft 报警，hard 是底线</span></span><br><span class=\"line\"><span class=\"comment\"># 第三列 nofile 打开文件数</span></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">vim  /etc/pam.d/common-session</span><br><span class=\"line\"><span class=\"comment\">#添加一行</span></span><br><span class=\"line\">session required pam_limits.so</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">vim /etc/profile</span><br><span class=\"line\"><span class=\"comment\"># 在文件末尾加入</span></span><br><span class=\"line\"><span class=\"built_in\">ulimit</span> -SHn 51200</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n</li>\n<li><h4 id=\"调整内核参数\"><a href=\"#调整内核参数\" class=\"headerlink\" title=\"调整内核参数\"></a>调整内核参数</h4>  <figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">vim /etc/sysctl.conf</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 添加配置</span></span><br><span class=\"line\"></span><br><span class=\"line\">fs.file-max = 51200                            <span class=\"comment\"># max open files</span></span><br><span class=\"line\"></span><br><span class=\"line\"> net.core.rmem_max = 67108864                  <span class=\"comment\"># max read buffer</span></span><br><span class=\"line\"> net.core.wmem_max = 67108864                  <span class=\"comment\"># max write buffer</span></span><br><span class=\"line\"> net.core.netdev_max_backlog = 250000          <span class=\"comment\"># max processor input queue</span></span><br><span class=\"line\"> net.core.somaxconn = 4096                     <span class=\"comment\"># max backlog</span></span><br><span class=\"line\"></span><br><span class=\"line\"> net.ipv4.tcp_syncookies = 1                   <span class=\"comment\"># resist SYN flood attacks</span></span><br><span class=\"line\"> net.ipv4.tcp_tw_reuse = 1                     <span class=\"comment\"># reuse timewait sockets when safe</span></span><br><span class=\"line\"> net.ipv4.tcp_tw_recycle = 0                   <span class=\"comment\"># turn off fast timewait sockets recycling</span></span><br><span class=\"line\"> net.ipv4.tcp_fin_timeout = 30                 <span class=\"comment\"># short FIN timeout</span></span><br><span class=\"line\"> net.ipv4.tcp_keepalive_time = 1200            <span class=\"comment\"># short keepalive time</span></span><br><span class=\"line\"> net.ipv4.ip_local_port_range = 10000 65000    <span class=\"comment\"># outbound port range</span></span><br><span class=\"line\"> net.ipv4.tcp_max_syn_backlog = 8192           <span class=\"comment\"># max SYN backlog</span></span><br><span class=\"line\"> net.ipv4.tcp_max_tw_buckets = 5000            <span class=\"comment\"># max timewait sockets held by system simultaneously</span></span><br><span class=\"line\"> net.ipv4.tcp_rmem = 4096 87380 67108864       <span class=\"comment\"># TCP receive buffer</span></span><br><span class=\"line\"> net.ipv4.tcp_wmem = 4096 65536 67108864       <span class=\"comment\"># TCP write buffer</span></span><br><span class=\"line\"> net.ipv4.tcp_mtu_probing = 1                  <span class=\"comment\"># turn on path MTU discovery</span></span><br><span class=\"line\"></span><br><span class=\"line\"> net.ipv4.tcp_fastopen = 3                     <span class=\"comment\"># enable TCP_FASTOPEN </span></span><br><span class=\"line\"></span><br><span class=\"line\"> net.ipv4.tcp_congestion_control = hybla</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"> <span class=\"comment\">#使配置生效</span></span><br><span class=\"line\"> sysctl -p</span><br></pre></td></tr></table></figure>\n<ul>\n<li><p>TCP_FASTOPEN<br>服务端和客户端Linux内核版本必须新于 3.7.1</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 查看是否生效</span></span><br><span class=\"line\">sysctl net.ipv4.tcp_fastopen</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># net.ipv4.tcp_fastopen = 3</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>TCP拥塞控制算法<br>Linux 中提供了多套TCP拥塞控制算法。</p>\n<ol>\n<li>reno是最基本的拥塞控制算法，也是TCP协议的实验原型。</li>\n<li>bic适用于rtt较高但丢包极为罕见的情况，比如北美和欧洲之间的线路，这是2.6.8到2.6.18之间的Linux内核的默认算法。</li>\n<li>cubic是修改版的bic，适用环境比bic广泛一点，它是2.6.19之后的linux内核的默认算法</li>\n<li>hybla适用于高延时、高丢包率的网络，比如卫星链路——同样适用于中美之间的链路。</li>\n</ol>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 查看系统支持的算法</span></span><br><span class=\"line\">sysctl net.ipv4.tcp_available_congestion_control</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># net.ipv4.tcp_available_congestion_control = hybla cubic reno</span></span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n</li>\n</ol>\n<h3 id=\"启动\"><a href=\"#启动\" class=\"headerlink\" title=\"启动\"></a>启动</h3><ul>\n<li><p>直接启动</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ssserver -p 8000 -k password -m rc4-md5 -d &#123;start | stop&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>配置文件启动</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ssserver -c /etc/shadowsocks.json -d &#123;start | stop&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"小结\"><a href=\"#小结\" class=\"headerlink\" title=\"小结\"></a>小结</h2><p>采用 digitalocean 的 SFO2 机房 300+ms 延迟的情况下，能够很流畅的查看Youtube的 1080P （湖南电信）</p>\n</li>\n</ul>\n"},{"title":"PHP 注意事项","date":"2016-10-20T03:08:57.000Z","description":"整理了一些平时在PHP开发过程中一些需要注意的东西，它们可以在一定程度上使程序运行的更快，更稳定。","_content":"## Tips\n1. #### 尽量静态化\n    如果函数可以静态化，就尽量静态化。\n  区别主要体现是内存的处理上，静态方法在程序开始的时候分配内存，而实例方法在实例化的时候才会分配内存。\n  静态方法可以直接调用，而实例方法要先生成实例，在通过实例调用。\n \n   > 静态方法过多，会占用内存\n    \n1. #### echo VS print\n   echo的性能高于print，因为echo没有返回值，而print返回一个整型\n   > echo 大字符串的时候需要在服务器进行对应的配置 \n   \n1. #### echo 多个字符串\n   echo 多个字符串是采用`,`代替`.`来连接字符串\n  \n1.  #### @ 错误屏蔽\n    用 @ 掩盖错误会降低脚本运行速度，特别是不要在循环中使用@。\n    \n1. #### $row['id'] & $row[id] & $row[1]\n    `'id'`会直接查找key为`'id'`d的值，而没有引号如变量、常量在解析的时候会先判断类型在取值。\n    \n1. #### isset() & empty()\n   isset()是测试变量是否被赋值。\n   empty()是测试变量是否为空，该变量已经赋值。如果变量没被赋值就引用是被允许的,但会有notice提示。\n   > 如果变量被赋予空值 `$t = \"\"; $t = 0; $t = false;`，`empty($t)`返回真，`isset($t)`也返回真。\n   > 如果要注销一个变量采用 `unset($t)` `$t = NULL`\n   \n1. #### 循环前确认最大次数\n    在执行for循环前确认最大字数，不要每次循环的时候都重新计算最大值。\n    ```php\n    //不要这样做\n    for ($i=0;$i<=count($array);$i++){\n    }\n\n    //应该这样做\n    $len = count($array);\n    for ($i=0;$i<=$len;$i++){\n    }\n    ```\n1. #### include() & include_once() & require() & require_once()\n   功能是一致的都是加载文件，`_once`是在加载文件前判断该文件是否已经被加载过了，避免重复加载。\n   主要区别\n   * 错误处理机制\n      * `require()` 如果不存在文件时，会抛出`fatal error`脚本终止运行。\n      * `include()` 如果不存在文件时，会抛出`warning`但脚本继续运行。\n   * 性能\n     * `require()` 文件只处理一次 (实际上，文件内容替换了require()语句)。\n     * `include()` 执行时文件每次都要进行读取和评估。\n     如果有包含这些指令之一的代码和可能执行多次的代码，则使用`require()`效率比较高。\n   * 使用弹性\n     *  `require()` 通常放在脚本的最前面，脚本在执行前，会先载入所指定引入的文件，使它变成脚本的一部份。\n     *  `include()` 通常放在流程控制的处理区段中。脚本在读到文件时，才将它载进来。这种方式，可以把执行时的流程简单化。\n    \n    > 包含文件时使用完整路径，减少解析路径所需的时间。\n    \n1. #### ' ' & \" \"\n    PHP 允许使用单引号和双引号来封装字符串变量。\n    `\" \"` 先读取字符串内容，再查找其中的变量，并进行赋值。\n    \n1. #### 不要随便复制变量\n    把变量复制到另一个变量会增加一倍的内存消耗。\n    \n1. #### if else & switch case\n    switch case好于使用多个if，else if语句，并且代码更加容易阅读和维护。\n    \n1. #### 并不是事必面向对象\n    面向对象往往开销很大，每个方法和对象的调用都会消耗内存。\n    \n1. #### 不要把方法细分得过多\n    每个方法的调用都会消耗内存。\n    \n1. #### 尽量采用的PHP内置函数\n\n1. #### 循环内部不要声明变量，尤其是大变量：对象\n\n1. #### 销毁变量释放内存，特别是大的数组\n\n1. #### 字符串函数代替正则表达式。\n1. #### split比exploade快","source":"_posts/PHP-Matters-Needing-Attention.md","raw":"---\ntitle: PHP 注意事项\ndate: 2016-10-20 11:08:57\ntags:\n  -  PHP\n  -  Tips\ncategories:\n  - PHP\ndescription: 整理了一些平时在PHP开发过程中一些需要注意的东西，它们可以在一定程度上使程序运行的更快，更稳定。\n---\n## Tips\n1. #### 尽量静态化\n    如果函数可以静态化，就尽量静态化。\n  区别主要体现是内存的处理上，静态方法在程序开始的时候分配内存，而实例方法在实例化的时候才会分配内存。\n  静态方法可以直接调用，而实例方法要先生成实例，在通过实例调用。\n \n   > 静态方法过多，会占用内存\n    \n1. #### echo VS print\n   echo的性能高于print，因为echo没有返回值，而print返回一个整型\n   > echo 大字符串的时候需要在服务器进行对应的配置 \n   \n1. #### echo 多个字符串\n   echo 多个字符串是采用`,`代替`.`来连接字符串\n  \n1.  #### @ 错误屏蔽\n    用 @ 掩盖错误会降低脚本运行速度，特别是不要在循环中使用@。\n    \n1. #### $row['id'] & $row[id] & $row[1]\n    `'id'`会直接查找key为`'id'`d的值，而没有引号如变量、常量在解析的时候会先判断类型在取值。\n    \n1. #### isset() & empty()\n   isset()是测试变量是否被赋值。\n   empty()是测试变量是否为空，该变量已经赋值。如果变量没被赋值就引用是被允许的,但会有notice提示。\n   > 如果变量被赋予空值 `$t = \"\"; $t = 0; $t = false;`，`empty($t)`返回真，`isset($t)`也返回真。\n   > 如果要注销一个变量采用 `unset($t)` `$t = NULL`\n   \n1. #### 循环前确认最大次数\n    在执行for循环前确认最大字数，不要每次循环的时候都重新计算最大值。\n    ```php\n    //不要这样做\n    for ($i=0;$i<=count($array);$i++){\n    }\n\n    //应该这样做\n    $len = count($array);\n    for ($i=0;$i<=$len;$i++){\n    }\n    ```\n1. #### include() & include_once() & require() & require_once()\n   功能是一致的都是加载文件，`_once`是在加载文件前判断该文件是否已经被加载过了，避免重复加载。\n   主要区别\n   * 错误处理机制\n      * `require()` 如果不存在文件时，会抛出`fatal error`脚本终止运行。\n      * `include()` 如果不存在文件时，会抛出`warning`但脚本继续运行。\n   * 性能\n     * `require()` 文件只处理一次 (实际上，文件内容替换了require()语句)。\n     * `include()` 执行时文件每次都要进行读取和评估。\n     如果有包含这些指令之一的代码和可能执行多次的代码，则使用`require()`效率比较高。\n   * 使用弹性\n     *  `require()` 通常放在脚本的最前面，脚本在执行前，会先载入所指定引入的文件，使它变成脚本的一部份。\n     *  `include()` 通常放在流程控制的处理区段中。脚本在读到文件时，才将它载进来。这种方式，可以把执行时的流程简单化。\n    \n    > 包含文件时使用完整路径，减少解析路径所需的时间。\n    \n1. #### ' ' & \" \"\n    PHP 允许使用单引号和双引号来封装字符串变量。\n    `\" \"` 先读取字符串内容，再查找其中的变量，并进行赋值。\n    \n1. #### 不要随便复制变量\n    把变量复制到另一个变量会增加一倍的内存消耗。\n    \n1. #### if else & switch case\n    switch case好于使用多个if，else if语句，并且代码更加容易阅读和维护。\n    \n1. #### 并不是事必面向对象\n    面向对象往往开销很大，每个方法和对象的调用都会消耗内存。\n    \n1. #### 不要把方法细分得过多\n    每个方法的调用都会消耗内存。\n    \n1. #### 尽量采用的PHP内置函数\n\n1. #### 循环内部不要声明变量，尤其是大变量：对象\n\n1. #### 销毁变量释放内存，特别是大的数组\n\n1. #### 字符串函数代替正则表达式。\n1. #### split比exploade快","slug":"PHP-Matters-Needing-Attention","published":1,"updated":"2018-05-11T03:46:58.793Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjh8jw4vn000t6b8ksiucugag","content":"<h2 id=\"Tips\"><a href=\"#Tips\" class=\"headerlink\" title=\"Tips\"></a>Tips</h2><ol>\n<li><h4 id=\"尽量静态化\"><a href=\"#尽量静态化\" class=\"headerlink\" title=\"尽量静态化\"></a>尽量静态化</h4><p> 如果函数可以静态化，就尽量静态化。<br>区别主要体现是内存的处理上，静态方法在程序开始的时候分配内存，而实例方法在实例化的时候才会分配内存。<br>静态方法可以直接调用，而实例方法要先生成实例，在通过实例调用。</p>\n<blockquote>\n<p>静态方法过多，会占用内存</p>\n</blockquote>\n</li>\n<li><h4 id=\"echo-VS-print\"><a href=\"#echo-VS-print\" class=\"headerlink\" title=\"echo VS print\"></a>echo VS print</h4><p>echo的性能高于print，因为echo没有返回值，而print返回一个整型</p>\n<blockquote>\n<p>echo 大字符串的时候需要在服务器进行对应的配置 </p>\n</blockquote>\n</li>\n<li><h4 id=\"echo-多个字符串\"><a href=\"#echo-多个字符串\" class=\"headerlink\" title=\"echo 多个字符串\"></a>echo 多个字符串</h4><p>echo 多个字符串是采用<code>,</code>代替<code>.</code>来连接字符串</p>\n</li>\n<li><h4 id=\"错误屏蔽\"><a href=\"#错误屏蔽\" class=\"headerlink\" title=\"@ 错误屏蔽\"></a>@ 错误屏蔽</h4><p>用 @ 掩盖错误会降低脚本运行速度，特别是不要在循环中使用@。</p>\n</li>\n<li><h4 id=\"row-‘id’-amp-row-id-amp-row-1\"><a href=\"#row-‘id’-amp-row-id-amp-row-1\" class=\"headerlink\" title=\"$row[‘id’] &amp; $row[id] &amp; $row[1]\"></a>$row[‘id’] &amp; $row[id] &amp; $row[1]</h4><p> <code>&#39;id&#39;</code>会直接查找key为<code>&#39;id&#39;</code>d的值，而没有引号如变量、常量在解析的时候会先判断类型在取值。</p>\n</li>\n<li><h4 id=\"isset-amp-empty\"><a href=\"#isset-amp-empty\" class=\"headerlink\" title=\"isset() &amp; empty()\"></a>isset() &amp; empty()</h4><p>isset()是测试变量是否被赋值。<br>empty()是测试变量是否为空，该变量已经赋值。如果变量没被赋值就引用是被允许的,但会有notice提示。</p>\n<blockquote>\n<p>如果变量被赋予空值 <code>$t = &quot;&quot;; $t = 0; $t = false;</code>，<code>empty($t)</code>返回真，<code>isset($t)</code>也返回真。<br>如果要注销一个变量采用 <code>unset($t)</code> <code>$t = NULL</code></p>\n</blockquote>\n</li>\n<li><h4 id=\"循环前确认最大次数\"><a href=\"#循环前确认最大次数\" class=\"headerlink\" title=\"循环前确认最大次数\"></a>循环前确认最大次数</h4><p> 在执行for循环前确认最大字数，不要每次循环的时候都重新计算最大值。</p>\n <figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//不要这样做</span></span><br><span class=\"line\"><span class=\"keyword\">for</span> ($i=<span class=\"number\">0</span>;$i&lt;=count($array);$i++)&#123;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//应该这样做</span></span><br><span class=\"line\">$len = count($array);</span><br><span class=\"line\"><span class=\"keyword\">for</span> ($i=<span class=\"number\">0</span>;$i&lt;=$len;$i++)&#123;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><h4 id=\"include-amp-include-once-amp-require-amp-require-once\"><a href=\"#include-amp-include-once-amp-require-amp-require-once\" class=\"headerlink\" title=\"include() &amp; include_once() &amp; require() &amp; require_once()\"></a>include() &amp; include_once() &amp; require() &amp; require_once()</h4><p>功能是一致的都是加载文件，<code>_once</code>是在加载文件前判断该文件是否已经被加载过了，避免重复加载。<br>主要区别</p>\n<ul>\n<li>错误处理机制<ul>\n<li><code>require()</code> 如果不存在文件时，会抛出<code>fatal error</code>脚本终止运行。</li>\n<li><code>include()</code> 如果不存在文件时，会抛出<code>warning</code>但脚本继续运行。</li>\n</ul>\n</li>\n<li>性能<ul>\n<li><code>require()</code> 文件只处理一次 (实际上，文件内容替换了require()语句)。</li>\n<li><code>include()</code> 执行时文件每次都要进行读取和评估。<br>如果有包含这些指令之一的代码和可能执行多次的代码，则使用<code>require()</code>效率比较高。</li>\n</ul>\n</li>\n<li><p>使用弹性</p>\n<ul>\n<li><code>require()</code> 通常放在脚本的最前面，脚本在执行前，会先载入所指定引入的文件，使它变成脚本的一部份。</li>\n<li><code>include()</code> 通常放在流程控制的处理区段中。脚本在读到文件时，才将它载进来。这种方式，可以把执行时的流程简单化。</li>\n</ul>\n<blockquote>\n<p>包含文件时使用完整路径，减少解析路径所需的时间。</p>\n</blockquote>\n</li>\n</ul>\n</li>\n<li><h4 id=\"‘-‘-amp-“-“\"><a href=\"#‘-‘-amp-“-“\" class=\"headerlink\" title=\"‘ ‘ &amp; “ “\"></a>‘ ‘ &amp; “ “</h4><p> PHP 允许使用单引号和双引号来封装字符串变量。<br> <code>&quot; &quot;</code> 先读取字符串内容，再查找其中的变量，并进行赋值。</p>\n</li>\n<li><h4 id=\"不要随便复制变量\"><a href=\"#不要随便复制变量\" class=\"headerlink\" title=\"不要随便复制变量\"></a>不要随便复制变量</h4><p> 把变量复制到另一个变量会增加一倍的内存消耗。</p>\n</li>\n<li><h4 id=\"if-else-amp-switch-case\"><a href=\"#if-else-amp-switch-case\" class=\"headerlink\" title=\"if else &amp; switch case\"></a>if else &amp; switch case</h4><p> switch case好于使用多个if，else if语句，并且代码更加容易阅读和维护。</p>\n</li>\n<li><h4 id=\"并不是事必面向对象\"><a href=\"#并不是事必面向对象\" class=\"headerlink\" title=\"并不是事必面向对象\"></a>并不是事必面向对象</h4><p> 面向对象往往开销很大，每个方法和对象的调用都会消耗内存。</p>\n</li>\n<li><h4 id=\"不要把方法细分得过多\"><a href=\"#不要把方法细分得过多\" class=\"headerlink\" title=\"不要把方法细分得过多\"></a>不要把方法细分得过多</h4><p> 每个方法的调用都会消耗内存。</p>\n</li>\n<li><h4 id=\"尽量采用的PHP内置函数\"><a href=\"#尽量采用的PHP内置函数\" class=\"headerlink\" title=\"尽量采用的PHP内置函数\"></a>尽量采用的PHP内置函数</h4></li>\n<li><h4 id=\"循环内部不要声明变量，尤其是大变量：对象\"><a href=\"#循环内部不要声明变量，尤其是大变量：对象\" class=\"headerlink\" title=\"循环内部不要声明变量，尤其是大变量：对象\"></a>循环内部不要声明变量，尤其是大变量：对象</h4></li>\n<li><h4 id=\"销毁变量释放内存，特别是大的数组\"><a href=\"#销毁变量释放内存，特别是大的数组\" class=\"headerlink\" title=\"销毁变量释放内存，特别是大的数组\"></a>销毁变量释放内存，特别是大的数组</h4></li>\n<li><h4 id=\"字符串函数代替正则表达式。\"><a href=\"#字符串函数代替正则表达式。\" class=\"headerlink\" title=\"字符串函数代替正则表达式。\"></a>字符串函数代替正则表达式。</h4></li>\n<li><h4 id=\"split比exploade快\"><a href=\"#split比exploade快\" class=\"headerlink\" title=\"split比exploade快\"></a>split比exploade快</h4></li>\n</ol>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"Tips\"><a href=\"#Tips\" class=\"headerlink\" title=\"Tips\"></a>Tips</h2><ol>\n<li><h4 id=\"尽量静态化\"><a href=\"#尽量静态化\" class=\"headerlink\" title=\"尽量静态化\"></a>尽量静态化</h4><p> 如果函数可以静态化，就尽量静态化。<br>区别主要体现是内存的处理上，静态方法在程序开始的时候分配内存，而实例方法在实例化的时候才会分配内存。<br>静态方法可以直接调用，而实例方法要先生成实例，在通过实例调用。</p>\n<blockquote>\n<p>静态方法过多，会占用内存</p>\n</blockquote>\n</li>\n<li><h4 id=\"echo-VS-print\"><a href=\"#echo-VS-print\" class=\"headerlink\" title=\"echo VS print\"></a>echo VS print</h4><p>echo的性能高于print，因为echo没有返回值，而print返回一个整型</p>\n<blockquote>\n<p>echo 大字符串的时候需要在服务器进行对应的配置 </p>\n</blockquote>\n</li>\n<li><h4 id=\"echo-多个字符串\"><a href=\"#echo-多个字符串\" class=\"headerlink\" title=\"echo 多个字符串\"></a>echo 多个字符串</h4><p>echo 多个字符串是采用<code>,</code>代替<code>.</code>来连接字符串</p>\n</li>\n<li><h4 id=\"错误屏蔽\"><a href=\"#错误屏蔽\" class=\"headerlink\" title=\"@ 错误屏蔽\"></a>@ 错误屏蔽</h4><p>用 @ 掩盖错误会降低脚本运行速度，特别是不要在循环中使用@。</p>\n</li>\n<li><h4 id=\"row-‘id’-amp-row-id-amp-row-1\"><a href=\"#row-‘id’-amp-row-id-amp-row-1\" class=\"headerlink\" title=\"$row[‘id’] &amp; $row[id] &amp; $row[1]\"></a>$row[‘id’] &amp; $row[id] &amp; $row[1]</h4><p> <code>&#39;id&#39;</code>会直接查找key为<code>&#39;id&#39;</code>d的值，而没有引号如变量、常量在解析的时候会先判断类型在取值。</p>\n</li>\n<li><h4 id=\"isset-amp-empty\"><a href=\"#isset-amp-empty\" class=\"headerlink\" title=\"isset() &amp; empty()\"></a>isset() &amp; empty()</h4><p>isset()是测试变量是否被赋值。<br>empty()是测试变量是否为空，该变量已经赋值。如果变量没被赋值就引用是被允许的,但会有notice提示。</p>\n<blockquote>\n<p>如果变量被赋予空值 <code>$t = &quot;&quot;; $t = 0; $t = false;</code>，<code>empty($t)</code>返回真，<code>isset($t)</code>也返回真。<br>如果要注销一个变量采用 <code>unset($t)</code> <code>$t = NULL</code></p>\n</blockquote>\n</li>\n<li><h4 id=\"循环前确认最大次数\"><a href=\"#循环前确认最大次数\" class=\"headerlink\" title=\"循环前确认最大次数\"></a>循环前确认最大次数</h4><p> 在执行for循环前确认最大字数，不要每次循环的时候都重新计算最大值。</p>\n <figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//不要这样做</span></span><br><span class=\"line\"><span class=\"keyword\">for</span> ($i=<span class=\"number\">0</span>;$i&lt;=count($array);$i++)&#123;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//应该这样做</span></span><br><span class=\"line\">$len = count($array);</span><br><span class=\"line\"><span class=\"keyword\">for</span> ($i=<span class=\"number\">0</span>;$i&lt;=$len;$i++)&#123;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><h4 id=\"include-amp-include-once-amp-require-amp-require-once\"><a href=\"#include-amp-include-once-amp-require-amp-require-once\" class=\"headerlink\" title=\"include() &amp; include_once() &amp; require() &amp; require_once()\"></a>include() &amp; include_once() &amp; require() &amp; require_once()</h4><p>功能是一致的都是加载文件，<code>_once</code>是在加载文件前判断该文件是否已经被加载过了，避免重复加载。<br>主要区别</p>\n<ul>\n<li>错误处理机制<ul>\n<li><code>require()</code> 如果不存在文件时，会抛出<code>fatal error</code>脚本终止运行。</li>\n<li><code>include()</code> 如果不存在文件时，会抛出<code>warning</code>但脚本继续运行。</li>\n</ul>\n</li>\n<li>性能<ul>\n<li><code>require()</code> 文件只处理一次 (实际上，文件内容替换了require()语句)。</li>\n<li><code>include()</code> 执行时文件每次都要进行读取和评估。<br>如果有包含这些指令之一的代码和可能执行多次的代码，则使用<code>require()</code>效率比较高。</li>\n</ul>\n</li>\n<li><p>使用弹性</p>\n<ul>\n<li><code>require()</code> 通常放在脚本的最前面，脚本在执行前，会先载入所指定引入的文件，使它变成脚本的一部份。</li>\n<li><code>include()</code> 通常放在流程控制的处理区段中。脚本在读到文件时，才将它载进来。这种方式，可以把执行时的流程简单化。</li>\n</ul>\n<blockquote>\n<p>包含文件时使用完整路径，减少解析路径所需的时间。</p>\n</blockquote>\n</li>\n</ul>\n</li>\n<li><h4 id=\"‘-‘-amp-“-“\"><a href=\"#‘-‘-amp-“-“\" class=\"headerlink\" title=\"‘ ‘ &amp; “ “\"></a>‘ ‘ &amp; “ “</h4><p> PHP 允许使用单引号和双引号来封装字符串变量。<br> <code>&quot; &quot;</code> 先读取字符串内容，再查找其中的变量，并进行赋值。</p>\n</li>\n<li><h4 id=\"不要随便复制变量\"><a href=\"#不要随便复制变量\" class=\"headerlink\" title=\"不要随便复制变量\"></a>不要随便复制变量</h4><p> 把变量复制到另一个变量会增加一倍的内存消耗。</p>\n</li>\n<li><h4 id=\"if-else-amp-switch-case\"><a href=\"#if-else-amp-switch-case\" class=\"headerlink\" title=\"if else &amp; switch case\"></a>if else &amp; switch case</h4><p> switch case好于使用多个if，else if语句，并且代码更加容易阅读和维护。</p>\n</li>\n<li><h4 id=\"并不是事必面向对象\"><a href=\"#并不是事必面向对象\" class=\"headerlink\" title=\"并不是事必面向对象\"></a>并不是事必面向对象</h4><p> 面向对象往往开销很大，每个方法和对象的调用都会消耗内存。</p>\n</li>\n<li><h4 id=\"不要把方法细分得过多\"><a href=\"#不要把方法细分得过多\" class=\"headerlink\" title=\"不要把方法细分得过多\"></a>不要把方法细分得过多</h4><p> 每个方法的调用都会消耗内存。</p>\n</li>\n<li><h4 id=\"尽量采用的PHP内置函数\"><a href=\"#尽量采用的PHP内置函数\" class=\"headerlink\" title=\"尽量采用的PHP内置函数\"></a>尽量采用的PHP内置函数</h4></li>\n<li><h4 id=\"循环内部不要声明变量，尤其是大变量：对象\"><a href=\"#循环内部不要声明变量，尤其是大变量：对象\" class=\"headerlink\" title=\"循环内部不要声明变量，尤其是大变量：对象\"></a>循环内部不要声明变量，尤其是大变量：对象</h4></li>\n<li><h4 id=\"销毁变量释放内存，特别是大的数组\"><a href=\"#销毁变量释放内存，特别是大的数组\" class=\"headerlink\" title=\"销毁变量释放内存，特别是大的数组\"></a>销毁变量释放内存，特别是大的数组</h4></li>\n<li><h4 id=\"字符串函数代替正则表达式。\"><a href=\"#字符串函数代替正则表达式。\" class=\"headerlink\" title=\"字符串函数代替正则表达式。\"></a>字符串函数代替正则表达式。</h4></li>\n<li><h4 id=\"split比exploade快\"><a href=\"#split比exploade快\" class=\"headerlink\" title=\"split比exploade快\"></a>split比exploade快</h4></li>\n</ol>\n"},{"title":"PHP-FPM 进程管理模式简介","date":"2016-10-10T08:02:10.000Z","description":["在服务器运行时，会出现服务器出现PHP-FPM内存占用过大、PHP-FPM进程数目太多等相关问题导致网站或者服务器访问无法问题，那PHP-FPM的进程管理模式到底是什么样子的，下面我们来大概了解下。"],"_content":"## 前言\n在服务器运行时，会出现服务器出现PHP-FPM内存占用过大、PHP-FPM进程数目太多等相关问题导致网站或者服务器访问无法问题，那PHP-FPM的进程管理模式到底是什么样子的，下面我们来大概了解下。\n## 简介\n通过查看一下配置文件，我们可以发现PHP-FPM具有三种管理模式`{ static | dynamic | ondemand}`\n```bash\nvim /etc/php/7.0/fpm/pool.d/www.conf \n```\n```bash\n; Choose how the process manager will control the number of child processes.\n; Possible Values:\n;   static  - a fixed number (pm.max_children) of child processes;\n;   dynamic - the number of child processes are set dynamically based on the\n;             following directives. With this process management, there will be\n;             always at least 1 children.\n;             pm.max_children      - the maximum number of children that can\n;                                    be alive at the same time.\n;             pm.start_servers     - the number of children created on startup.\n;             pm.min_spare_servers - the minimum number of children in 'idle'\n;                                    state (waiting to process). If the number\n;                                    of 'idle' processes is less than this\n;                                    number then some children will be created.\n;             pm.max_spare_servers - the maximum number of children in 'idle'\n;                                    state (waiting to process). If the number\n;                                    of 'idle' processes is greater than this\n;                                    number then some children will be killed.\n;  ondemand - no children are created at startup. Children will be forked when\n;             new requests will connect. The following parameter are used:\n;             pm.max_children           - the maximum number of children that\n;                                         can be alive at the same time.\n;             pm.process_idle_timeout   - The number of seconds after which\n;                                         an idle process will be killed.\n; Note: This value is mandatory.\n```\n## 详解\n### Static\n`pm = static`\n启动时创建并始终保持一个固定数量的子进程。\n```bash\npm.max_children        # 限定php-fpm的最大进程数\n```\n### Dynamic\n`pm = dynamic  (默认)` \n启动时会创建固定数目`start_servers`的子进程，使用过程中会新建子进程但数目不会超过最大子进程数`max_children`，子进程数目会在`start_servers`和`max_children`之间波动。而闲置的子进程数由`min_spare_servers` 和 `max_spare_servers` 进行控制。\n```bash\npm.max_children        # 限定php-fpm的最大进程数\npm.start_servers       # 起始php-fpm进程数量。\npm.min_spare_servers   # 空闲状态下的最小php-fpm进程数量。\npm.max_spare_servers   # 空闲状态下的最大php-fpm进程数量。（max_spare_servers <= max_children）\n\n#官方建议值\nstart_servers = min_spare_servers + (max_spare_servers - min_spare_servers) / 2\n```\n### Ondemand\n`pm = ondemand ` \n启动时不会创建子进程，当有请求时创建进程，数目不超过`max_children`。当进程空闲时间超过`process_idle_timeout`将被释放\n```bash\npm.max_children           # 限定php-fpm的最大进程数\npm.process_idle_timeout   # 进程闲置多少秒后被释放\n```\n\n## 建议\n - 配置过程中我们可以采用 `内存/30M (单个进程最大内存数)`的数目来设置`max_children`\n - `static` 适用于大内存服务器，因为子进程在创建和释放时都会消耗服务器资源 (时间、内存、CPU...)\n - `dynamic` 适用于小内存服务器，方式灵活，节省内存。\n - `ondemand` 不建议使用在大访问量应用，大量创建和释放进程开销很大\n - 生成环境建议采用 `static` 模式\n\n\n","source":"_posts/PHPFPM-Process-Manager.md","raw":"---\ntitle: PHP-FPM 进程管理模式简介\ndate: 2016-10-10 16:02:10\ntags:\n  - Server\n  - PHP\n  - Process Manager\ncategories:\n  - Server\ndescription: \n  - 在服务器运行时，会出现服务器出现PHP-FPM内存占用过大、PHP-FPM进程数目太多等相关问题导致网站或者服务器访问无法问题，那PHP-FPM的进程管理模式到底是什么样子的，下面我们来大概了解下。\n---\n## 前言\n在服务器运行时，会出现服务器出现PHP-FPM内存占用过大、PHP-FPM进程数目太多等相关问题导致网站或者服务器访问无法问题，那PHP-FPM的进程管理模式到底是什么样子的，下面我们来大概了解下。\n## 简介\n通过查看一下配置文件，我们可以发现PHP-FPM具有三种管理模式`{ static | dynamic | ondemand}`\n```bash\nvim /etc/php/7.0/fpm/pool.d/www.conf \n```\n```bash\n; Choose how the process manager will control the number of child processes.\n; Possible Values:\n;   static  - a fixed number (pm.max_children) of child processes;\n;   dynamic - the number of child processes are set dynamically based on the\n;             following directives. With this process management, there will be\n;             always at least 1 children.\n;             pm.max_children      - the maximum number of children that can\n;                                    be alive at the same time.\n;             pm.start_servers     - the number of children created on startup.\n;             pm.min_spare_servers - the minimum number of children in 'idle'\n;                                    state (waiting to process). If the number\n;                                    of 'idle' processes is less than this\n;                                    number then some children will be created.\n;             pm.max_spare_servers - the maximum number of children in 'idle'\n;                                    state (waiting to process). If the number\n;                                    of 'idle' processes is greater than this\n;                                    number then some children will be killed.\n;  ondemand - no children are created at startup. Children will be forked when\n;             new requests will connect. The following parameter are used:\n;             pm.max_children           - the maximum number of children that\n;                                         can be alive at the same time.\n;             pm.process_idle_timeout   - The number of seconds after which\n;                                         an idle process will be killed.\n; Note: This value is mandatory.\n```\n## 详解\n### Static\n`pm = static`\n启动时创建并始终保持一个固定数量的子进程。\n```bash\npm.max_children        # 限定php-fpm的最大进程数\n```\n### Dynamic\n`pm = dynamic  (默认)` \n启动时会创建固定数目`start_servers`的子进程，使用过程中会新建子进程但数目不会超过最大子进程数`max_children`，子进程数目会在`start_servers`和`max_children`之间波动。而闲置的子进程数由`min_spare_servers` 和 `max_spare_servers` 进行控制。\n```bash\npm.max_children        # 限定php-fpm的最大进程数\npm.start_servers       # 起始php-fpm进程数量。\npm.min_spare_servers   # 空闲状态下的最小php-fpm进程数量。\npm.max_spare_servers   # 空闲状态下的最大php-fpm进程数量。（max_spare_servers <= max_children）\n\n#官方建议值\nstart_servers = min_spare_servers + (max_spare_servers - min_spare_servers) / 2\n```\n### Ondemand\n`pm = ondemand ` \n启动时不会创建子进程，当有请求时创建进程，数目不超过`max_children`。当进程空闲时间超过`process_idle_timeout`将被释放\n```bash\npm.max_children           # 限定php-fpm的最大进程数\npm.process_idle_timeout   # 进程闲置多少秒后被释放\n```\n\n## 建议\n - 配置过程中我们可以采用 `内存/30M (单个进程最大内存数)`的数目来设置`max_children`\n - `static` 适用于大内存服务器，因为子进程在创建和释放时都会消耗服务器资源 (时间、内存、CPU...)\n - `dynamic` 适用于小内存服务器，方式灵活，节省内存。\n - `ondemand` 不建议使用在大访问量应用，大量创建和释放进程开销很大\n - 生成环境建议采用 `static` 模式\n\n\n","slug":"PHPFPM-Process-Manager","published":1,"updated":"2018-05-11T03:46:58.793Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjh8jw4vp000w6b8ktqd6fzw9","content":"<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>在服务器运行时，会出现服务器出现PHP-FPM内存占用过大、PHP-FPM进程数目太多等相关问题导致网站或者服务器访问无法问题，那PHP-FPM的进程管理模式到底是什么样子的，下面我们来大概了解下。</p>\n<h2 id=\"简介\"><a href=\"#简介\" class=\"headerlink\" title=\"简介\"></a>简介</h2><p>通过查看一下配置文件，我们可以发现PHP-FPM具有三种管理模式<code>{ static | dynamic | ondemand}</code><br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">vim /etc/php/7.0/fpm/pool.d/www.conf</span><br></pre></td></tr></table></figure></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">; Choose how the process manager will control the number of child processes.</span><br><span class=\"line\">; Possible Values:</span><br><span class=\"line\">;   static  - a fixed number (pm.max_children) of child processes;</span><br><span class=\"line\">;   dynamic - the number of child processes are <span class=\"built_in\">set</span> dynamically based on the</span><br><span class=\"line\">;             following directives. With this process management, there will be</span><br><span class=\"line\">;             always at least 1 children.</span><br><span class=\"line\">;             pm.max_children      - the maximum number of children that can</span><br><span class=\"line\">;                                    be alive at the same time.</span><br><span class=\"line\">;             pm.start_servers     - the number of children created on startup.</span><br><span class=\"line\">;             pm.min_spare_servers - the minimum number of children <span class=\"keyword\">in</span> <span class=\"string\">'idle'</span></span><br><span class=\"line\">;                                    state (waiting to process). If the number</span><br><span class=\"line\">;                                    of <span class=\"string\">'idle'</span> processes is less than this</span><br><span class=\"line\">;                                    number <span class=\"keyword\">then</span> some children will be created.</span><br><span class=\"line\">;             pm.max_spare_servers - the maximum number of children <span class=\"keyword\">in</span> <span class=\"string\">'idle'</span></span><br><span class=\"line\">;                                    state (waiting to process). If the number</span><br><span class=\"line\">;                                    of <span class=\"string\">'idle'</span> processes is greater than this</span><br><span class=\"line\">;                                    number <span class=\"keyword\">then</span> some children will be killed.</span><br><span class=\"line\">;  ondemand - no children are created at startup. Children will be forked when</span><br><span class=\"line\">;             new requests will connect. The following parameter are used:</span><br><span class=\"line\">;             pm.max_children           - the maximum number of children that</span><br><span class=\"line\">;                                         can be alive at the same time.</span><br><span class=\"line\">;             pm.process_idle_timeout   - The number of seconds after <span class=\"built_in\">which</span></span><br><span class=\"line\">;                                         an idle process will be killed.</span><br><span class=\"line\">; Note: This value is mandatory.</span><br></pre></td></tr></table></figure>\n<h2 id=\"详解\"><a href=\"#详解\" class=\"headerlink\" title=\"详解\"></a>详解</h2><h3 id=\"Static\"><a href=\"#Static\" class=\"headerlink\" title=\"Static\"></a>Static</h3><p><code>pm = static</code><br>启动时创建并始终保持一个固定数量的子进程。<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pm.max_children        <span class=\"comment\"># 限定php-fpm的最大进程数</span></span><br></pre></td></tr></table></figure></p>\n<h3 id=\"Dynamic\"><a href=\"#Dynamic\" class=\"headerlink\" title=\"Dynamic\"></a>Dynamic</h3><p><code>pm = dynamic  (默认)</code><br>启动时会创建固定数目<code>start_servers</code>的子进程，使用过程中会新建子进程但数目不会超过最大子进程数<code>max_children</code>，子进程数目会在<code>start_servers</code>和<code>max_children</code>之间波动。而闲置的子进程数由<code>min_spare_servers</code> 和 <code>max_spare_servers</code> 进行控制。<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pm.max_children        <span class=\"comment\"># 限定php-fpm的最大进程数</span></span><br><span class=\"line\">pm.start_servers       <span class=\"comment\"># 起始php-fpm进程数量。</span></span><br><span class=\"line\">pm.min_spare_servers   <span class=\"comment\"># 空闲状态下的最小php-fpm进程数量。</span></span><br><span class=\"line\">pm.max_spare_servers   <span class=\"comment\"># 空闲状态下的最大php-fpm进程数量。（max_spare_servers &lt;= max_children）</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#官方建议值</span></span><br><span class=\"line\">start_servers = min_spare_servers + (max_spare_servers - min_spare_servers) / 2</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"Ondemand\"><a href=\"#Ondemand\" class=\"headerlink\" title=\"Ondemand\"></a>Ondemand</h3><p><code>pm = ondemand</code><br>启动时不会创建子进程，当有请求时创建进程，数目不超过<code>max_children</code>。当进程空闲时间超过<code>process_idle_timeout</code>将被释放<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pm.max_children           <span class=\"comment\"># 限定php-fpm的最大进程数</span></span><br><span class=\"line\">pm.process_idle_timeout   <span class=\"comment\"># 进程闲置多少秒后被释放</span></span><br></pre></td></tr></table></figure></p>\n<h2 id=\"建议\"><a href=\"#建议\" class=\"headerlink\" title=\"建议\"></a>建议</h2><ul>\n<li>配置过程中我们可以采用 <code>内存/30M (单个进程最大内存数)</code>的数目来设置<code>max_children</code></li>\n<li><code>static</code> 适用于大内存服务器，因为子进程在创建和释放时都会消耗服务器资源 (时间、内存、CPU…)</li>\n<li><code>dynamic</code> 适用于小内存服务器，方式灵活，节省内存。</li>\n<li><code>ondemand</code> 不建议使用在大访问量应用，大量创建和释放进程开销很大</li>\n<li>生成环境建议采用 <code>static</code> 模式</li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>在服务器运行时，会出现服务器出现PHP-FPM内存占用过大、PHP-FPM进程数目太多等相关问题导致网站或者服务器访问无法问题，那PHP-FPM的进程管理模式到底是什么样子的，下面我们来大概了解下。</p>\n<h2 id=\"简介\"><a href=\"#简介\" class=\"headerlink\" title=\"简介\"></a>简介</h2><p>通过查看一下配置文件，我们可以发现PHP-FPM具有三种管理模式<code>{ static | dynamic | ondemand}</code><br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">vim /etc/php/7.0/fpm/pool.d/www.conf</span><br></pre></td></tr></table></figure></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">; Choose how the process manager will control the number of child processes.</span><br><span class=\"line\">; Possible Values:</span><br><span class=\"line\">;   static  - a fixed number (pm.max_children) of child processes;</span><br><span class=\"line\">;   dynamic - the number of child processes are <span class=\"built_in\">set</span> dynamically based on the</span><br><span class=\"line\">;             following directives. With this process management, there will be</span><br><span class=\"line\">;             always at least 1 children.</span><br><span class=\"line\">;             pm.max_children      - the maximum number of children that can</span><br><span class=\"line\">;                                    be alive at the same time.</span><br><span class=\"line\">;             pm.start_servers     - the number of children created on startup.</span><br><span class=\"line\">;             pm.min_spare_servers - the minimum number of children <span class=\"keyword\">in</span> <span class=\"string\">'idle'</span></span><br><span class=\"line\">;                                    state (waiting to process). If the number</span><br><span class=\"line\">;                                    of <span class=\"string\">'idle'</span> processes is less than this</span><br><span class=\"line\">;                                    number <span class=\"keyword\">then</span> some children will be created.</span><br><span class=\"line\">;             pm.max_spare_servers - the maximum number of children <span class=\"keyword\">in</span> <span class=\"string\">'idle'</span></span><br><span class=\"line\">;                                    state (waiting to process). If the number</span><br><span class=\"line\">;                                    of <span class=\"string\">'idle'</span> processes is greater than this</span><br><span class=\"line\">;                                    number <span class=\"keyword\">then</span> some children will be killed.</span><br><span class=\"line\">;  ondemand - no children are created at startup. Children will be forked when</span><br><span class=\"line\">;             new requests will connect. The following parameter are used:</span><br><span class=\"line\">;             pm.max_children           - the maximum number of children that</span><br><span class=\"line\">;                                         can be alive at the same time.</span><br><span class=\"line\">;             pm.process_idle_timeout   - The number of seconds after <span class=\"built_in\">which</span></span><br><span class=\"line\">;                                         an idle process will be killed.</span><br><span class=\"line\">; Note: This value is mandatory.</span><br></pre></td></tr></table></figure>\n<h2 id=\"详解\"><a href=\"#详解\" class=\"headerlink\" title=\"详解\"></a>详解</h2><h3 id=\"Static\"><a href=\"#Static\" class=\"headerlink\" title=\"Static\"></a>Static</h3><p><code>pm = static</code><br>启动时创建并始终保持一个固定数量的子进程。<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pm.max_children        <span class=\"comment\"># 限定php-fpm的最大进程数</span></span><br></pre></td></tr></table></figure></p>\n<h3 id=\"Dynamic\"><a href=\"#Dynamic\" class=\"headerlink\" title=\"Dynamic\"></a>Dynamic</h3><p><code>pm = dynamic  (默认)</code><br>启动时会创建固定数目<code>start_servers</code>的子进程，使用过程中会新建子进程但数目不会超过最大子进程数<code>max_children</code>，子进程数目会在<code>start_servers</code>和<code>max_children</code>之间波动。而闲置的子进程数由<code>min_spare_servers</code> 和 <code>max_spare_servers</code> 进行控制。<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pm.max_children        <span class=\"comment\"># 限定php-fpm的最大进程数</span></span><br><span class=\"line\">pm.start_servers       <span class=\"comment\"># 起始php-fpm进程数量。</span></span><br><span class=\"line\">pm.min_spare_servers   <span class=\"comment\"># 空闲状态下的最小php-fpm进程数量。</span></span><br><span class=\"line\">pm.max_spare_servers   <span class=\"comment\"># 空闲状态下的最大php-fpm进程数量。（max_spare_servers &lt;= max_children）</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#官方建议值</span></span><br><span class=\"line\">start_servers = min_spare_servers + (max_spare_servers - min_spare_servers) / 2</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"Ondemand\"><a href=\"#Ondemand\" class=\"headerlink\" title=\"Ondemand\"></a>Ondemand</h3><p><code>pm = ondemand</code><br>启动时不会创建子进程，当有请求时创建进程，数目不超过<code>max_children</code>。当进程空闲时间超过<code>process_idle_timeout</code>将被释放<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pm.max_children           <span class=\"comment\"># 限定php-fpm的最大进程数</span></span><br><span class=\"line\">pm.process_idle_timeout   <span class=\"comment\"># 进程闲置多少秒后被释放</span></span><br></pre></td></tr></table></figure></p>\n<h2 id=\"建议\"><a href=\"#建议\" class=\"headerlink\" title=\"建议\"></a>建议</h2><ul>\n<li>配置过程中我们可以采用 <code>内存/30M (单个进程最大内存数)</code>的数目来设置<code>max_children</code></li>\n<li><code>static</code> 适用于大内存服务器，因为子进程在创建和释放时都会消耗服务器资源 (时间、内存、CPU…)</li>\n<li><code>dynamic</code> 适用于小内存服务器，方式灵活，节省内存。</li>\n<li><code>ondemand</code> 不建议使用在大访问量应用，大量创建和释放进程开销很大</li>\n<li>生成环境建议采用 <code>static</code> 模式</li>\n</ul>\n"},{"title":"Rails 缓存简介","date":"2016-11-18T08:32:38.000Z","description":"简单的介绍 Rails 中常用的缓存机制","_content":"\n## 前言\n\n合理的使用缓存可以很大程度上提高网站性能，是网站性能优化必不可少的一部分。\n\n## 缓存\n\n*    Model 层缓存\n\n     通过手动设置可以将部分查询结果存储在对应的缓存系统中。\n\n     ```ruby\n     Rails.cache.fetch('all_products', expires_in: 1.days) do \n       Product.all.to_a\n     end\n     ```\n\n     **需要确认执行结果是否为最终的结果集**\n\n- #### Controller 层缓存\n\n  - ##### Action 缓存\n\n    缓存 Action Response，借助 Fragement Cache 和 Callback 实现。\n\n    可通过 before_action 加入各种验证机制。\n\n    ```\n    before_action :authentication, only: :show\n    cache_action :show, expires_in: 1.hour\n    ```\n\n    **该方法在 Rails4 已经移除了，可通过Gem包开启**\n\n  - ##### Page 缓存 (页面缓存)\n\n    将页面缓存成静态页面，无法进行权限认证等。\n\n    ```\n    class ProductsController < ActionController\n      caches_page :index\n    end\n    ```\n\n    **该方法在 Rails4 已经移除了，可通过Gem包开启**\n\n- #### View 层缓存\n\n  - ##### Fragement Cache (片段缓存)\n\n    随着页面复杂的程度的提高，已经无法做整页缓存，只能将其切割成不同的片段。\n\n    ```\n    - cache('xxx' , expires_in: 1.days ) do \n      %ul\n        = @product.name\n    ```\n\n    **片段缓存可以通过嵌套使用的方式形成特殊的俄罗斯套娃(Russian Doll Caching)**\n\n- #### SQL 缓存\n\n  这是 Rails 框架自带的一个特性，会缓存每一次查询的结果集。\n\n  ```\n  class ProductsController < ActionController\n    def index\n      # First Query\n      @products = Product.all\n      \n      # Second Query (Cache)\n      @products = Product.all\n    end\n  ```\n\n  当第二次查询时，会直接从内存中读取第一次查询缓存入内存的结果集。\b\n\n  **Tips: 缓存的有效时间是 action 的生命周期**\n\n## 配置\n\n```bash\n # 开启缓存\n config.action_controller.perform_caching = true\n # 缓存存储方式\n config.cache_store = :memory_store  # memory_store mem_cache_store file_store\n```\n\n","source":"_posts/Raiils-Cache-Simple.md","raw":"---\ntitle: Rails 缓存简介\ndate: 2016-11-18 16:32:38\ntags:\n - Ruby\n - Cache\n - Rails\ncategories: Rails\ndescription: 简单的介绍 Rails 中常用的缓存机制\n---\n\n## 前言\n\n合理的使用缓存可以很大程度上提高网站性能，是网站性能优化必不可少的一部分。\n\n## 缓存\n\n*    Model 层缓存\n\n     通过手动设置可以将部分查询结果存储在对应的缓存系统中。\n\n     ```ruby\n     Rails.cache.fetch('all_products', expires_in: 1.days) do \n       Product.all.to_a\n     end\n     ```\n\n     **需要确认执行结果是否为最终的结果集**\n\n- #### Controller 层缓存\n\n  - ##### Action 缓存\n\n    缓存 Action Response，借助 Fragement Cache 和 Callback 实现。\n\n    可通过 before_action 加入各种验证机制。\n\n    ```\n    before_action :authentication, only: :show\n    cache_action :show, expires_in: 1.hour\n    ```\n\n    **该方法在 Rails4 已经移除了，可通过Gem包开启**\n\n  - ##### Page 缓存 (页面缓存)\n\n    将页面缓存成静态页面，无法进行权限认证等。\n\n    ```\n    class ProductsController < ActionController\n      caches_page :index\n    end\n    ```\n\n    **该方法在 Rails4 已经移除了，可通过Gem包开启**\n\n- #### View 层缓存\n\n  - ##### Fragement Cache (片段缓存)\n\n    随着页面复杂的程度的提高，已经无法做整页缓存，只能将其切割成不同的片段。\n\n    ```\n    - cache('xxx' , expires_in: 1.days ) do \n      %ul\n        = @product.name\n    ```\n\n    **片段缓存可以通过嵌套使用的方式形成特殊的俄罗斯套娃(Russian Doll Caching)**\n\n- #### SQL 缓存\n\n  这是 Rails 框架自带的一个特性，会缓存每一次查询的结果集。\n\n  ```\n  class ProductsController < ActionController\n    def index\n      # First Query\n      @products = Product.all\n      \n      # Second Query (Cache)\n      @products = Product.all\n    end\n  ```\n\n  当第二次查询时，会直接从内存中读取第一次查询缓存入内存的结果集。\b\n\n  **Tips: 缓存的有效时间是 action 的生命周期**\n\n## 配置\n\n```bash\n # 开启缓存\n config.action_controller.perform_caching = true\n # 缓存存储方式\n config.cache_store = :memory_store  # memory_store mem_cache_store file_store\n```\n\n","slug":"Raiils-Cache-Simple","published":1,"updated":"2018-05-11T03:46:58.794Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjh8jw4vr000z6b8k7t6sqrq5","content":"<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>合理的使用缓存可以很大程度上提高网站性能，是网站性能优化必不可少的一部分。</p>\n<h2 id=\"缓存\"><a href=\"#缓存\" class=\"headerlink\" title=\"缓存\"></a>缓存</h2><ul>\n<li><p>Model 层缓存</p>\n<p>通过手动设置可以将部分查询结果存储在对应的缓存系统中。</p>\n<figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Rails.cache.fetch(<span class=\"string\">'all_products'</span>, <span class=\"symbol\">expires_in:</span> <span class=\"number\">1</span>.days) <span class=\"keyword\">do</span> </span><br><span class=\"line\">  Product.all.to_a</span><br><span class=\"line\"><span class=\"keyword\">end</span></span><br></pre></td></tr></table></figure>\n<p><strong>需要确认执行结果是否为最终的结果集</strong></p>\n</li>\n</ul>\n<ul>\n<li><h4 id=\"Controller-层缓存\"><a href=\"#Controller-层缓存\" class=\"headerlink\" title=\"Controller 层缓存\"></a>Controller 层缓存</h4><ul>\n<li><h5 id=\"Action-缓存\"><a href=\"#Action-缓存\" class=\"headerlink\" title=\"Action 缓存\"></a>Action 缓存</h5><p>缓存 Action Response，借助 Fragement Cache 和 Callback 实现。</p>\n<p>可通过 before_action 加入各种验证机制。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">before_action :authentication, only: :show</span><br><span class=\"line\">cache_action :show, expires_in: 1.hour</span><br></pre></td></tr></table></figure>\n<p><strong>该方法在 Rails4 已经移除了，可通过Gem包开启</strong></p>\n</li>\n<li><h5 id=\"Page-缓存-页面缓存\"><a href=\"#Page-缓存-页面缓存\" class=\"headerlink\" title=\"Page 缓存 (页面缓存)\"></a>Page 缓存 (页面缓存)</h5><p>将页面缓存成静态页面，无法进行权限认证等。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">class ProductsController &lt; ActionController</span><br><span class=\"line\">  caches_page :index</span><br><span class=\"line\">end</span><br></pre></td></tr></table></figure>\n<p><strong>该方法在 Rails4 已经移除了，可通过Gem包开启</strong></p>\n</li>\n</ul>\n</li>\n<li><h4 id=\"View-层缓存\"><a href=\"#View-层缓存\" class=\"headerlink\" title=\"View 层缓存\"></a>View 层缓存</h4><ul>\n<li><h5 id=\"Fragement-Cache-片段缓存\"><a href=\"#Fragement-Cache-片段缓存\" class=\"headerlink\" title=\"Fragement Cache (片段缓存)\"></a>Fragement Cache (片段缓存)</h5><p>随着页面复杂的程度的提高，已经无法做整页缓存，只能将其切割成不同的片段。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">- cache(&apos;xxx&apos; , expires_in: 1.days ) do </span><br><span class=\"line\">  %ul</span><br><span class=\"line\">    = @product.name</span><br></pre></td></tr></table></figure>\n<p><strong>片段缓存可以通过嵌套使用的方式形成特殊的俄罗斯套娃(Russian Doll Caching)</strong></p>\n</li>\n</ul>\n</li>\n<li><h4 id=\"SQL-缓存\"><a href=\"#SQL-缓存\" class=\"headerlink\" title=\"SQL 缓存\"></a>SQL 缓存</h4><p>这是 Rails 框架自带的一个特性，会缓存每一次查询的结果集。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">class ProductsController &lt; ActionController</span><br><span class=\"line\">  def index</span><br><span class=\"line\">    # First Query</span><br><span class=\"line\">    @products = Product.all</span><br><span class=\"line\">    </span><br><span class=\"line\">    # Second Query (Cache)</span><br><span class=\"line\">    @products = Product.all</span><br><span class=\"line\">  end</span><br></pre></td></tr></table></figure>\n<p>当第二次查询时，会直接从内存中读取第一次查询缓存入内存的结果集。\b</p>\n<p><strong>Tips: 缓存的有效时间是 action 的生命周期</strong></p>\n</li>\n</ul>\n<h2 id=\"配置\"><a href=\"#配置\" class=\"headerlink\" title=\"配置\"></a>配置</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 开启缓存</span></span><br><span class=\"line\">config.action_controller.perform_caching = <span class=\"literal\">true</span></span><br><span class=\"line\"><span class=\"comment\"># 缓存存储方式</span></span><br><span class=\"line\">config.cache_store = :memory_store  <span class=\"comment\"># memory_store mem_cache_store file_store</span></span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>合理的使用缓存可以很大程度上提高网站性能，是网站性能优化必不可少的一部分。</p>\n<h2 id=\"缓存\"><a href=\"#缓存\" class=\"headerlink\" title=\"缓存\"></a>缓存</h2><ul>\n<li><p>Model 层缓存</p>\n<p>通过手动设置可以将部分查询结果存储在对应的缓存系统中。</p>\n<figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Rails.cache.fetch(<span class=\"string\">'all_products'</span>, <span class=\"symbol\">expires_in:</span> <span class=\"number\">1</span>.days) <span class=\"keyword\">do</span> </span><br><span class=\"line\">  Product.all.to_a</span><br><span class=\"line\"><span class=\"keyword\">end</span></span><br></pre></td></tr></table></figure>\n<p><strong>需要确认执行结果是否为最终的结果集</strong></p>\n</li>\n</ul>\n<ul>\n<li><h4 id=\"Controller-层缓存\"><a href=\"#Controller-层缓存\" class=\"headerlink\" title=\"Controller 层缓存\"></a>Controller 层缓存</h4><ul>\n<li><h5 id=\"Action-缓存\"><a href=\"#Action-缓存\" class=\"headerlink\" title=\"Action 缓存\"></a>Action 缓存</h5><p>缓存 Action Response，借助 Fragement Cache 和 Callback 实现。</p>\n<p>可通过 before_action 加入各种验证机制。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">before_action :authentication, only: :show</span><br><span class=\"line\">cache_action :show, expires_in: 1.hour</span><br></pre></td></tr></table></figure>\n<p><strong>该方法在 Rails4 已经移除了，可通过Gem包开启</strong></p>\n</li>\n<li><h5 id=\"Page-缓存-页面缓存\"><a href=\"#Page-缓存-页面缓存\" class=\"headerlink\" title=\"Page 缓存 (页面缓存)\"></a>Page 缓存 (页面缓存)</h5><p>将页面缓存成静态页面，无法进行权限认证等。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">class ProductsController &lt; ActionController</span><br><span class=\"line\">  caches_page :index</span><br><span class=\"line\">end</span><br></pre></td></tr></table></figure>\n<p><strong>该方法在 Rails4 已经移除了，可通过Gem包开启</strong></p>\n</li>\n</ul>\n</li>\n<li><h4 id=\"View-层缓存\"><a href=\"#View-层缓存\" class=\"headerlink\" title=\"View 层缓存\"></a>View 层缓存</h4><ul>\n<li><h5 id=\"Fragement-Cache-片段缓存\"><a href=\"#Fragement-Cache-片段缓存\" class=\"headerlink\" title=\"Fragement Cache (片段缓存)\"></a>Fragement Cache (片段缓存)</h5><p>随着页面复杂的程度的提高，已经无法做整页缓存，只能将其切割成不同的片段。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">- cache(&apos;xxx&apos; , expires_in: 1.days ) do </span><br><span class=\"line\">  %ul</span><br><span class=\"line\">    = @product.name</span><br></pre></td></tr></table></figure>\n<p><strong>片段缓存可以通过嵌套使用的方式形成特殊的俄罗斯套娃(Russian Doll Caching)</strong></p>\n</li>\n</ul>\n</li>\n<li><h4 id=\"SQL-缓存\"><a href=\"#SQL-缓存\" class=\"headerlink\" title=\"SQL 缓存\"></a>SQL 缓存</h4><p>这是 Rails 框架自带的一个特性，会缓存每一次查询的结果集。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">class ProductsController &lt; ActionController</span><br><span class=\"line\">  def index</span><br><span class=\"line\">    # First Query</span><br><span class=\"line\">    @products = Product.all</span><br><span class=\"line\">    </span><br><span class=\"line\">    # Second Query (Cache)</span><br><span class=\"line\">    @products = Product.all</span><br><span class=\"line\">  end</span><br></pre></td></tr></table></figure>\n<p>当第二次查询时，会直接从内存中读取第一次查询缓存入内存的结果集。\b</p>\n<p><strong>Tips: 缓存的有效时间是 action 的生命周期</strong></p>\n</li>\n</ul>\n<h2 id=\"配置\"><a href=\"#配置\" class=\"headerlink\" title=\"配置\"></a>配置</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 开启缓存</span></span><br><span class=\"line\">config.action_controller.perform_caching = <span class=\"literal\">true</span></span><br><span class=\"line\"><span class=\"comment\"># 缓存存储方式</span></span><br><span class=\"line\">config.cache_store = :memory_store  <span class=\"comment\"># memory_store mem_cache_store file_store</span></span><br></pre></td></tr></table></figure>\n"},{"title":"Siege 简介","date":"2016-10-24T06:46:29.000Z","description":"简单的介绍下压力测试工具 Siege 的参数","_content":"## 前言\n  [Siege](https://github.com/JoeDog/siege 'SIege') 是Linux 下一款压力测试和评测工具，设计用于 WEB 开发这评估应用在压力下的承受能力；可以配置针对一个 WEB 站点进行多用户的并发访问，记录每个用户所有请求过程的响应时间，并在一定数量的并发访问下重复进行。支持多链接，支持 GET 和 POST 请求。\n  \n## 安装\n * Mac OSX\n   ```bash\n    brew install siege\n   ```\n * Ubuntu\n   ```bash\n    aptitude install siege\n   ```\n\n## 参数介绍 \n```bash  \n-c:  模拟有Ｎ个用户在并发访问 \n\n-r:  重复测试运行Ｎ次 \n-t:  持续测试时间   默认为分钟   5s(持续5秒)  5 (持续5分钟)\n# -r和-t一般不同时使用\n\n-f:  任务的URL列表  \n-i:   随机访问-f指定的url.txt中的url列表项，以此模拟真实的访问情况(随机性)  \n\n-b:  进行压力测试，请求无需等待   delay=0\n\n-A:  指定访问的 User-Agent \n-H:  指定访问的 Header\n-T:  指定访问的 Content-Type\n```\n > ` siege -c 200 -r 100 http://www.google.com `\n > `siege  -c 200 -r 100 -f urls.txt`\n > `siege  -c 200 -r 100 -f urls.txt -i `\n > `siege -c 200 -r 100 -f urls.txt -i -b` delay=0，更准确的压力测试，而不是功能测试\n > `siege -H \"Content-Type:application/json\" -c 200 -r 100 -f urls.txt -i -b`\n\n## 结果说明\n \n  ```bash\n  Transactions:\t\t            20 hits            # 总共测试测试\n  Availability:\t\t            100.00 %           # 成功次数比\n  Elapsed time:\t\t            1.52 secs          # 总共耗时\n  Data transferred:\t            0.80 MB            # 总共数据传输\n  Response time:\t\t            0.14 secs          # 响应耗时\n  Transaction rate:\t            13.16 trans/sec    #  每秒处理请求数\n  Throughput:\t\t            0.52 MB/sec        # 吞吐率\n  Concurrency:\t\t            1.82               # 最高并发\n  Successful transactions:            20                 # 成功请求数\n  Failed transactions:                0                  # 失败请求数\n  Longest transaction:                0.51               # 每次传输的最长时间\n  Shortest transaction:               0.05               # 每次传输的最短时间\n```\n\n## Tips\n  > 发送 POST 请求时，URL 格式为：`http://www.xxxx.com/ POST p1=v1&p2=v2`\n\n  >  如果 URL 中含有空格和中文，要先进行编码\n\n","source":"_posts/Siege.md","raw":"---\ntitle: Siege 简介\ndate: 2016-10-24 14:46:29\ntags:\n  -  Server\n  -  Siege\ncategories:\n  -  Software\ndescription: 简单的介绍下压力测试工具 Siege 的参数\n---\n## 前言\n  [Siege](https://github.com/JoeDog/siege 'SIege') 是Linux 下一款压力测试和评测工具，设计用于 WEB 开发这评估应用在压力下的承受能力；可以配置针对一个 WEB 站点进行多用户的并发访问，记录每个用户所有请求过程的响应时间，并在一定数量的并发访问下重复进行。支持多链接，支持 GET 和 POST 请求。\n  \n## 安装\n * Mac OSX\n   ```bash\n    brew install siege\n   ```\n * Ubuntu\n   ```bash\n    aptitude install siege\n   ```\n\n## 参数介绍 \n```bash  \n-c:  模拟有Ｎ个用户在并发访问 \n\n-r:  重复测试运行Ｎ次 \n-t:  持续测试时间   默认为分钟   5s(持续5秒)  5 (持续5分钟)\n# -r和-t一般不同时使用\n\n-f:  任务的URL列表  \n-i:   随机访问-f指定的url.txt中的url列表项，以此模拟真实的访问情况(随机性)  \n\n-b:  进行压力测试，请求无需等待   delay=0\n\n-A:  指定访问的 User-Agent \n-H:  指定访问的 Header\n-T:  指定访问的 Content-Type\n```\n > ` siege -c 200 -r 100 http://www.google.com `\n > `siege  -c 200 -r 100 -f urls.txt`\n > `siege  -c 200 -r 100 -f urls.txt -i `\n > `siege -c 200 -r 100 -f urls.txt -i -b` delay=0，更准确的压力测试，而不是功能测试\n > `siege -H \"Content-Type:application/json\" -c 200 -r 100 -f urls.txt -i -b`\n\n## 结果说明\n \n  ```bash\n  Transactions:\t\t            20 hits            # 总共测试测试\n  Availability:\t\t            100.00 %           # 成功次数比\n  Elapsed time:\t\t            1.52 secs          # 总共耗时\n  Data transferred:\t            0.80 MB            # 总共数据传输\n  Response time:\t\t            0.14 secs          # 响应耗时\n  Transaction rate:\t            13.16 trans/sec    #  每秒处理请求数\n  Throughput:\t\t            0.52 MB/sec        # 吞吐率\n  Concurrency:\t\t            1.82               # 最高并发\n  Successful transactions:            20                 # 成功请求数\n  Failed transactions:                0                  # 失败请求数\n  Longest transaction:                0.51               # 每次传输的最长时间\n  Shortest transaction:               0.05               # 每次传输的最短时间\n```\n\n## Tips\n  > 发送 POST 请求时，URL 格式为：`http://www.xxxx.com/ POST p1=v1&p2=v2`\n\n  >  如果 URL 中含有空格和中文，要先进行编码\n\n","slug":"Siege","published":1,"updated":"2018-05-11T03:46:58.794Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjh8jw4vt00136b8kq9goe22h","content":"<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>  <a href=\"https://github.com/JoeDog/siege\" title=\"SIege\" target=\"_blank\" rel=\"noopener\">Siege</a> 是Linux 下一款压力测试和评测工具，设计用于 WEB 开发这评估应用在压力下的承受能力；可以配置针对一个 WEB 站点进行多用户的并发访问，记录每个用户所有请求过程的响应时间，并在一定数量的并发访问下重复进行。支持多链接，支持 GET 和 POST 请求。</p>\n<h2 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h2><ul>\n<li><p>Mac OSX</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">brew install siege</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>Ubuntu</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">aptitude install siege</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h2 id=\"参数介绍\"><a href=\"#参数介绍\" class=\"headerlink\" title=\"参数介绍\"></a>参数介绍</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">-c:  模拟有Ｎ个用户在并发访问 </span><br><span class=\"line\"></span><br><span class=\"line\">-r:  重复测试运行Ｎ次 </span><br><span class=\"line\">-t:  持续测试时间   默认为分钟   5s(持续5秒)  5 (持续5分钟)</span><br><span class=\"line\"><span class=\"comment\"># -r和-t一般不同时使用</span></span><br><span class=\"line\"></span><br><span class=\"line\">-f:  任务的URL列表  </span><br><span class=\"line\">-i:   随机访问-f指定的url.txt中的url列表项，以此模拟真实的访问情况(随机性)  </span><br><span class=\"line\"></span><br><span class=\"line\">-b:  进行压力测试，请求无需等待   delay=0</span><br><span class=\"line\"></span><br><span class=\"line\">-A:  指定访问的 User-Agent </span><br><span class=\"line\">-H:  指定访问的 Header</span><br><span class=\"line\">-T:  指定访问的 Content-Type</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p><code>siege -c 200 -r 100 http://www.google.com</code><br><code>siege  -c 200 -r 100 -f urls.txt</code><br><code>siege  -c 200 -r 100 -f urls.txt -i</code><br><code>siege -c 200 -r 100 -f urls.txt -i -b</code> delay=0，更准确的压力测试，而不是功能测试<br><code>siege -H &quot;Content-Type:application/json&quot; -c 200 -r 100 -f urls.txt -i -b</code></p>\n</blockquote>\n<h2 id=\"结果说明\"><a href=\"#结果说明\" class=\"headerlink\" title=\"结果说明\"></a>结果说明</h2>  <figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Transactions:\t\t            20 hits            <span class=\"comment\"># 总共测试测试</span></span><br><span class=\"line\">Availability:\t\t            100.00 %           <span class=\"comment\"># 成功次数比</span></span><br><span class=\"line\">Elapsed time:\t\t            1.52 secs          <span class=\"comment\"># 总共耗时</span></span><br><span class=\"line\">Data transferred:\t            0.80 MB            <span class=\"comment\"># 总共数据传输</span></span><br><span class=\"line\">Response time:\t\t            0.14 secs          <span class=\"comment\"># 响应耗时</span></span><br><span class=\"line\">Transaction rate:\t            13.16 trans/sec    <span class=\"comment\">#  每秒处理请求数</span></span><br><span class=\"line\">Throughput:\t\t            0.52 MB/sec        <span class=\"comment\"># 吞吐率</span></span><br><span class=\"line\">Concurrency:\t\t            1.82               <span class=\"comment\"># 最高并发</span></span><br><span class=\"line\">Successful transactions:            20                 <span class=\"comment\"># 成功请求数</span></span><br><span class=\"line\">Failed transactions:                0                  <span class=\"comment\"># 失败请求数</span></span><br><span class=\"line\">Longest transaction:                0.51               <span class=\"comment\"># 每次传输的最长时间</span></span><br><span class=\"line\">Shortest transaction:               0.05               <span class=\"comment\"># 每次传输的最短时间</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"Tips\"><a href=\"#Tips\" class=\"headerlink\" title=\"Tips\"></a>Tips</h2><blockquote>\n<p>发送 POST 请求时，URL 格式为：<code>http://www.xxxx.com/ POST p1=v1&amp;p2=v2</code></p>\n<p> 如果 URL 中含有空格和中文，要先进行编码</p>\n</blockquote>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>  <a href=\"https://github.com/JoeDog/siege\" title=\"SIege\" target=\"_blank\" rel=\"noopener\">Siege</a> 是Linux 下一款压力测试和评测工具，设计用于 WEB 开发这评估应用在压力下的承受能力；可以配置针对一个 WEB 站点进行多用户的并发访问，记录每个用户所有请求过程的响应时间，并在一定数量的并发访问下重复进行。支持多链接，支持 GET 和 POST 请求。</p>\n<h2 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h2><ul>\n<li><p>Mac OSX</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">brew install siege</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>Ubuntu</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">aptitude install siege</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h2 id=\"参数介绍\"><a href=\"#参数介绍\" class=\"headerlink\" title=\"参数介绍\"></a>参数介绍</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">-c:  模拟有Ｎ个用户在并发访问 </span><br><span class=\"line\"></span><br><span class=\"line\">-r:  重复测试运行Ｎ次 </span><br><span class=\"line\">-t:  持续测试时间   默认为分钟   5s(持续5秒)  5 (持续5分钟)</span><br><span class=\"line\"><span class=\"comment\"># -r和-t一般不同时使用</span></span><br><span class=\"line\"></span><br><span class=\"line\">-f:  任务的URL列表  </span><br><span class=\"line\">-i:   随机访问-f指定的url.txt中的url列表项，以此模拟真实的访问情况(随机性)  </span><br><span class=\"line\"></span><br><span class=\"line\">-b:  进行压力测试，请求无需等待   delay=0</span><br><span class=\"line\"></span><br><span class=\"line\">-A:  指定访问的 User-Agent </span><br><span class=\"line\">-H:  指定访问的 Header</span><br><span class=\"line\">-T:  指定访问的 Content-Type</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p><code>siege -c 200 -r 100 http://www.google.com</code><br><code>siege  -c 200 -r 100 -f urls.txt</code><br><code>siege  -c 200 -r 100 -f urls.txt -i</code><br><code>siege -c 200 -r 100 -f urls.txt -i -b</code> delay=0，更准确的压力测试，而不是功能测试<br><code>siege -H &quot;Content-Type:application/json&quot; -c 200 -r 100 -f urls.txt -i -b</code></p>\n</blockquote>\n<h2 id=\"结果说明\"><a href=\"#结果说明\" class=\"headerlink\" title=\"结果说明\"></a>结果说明</h2>  <figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Transactions:\t\t            20 hits            <span class=\"comment\"># 总共测试测试</span></span><br><span class=\"line\">Availability:\t\t            100.00 %           <span class=\"comment\"># 成功次数比</span></span><br><span class=\"line\">Elapsed time:\t\t            1.52 secs          <span class=\"comment\"># 总共耗时</span></span><br><span class=\"line\">Data transferred:\t            0.80 MB            <span class=\"comment\"># 总共数据传输</span></span><br><span class=\"line\">Response time:\t\t            0.14 secs          <span class=\"comment\"># 响应耗时</span></span><br><span class=\"line\">Transaction rate:\t            13.16 trans/sec    <span class=\"comment\">#  每秒处理请求数</span></span><br><span class=\"line\">Throughput:\t\t            0.52 MB/sec        <span class=\"comment\"># 吞吐率</span></span><br><span class=\"line\">Concurrency:\t\t            1.82               <span class=\"comment\"># 最高并发</span></span><br><span class=\"line\">Successful transactions:            20                 <span class=\"comment\"># 成功请求数</span></span><br><span class=\"line\">Failed transactions:                0                  <span class=\"comment\"># 失败请求数</span></span><br><span class=\"line\">Longest transaction:                0.51               <span class=\"comment\"># 每次传输的最长时间</span></span><br><span class=\"line\">Shortest transaction:               0.05               <span class=\"comment\"># 每次传输的最短时间</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"Tips\"><a href=\"#Tips\" class=\"headerlink\" title=\"Tips\"></a>Tips</h2><blockquote>\n<p>发送 POST 请求时，URL 格式为：<code>http://www.xxxx.com/ POST p1=v1&amp;p2=v2</code></p>\n<p> 如果 URL 中含有空格和中文，要先进行编码</p>\n</blockquote>\n"},{"title":"常用的软件 PPA 源","date":"2016-09-30T03:40:37.000Z","description":"整理了一些自己比较常用的PPA源做备份使用，后期将持续更新。","_content":"\n## 前言\n\n整理了一些自己比较常用的PPA源做备份使用，后期将持续更新。\n\n## 详情\n### Nginx\n```bash\nadd-apt-repository ppa:nginx/stable\n## /etc/apt/sources.list\ndeb http://ppa.launchpad.net/nginx/stable/ubuntu xenial main \n\napt-add-repository ppa:nginx/development\n## /etc/apt/sources.list\ndeb http://ppa.launchpad.net/nginx/development/ubuntu xenial main \n```\n### MySQL\n```bash\nadd-apt-repository ppa:ondrej/mysql-5.7\n## /etc/apt/sources.list\ndeb http://ppa.launchpad.net/ondrej/mysql-5.7/ubuntu xenial main \n```\n### PHP70\n```bash \nadd-apt-repository ppa:ondrej/php\n## /etc/apt/sources.list\ndeb http://ppa.launchpad.net/ondrej/php/ubuntu xenial main\n```\n### Git\n```bash\nadd-apt-repository ppa:git-core/ppa\n## /etc/apt/sources.list\ndeb http://ppa.launchpad.net/git-core/ppa/ubuntu xenial main \ndeb-src http://ppa.launchpad.net/git-core/ppa/ubuntu xenial main \n```\n\n\n## Tips\n```bash\nUnicodeDecodeError: 'ascii' codec can't decode byte 0xc5 in position 92: ordinal not in range(128)\n```\n解决方案\n```bash\nLC_ALL=C.UTF-8 add-apt-repository xxx\n```\n***\n```bash\nThe program 'add-apt-repository' is currently not installed. You can install it by typing:\napt-get install software-properties-common\n```\n解决方案\n```bash\napt-get install software-properties-common\n```","source":"_posts/Software-PPA-Sources.md","raw":"---\ntitle: 常用的软件 PPA 源\ndate: 2016-09-30 11:40:37\ntags:\n  - Ubuntu\n  - Software\n  - PPA\n  - Sources\ncategories:\n  - Software\ndescription: 整理了一些自己比较常用的PPA源做备份使用，后期将持续更新。\n---\n\n## 前言\n\n整理了一些自己比较常用的PPA源做备份使用，后期将持续更新。\n\n## 详情\n### Nginx\n```bash\nadd-apt-repository ppa:nginx/stable\n## /etc/apt/sources.list\ndeb http://ppa.launchpad.net/nginx/stable/ubuntu xenial main \n\napt-add-repository ppa:nginx/development\n## /etc/apt/sources.list\ndeb http://ppa.launchpad.net/nginx/development/ubuntu xenial main \n```\n### MySQL\n```bash\nadd-apt-repository ppa:ondrej/mysql-5.7\n## /etc/apt/sources.list\ndeb http://ppa.launchpad.net/ondrej/mysql-5.7/ubuntu xenial main \n```\n### PHP70\n```bash \nadd-apt-repository ppa:ondrej/php\n## /etc/apt/sources.list\ndeb http://ppa.launchpad.net/ondrej/php/ubuntu xenial main\n```\n### Git\n```bash\nadd-apt-repository ppa:git-core/ppa\n## /etc/apt/sources.list\ndeb http://ppa.launchpad.net/git-core/ppa/ubuntu xenial main \ndeb-src http://ppa.launchpad.net/git-core/ppa/ubuntu xenial main \n```\n\n\n## Tips\n```bash\nUnicodeDecodeError: 'ascii' codec can't decode byte 0xc5 in position 92: ordinal not in range(128)\n```\n解决方案\n```bash\nLC_ALL=C.UTF-8 add-apt-repository xxx\n```\n***\n```bash\nThe program 'add-apt-repository' is currently not installed. You can install it by typing:\napt-get install software-properties-common\n```\n解决方案\n```bash\napt-get install software-properties-common\n```","slug":"Software-PPA-Sources","published":1,"updated":"2018-05-11T03:46:58.794Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjh8jw4vu00156b8kzlwo8n9q","content":"<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>整理了一些自己比较常用的PPA源做备份使用，后期将持续更新。</p>\n<h2 id=\"详情\"><a href=\"#详情\" class=\"headerlink\" title=\"详情\"></a>详情</h2><h3 id=\"Nginx\"><a href=\"#Nginx\" class=\"headerlink\" title=\"Nginx\"></a>Nginx</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">add-apt-repository ppa:nginx/stable</span><br><span class=\"line\"><span class=\"comment\">## /etc/apt/sources.list</span></span><br><span class=\"line\">deb http://ppa.launchpad.net/nginx/stable/ubuntu xenial main </span><br><span class=\"line\"></span><br><span class=\"line\">apt-add-repository ppa:nginx/development</span><br><span class=\"line\"><span class=\"comment\">## /etc/apt/sources.list</span></span><br><span class=\"line\">deb http://ppa.launchpad.net/nginx/development/ubuntu xenial main</span><br></pre></td></tr></table></figure>\n<h3 id=\"MySQL\"><a href=\"#MySQL\" class=\"headerlink\" title=\"MySQL\"></a>MySQL</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">add-apt-repository ppa:ondrej/mysql-5.7</span><br><span class=\"line\"><span class=\"comment\">## /etc/apt/sources.list</span></span><br><span class=\"line\">deb http://ppa.launchpad.net/ondrej/mysql-5.7/ubuntu xenial main</span><br></pre></td></tr></table></figure>\n<h3 id=\"PHP70\"><a href=\"#PHP70\" class=\"headerlink\" title=\"PHP70\"></a>PHP70</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">add-apt-repository ppa:ondrej/php</span><br><span class=\"line\"><span class=\"comment\">## /etc/apt/sources.list</span></span><br><span class=\"line\">deb http://ppa.launchpad.net/ondrej/php/ubuntu xenial main</span><br></pre></td></tr></table></figure>\n<h3 id=\"Git\"><a href=\"#Git\" class=\"headerlink\" title=\"Git\"></a>Git</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">add-apt-repository ppa:git-core/ppa</span><br><span class=\"line\"><span class=\"comment\">## /etc/apt/sources.list</span></span><br><span class=\"line\">deb http://ppa.launchpad.net/git-core/ppa/ubuntu xenial main </span><br><span class=\"line\">deb-src http://ppa.launchpad.net/git-core/ppa/ubuntu xenial main</span><br></pre></td></tr></table></figure>\n<h2 id=\"Tips\"><a href=\"#Tips\" class=\"headerlink\" title=\"Tips\"></a>Tips</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">UnicodeDecodeError: <span class=\"string\">'ascii'</span> codec can<span class=\"string\">'t decode byte 0xc5 in position 92: ordinal not in range(128)</span></span><br></pre></td></tr></table></figure>\n<p>解决方案<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">LC_ALL=C.UTF-8 add-apt-repository xxx</span><br></pre></td></tr></table></figure></p>\n<hr>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">The program <span class=\"string\">'add-apt-repository'</span> is currently not installed. You can install it by typing:</span><br><span class=\"line\">apt-get install software-properties-common</span><br></pre></td></tr></table></figure>\n<p>解决方案<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">apt-get install software-properties-common</span><br></pre></td></tr></table></figure></p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>整理了一些自己比较常用的PPA源做备份使用，后期将持续更新。</p>\n<h2 id=\"详情\"><a href=\"#详情\" class=\"headerlink\" title=\"详情\"></a>详情</h2><h3 id=\"Nginx\"><a href=\"#Nginx\" class=\"headerlink\" title=\"Nginx\"></a>Nginx</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">add-apt-repository ppa:nginx/stable</span><br><span class=\"line\"><span class=\"comment\">## /etc/apt/sources.list</span></span><br><span class=\"line\">deb http://ppa.launchpad.net/nginx/stable/ubuntu xenial main </span><br><span class=\"line\"></span><br><span class=\"line\">apt-add-repository ppa:nginx/development</span><br><span class=\"line\"><span class=\"comment\">## /etc/apt/sources.list</span></span><br><span class=\"line\">deb http://ppa.launchpad.net/nginx/development/ubuntu xenial main</span><br></pre></td></tr></table></figure>\n<h3 id=\"MySQL\"><a href=\"#MySQL\" class=\"headerlink\" title=\"MySQL\"></a>MySQL</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">add-apt-repository ppa:ondrej/mysql-5.7</span><br><span class=\"line\"><span class=\"comment\">## /etc/apt/sources.list</span></span><br><span class=\"line\">deb http://ppa.launchpad.net/ondrej/mysql-5.7/ubuntu xenial main</span><br></pre></td></tr></table></figure>\n<h3 id=\"PHP70\"><a href=\"#PHP70\" class=\"headerlink\" title=\"PHP70\"></a>PHP70</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">add-apt-repository ppa:ondrej/php</span><br><span class=\"line\"><span class=\"comment\">## /etc/apt/sources.list</span></span><br><span class=\"line\">deb http://ppa.launchpad.net/ondrej/php/ubuntu xenial main</span><br></pre></td></tr></table></figure>\n<h3 id=\"Git\"><a href=\"#Git\" class=\"headerlink\" title=\"Git\"></a>Git</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">add-apt-repository ppa:git-core/ppa</span><br><span class=\"line\"><span class=\"comment\">## /etc/apt/sources.list</span></span><br><span class=\"line\">deb http://ppa.launchpad.net/git-core/ppa/ubuntu xenial main </span><br><span class=\"line\">deb-src http://ppa.launchpad.net/git-core/ppa/ubuntu xenial main</span><br></pre></td></tr></table></figure>\n<h2 id=\"Tips\"><a href=\"#Tips\" class=\"headerlink\" title=\"Tips\"></a>Tips</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">UnicodeDecodeError: <span class=\"string\">'ascii'</span> codec can<span class=\"string\">'t decode byte 0xc5 in position 92: ordinal not in range(128)</span></span><br></pre></td></tr></table></figure>\n<p>解决方案<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">LC_ALL=C.UTF-8 add-apt-repository xxx</span><br></pre></td></tr></table></figure></p>\n<hr>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">The program <span class=\"string\">'add-apt-repository'</span> is currently not installed. You can install it by typing:</span><br><span class=\"line\">apt-get install software-properties-common</span><br></pre></td></tr></table></figure>\n<p>解决方案<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">apt-get install software-properties-common</span><br></pre></td></tr></table></figure></p>\n"},{"title":"Ubuntu 下增加 Swap","date":"2016-10-21T02:29:11.000Z","description":"现在很多 Ubuntu 系统的 VPS 默认是不开启 Swap ，或者 Swap 大小不足。本文介绍如何在 Ubuntu 系统下增加 Swap。","_content":"## 前言\n\n### 什么是Swap\n   Linux 系统中的 Swap ，又名交换空间。是类似于 Windows 系统的虚拟内存 (pagefile.sys)，当内存不够用的时候会把一部分硬盘空间虚拟成内存，用来存储内存中暂时不使用的数据。\n   \n## 安装\n1. #### 查看\n   ```bash\n   free -m\n   ```\n   ```bash\n                total       used       free     shared    buffers     cached\n   Mem:          3952       2035       1916          9        217       1392\n   -/+ buffers/cache:        425       3526\n   Swap:            0          0          0\n   ```\n   可以看到 Swap 没有开启，下面我们来将其增加到内存大小 (4G)。\n   \n2. #### 创建 Swap 文件\n    ```bash\n    mkdir swap\n    \n    cd swap\n    \n    sudo dd if=/dev/zero of=swapfile bs=1024 count=4M   # bs 表示块大小  count 表示块数目  1024 * 4M  = 4G\n    # 4194304+0 records in\n    # 4194304+0 records out\n    # 4294967296 bytes (4.3 GB) copied, 88.3999 s, 48.6 MB/s\n    ```\n    把文件转换成 Swap 文件\n    ```bash\n    sudo mkswap -f  swapfile \n    # Setting up swapspace version 1, size = 4194300 KiB\n    # no label, UUID=bebbcbad-dda2-49f9-9aab-4b24b1d62d87\n    ```\n3. #### 激活 Swap \n    ```bash\n    sudo swapon swapfile\n    ```\n     查看激活情况\n    ```bash\n    free -m  \n    ```\n    ```bash\n                 total       used       free     shared    buffers     cached\n    Mem:          3952       3842        109          9          1       3369\n    -/+ buffers/cache:        470       3481\n    Swap:         4095          0       4095\n    ```\n4. #### 配置\n    * 修改swappiness\n      swappiness 为 0 - 100的数值，数值越大表示越积极的去使用 Swap。\n      \n      - 暂时修改\n        ```bash\n        sudo sysctl vm.swappiness=40\n        ```\n      - 永久修改\n         ```bash\n         sudo vim /etc/sysctl.conf\n         # 增加一行\n         vm.swappiness = 40\n         ```\n    * 修改权限\n         设置成只有 root 用户具有读写权限\n         ```bash\n         sudo chown root:root /swap/swapfile\n         sudo chmod 0600 /swap/swapfile\n         ```\n5. #### 开机启动\n    ```bash\n    sudo vim /etc/fstab\n    ```\n    在文件最后面添加\n    ```bash\n    /swap/swapfile       none    swap    sw      0       0\n    ```","source":"_posts/Ubuntu-Swap.md","raw":"---\ntitle: Ubuntu 下增加 Swap \ndate: 2016-10-21 10:29:11\ntags:\n  - Ubuntu\n  - Swap\n  - Server\ncategories:\n  - Server\ndescription: 现在很多 Ubuntu 系统的 VPS 默认是不开启 Swap ，或者 Swap 大小不足。本文介绍如何在 Ubuntu 系统下增加 Swap。\n---\n## 前言\n\n### 什么是Swap\n   Linux 系统中的 Swap ，又名交换空间。是类似于 Windows 系统的虚拟内存 (pagefile.sys)，当内存不够用的时候会把一部分硬盘空间虚拟成内存，用来存储内存中暂时不使用的数据。\n   \n## 安装\n1. #### 查看\n   ```bash\n   free -m\n   ```\n   ```bash\n                total       used       free     shared    buffers     cached\n   Mem:          3952       2035       1916          9        217       1392\n   -/+ buffers/cache:        425       3526\n   Swap:            0          0          0\n   ```\n   可以看到 Swap 没有开启，下面我们来将其增加到内存大小 (4G)。\n   \n2. #### 创建 Swap 文件\n    ```bash\n    mkdir swap\n    \n    cd swap\n    \n    sudo dd if=/dev/zero of=swapfile bs=1024 count=4M   # bs 表示块大小  count 表示块数目  1024 * 4M  = 4G\n    # 4194304+0 records in\n    # 4194304+0 records out\n    # 4294967296 bytes (4.3 GB) copied, 88.3999 s, 48.6 MB/s\n    ```\n    把文件转换成 Swap 文件\n    ```bash\n    sudo mkswap -f  swapfile \n    # Setting up swapspace version 1, size = 4194300 KiB\n    # no label, UUID=bebbcbad-dda2-49f9-9aab-4b24b1d62d87\n    ```\n3. #### 激活 Swap \n    ```bash\n    sudo swapon swapfile\n    ```\n     查看激活情况\n    ```bash\n    free -m  \n    ```\n    ```bash\n                 total       used       free     shared    buffers     cached\n    Mem:          3952       3842        109          9          1       3369\n    -/+ buffers/cache:        470       3481\n    Swap:         4095          0       4095\n    ```\n4. #### 配置\n    * 修改swappiness\n      swappiness 为 0 - 100的数值，数值越大表示越积极的去使用 Swap。\n      \n      - 暂时修改\n        ```bash\n        sudo sysctl vm.swappiness=40\n        ```\n      - 永久修改\n         ```bash\n         sudo vim /etc/sysctl.conf\n         # 增加一行\n         vm.swappiness = 40\n         ```\n    * 修改权限\n         设置成只有 root 用户具有读写权限\n         ```bash\n         sudo chown root:root /swap/swapfile\n         sudo chmod 0600 /swap/swapfile\n         ```\n5. #### 开机启动\n    ```bash\n    sudo vim /etc/fstab\n    ```\n    在文件最后面添加\n    ```bash\n    /swap/swapfile       none    swap    sw      0       0\n    ```","slug":"Ubuntu-Swap","published":1,"updated":"2018-05-11T03:46:58.794Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjh8jw4vx00196b8koi99i3bl","content":"<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><h3 id=\"什么是Swap\"><a href=\"#什么是Swap\" class=\"headerlink\" title=\"什么是Swap\"></a>什么是Swap</h3><p>   Linux 系统中的 Swap ，又名交换空间。是类似于 Windows 系统的虚拟内存 (pagefile.sys)，当内存不够用的时候会把一部分硬盘空间虚拟成内存，用来存储内存中暂时不使用的数据。</p>\n<h2 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h2><ol>\n<li><h4 id=\"查看\"><a href=\"#查看\" class=\"headerlink\" title=\"查看\"></a>查看</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">free -m</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">             total       used       free     shared    buffers     cached</span><br><span class=\"line\">Mem:          3952       2035       1916          9        217       1392</span><br><span class=\"line\">-/+ buffers/cache:        425       3526</span><br><span class=\"line\">Swap:            0          0          0</span><br></pre></td></tr></table></figure>\n<p>可以看到 Swap 没有开启，下面我们来将其增加到内存大小 (4G)。</p>\n</li>\n<li><h4 id=\"创建-Swap-文件\"><a href=\"#创建-Swap-文件\" class=\"headerlink\" title=\"创建 Swap 文件\"></a>创建 Swap 文件</h4> <figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mkdir swap</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">cd</span> swap</span><br><span class=\"line\"></span><br><span class=\"line\">sudo dd <span class=\"keyword\">if</span>=/dev/zero of=swapfile bs=1024 count=4M   <span class=\"comment\"># bs 表示块大小  count 表示块数目  1024 * 4M  = 4G</span></span><br><span class=\"line\"><span class=\"comment\"># 4194304+0 records in</span></span><br><span class=\"line\"><span class=\"comment\"># 4194304+0 records out</span></span><br><span class=\"line\"><span class=\"comment\"># 4294967296 bytes (4.3 GB) copied, 88.3999 s, 48.6 MB/s</span></span><br></pre></td></tr></table></figure>\n<p> 把文件转换成 Swap 文件</p>\n <figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo mkswap -f  swapfile </span><br><span class=\"line\"><span class=\"comment\"># Setting up swapspace version 1, size = 4194300 KiB</span></span><br><span class=\"line\"><span class=\"comment\"># no label, UUID=bebbcbad-dda2-49f9-9aab-4b24b1d62d87</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><h4 id=\"激活-Swap\"><a href=\"#激活-Swap\" class=\"headerlink\" title=\"激活 Swap\"></a>激活 Swap</h4> <figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo swapon swapfile</span><br></pre></td></tr></table></figure>\n<p>  查看激活情况</p>\n <figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">free -m</span><br></pre></td></tr></table></figure>\n <figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">             total       used       free     shared    buffers     cached</span><br><span class=\"line\">Mem:          3952       3842        109          9          1       3369</span><br><span class=\"line\">-/+ buffers/cache:        470       3481</span><br><span class=\"line\">Swap:         4095          0       4095</span><br></pre></td></tr></table></figure>\n</li>\n<li><h4 id=\"配置\"><a href=\"#配置\" class=\"headerlink\" title=\"配置\"></a>配置</h4><ul>\n<li><p>修改swappiness<br>swappiness 为 0 - 100的数值，数值越大表示越积极的去使用 Swap。</p>\n<ul>\n<li><p>暂时修改</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo sysctl vm.swappiness=40</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>永久修改</p>\n <figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo vim /etc/sysctl.conf</span><br><span class=\"line\"><span class=\"comment\"># 增加一行</span></span><br><span class=\"line\">vm.swappiness = 40</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n</li>\n<li><p>修改权限<br>   设置成只有 root 用户具有读写权限</p>\n   <figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo chown root:root /swap/swapfile</span><br><span class=\"line\">sudo chmod 0600 /swap/swapfile</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n</li>\n<li><h4 id=\"开机启动\"><a href=\"#开机启动\" class=\"headerlink\" title=\"开机启动\"></a>开机启动</h4> <figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo vim /etc/fstab</span><br></pre></td></tr></table></figure>\n<p> 在文件最后面添加</p>\n <figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/swap/swapfile       none    swap    sw      0       0</span><br></pre></td></tr></table></figure></li>\n</ol>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><h3 id=\"什么是Swap\"><a href=\"#什么是Swap\" class=\"headerlink\" title=\"什么是Swap\"></a>什么是Swap</h3><p>   Linux 系统中的 Swap ，又名交换空间。是类似于 Windows 系统的虚拟内存 (pagefile.sys)，当内存不够用的时候会把一部分硬盘空间虚拟成内存，用来存储内存中暂时不使用的数据。</p>\n<h2 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h2><ol>\n<li><h4 id=\"查看\"><a href=\"#查看\" class=\"headerlink\" title=\"查看\"></a>查看</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">free -m</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">             total       used       free     shared    buffers     cached</span><br><span class=\"line\">Mem:          3952       2035       1916          9        217       1392</span><br><span class=\"line\">-/+ buffers/cache:        425       3526</span><br><span class=\"line\">Swap:            0          0          0</span><br></pre></td></tr></table></figure>\n<p>可以看到 Swap 没有开启，下面我们来将其增加到内存大小 (4G)。</p>\n</li>\n<li><h4 id=\"创建-Swap-文件\"><a href=\"#创建-Swap-文件\" class=\"headerlink\" title=\"创建 Swap 文件\"></a>创建 Swap 文件</h4> <figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mkdir swap</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">cd</span> swap</span><br><span class=\"line\"></span><br><span class=\"line\">sudo dd <span class=\"keyword\">if</span>=/dev/zero of=swapfile bs=1024 count=4M   <span class=\"comment\"># bs 表示块大小  count 表示块数目  1024 * 4M  = 4G</span></span><br><span class=\"line\"><span class=\"comment\"># 4194304+0 records in</span></span><br><span class=\"line\"><span class=\"comment\"># 4194304+0 records out</span></span><br><span class=\"line\"><span class=\"comment\"># 4294967296 bytes (4.3 GB) copied, 88.3999 s, 48.6 MB/s</span></span><br></pre></td></tr></table></figure>\n<p> 把文件转换成 Swap 文件</p>\n <figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo mkswap -f  swapfile </span><br><span class=\"line\"><span class=\"comment\"># Setting up swapspace version 1, size = 4194300 KiB</span></span><br><span class=\"line\"><span class=\"comment\"># no label, UUID=bebbcbad-dda2-49f9-9aab-4b24b1d62d87</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><h4 id=\"激活-Swap\"><a href=\"#激活-Swap\" class=\"headerlink\" title=\"激活 Swap\"></a>激活 Swap</h4> <figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo swapon swapfile</span><br></pre></td></tr></table></figure>\n<p>  查看激活情况</p>\n <figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">free -m</span><br></pre></td></tr></table></figure>\n <figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">             total       used       free     shared    buffers     cached</span><br><span class=\"line\">Mem:          3952       3842        109          9          1       3369</span><br><span class=\"line\">-/+ buffers/cache:        470       3481</span><br><span class=\"line\">Swap:         4095          0       4095</span><br></pre></td></tr></table></figure>\n</li>\n<li><h4 id=\"配置\"><a href=\"#配置\" class=\"headerlink\" title=\"配置\"></a>配置</h4><ul>\n<li><p>修改swappiness<br>swappiness 为 0 - 100的数值，数值越大表示越积极的去使用 Swap。</p>\n<ul>\n<li><p>暂时修改</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo sysctl vm.swappiness=40</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>永久修改</p>\n <figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo vim /etc/sysctl.conf</span><br><span class=\"line\"><span class=\"comment\"># 增加一行</span></span><br><span class=\"line\">vm.swappiness = 40</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n</li>\n<li><p>修改权限<br>   设置成只有 root 用户具有读写权限</p>\n   <figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo chown root:root /swap/swapfile</span><br><span class=\"line\">sudo chmod 0600 /swap/swapfile</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n</li>\n<li><h4 id=\"开机启动\"><a href=\"#开机启动\" class=\"headerlink\" title=\"开机启动\"></a>开机启动</h4> <figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo vim /etc/fstab</span><br></pre></td></tr></table></figure>\n<p> 在文件最后面添加</p>\n <figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/swap/swapfile       none    swap    sw      0       0</span><br></pre></td></tr></table></figure></li>\n</ol>\n"},{"title":"Mac OS 下安装 rbenv","date":"2016-12-26T08:41:17.000Z","description":"rbenv 和 rvm 用来管理多个版本的 ruby 安装和使用。","_content":"\n## 简介\n\n目前Mac OS 下面有两种Ruby 版本的工具，分别是 RVM 和 rbenv，本文主要介绍如何安装和使用 rbenv，并通过它来管理 Ruby 环境\n\n## 安装\n\n### 安装\n\n```\nbrew install rbenv\nbrew install ruby-build\nbrew install rbenv-gemset\nbrew install rbenv-gem-rehash\n```\n\n### 初始化\n\n```\necho 'export PATH=\"$HOME/.rbenv/bin:$PATH\"' >> ~/.bashrc\necho 'eval \"$(rbenv init -)\"' >> ~/.bashrc\n\n# 如果使用的是 Zsh  \necho 'export PATH=\"$HOME/.rbenv/bin:$PATH\"' >> ~/.zshrc\necho 'eval \"$(rbenv init -)\"' >> ~/.zshrc\n```\n\n### 安装Ruby\n\n```shell\n# 查看可用版本\nrbenv install --list\n\n# 安装2.4.0\nrbenv install 2.4.0\n\n# 查看已安装版本\nrbenv versions\n#  system\n#   2.1.5\n#   2.2.1\n# * 2.2.4 (set by /Users/Robbs/.rbenv/version)\n\n# 设置全局版本\nrbenv global 2.4.0\n\n# 设置本地版本\nrbenv local 2.4.0\n\n# 取消设置\nrbenv local --unset\n\n# 设置当前终端版本\nrbenv shell 2.4.0\n\n# 使用系统Ruby\nrbenv global system\n\n# 每当切换ruby版本和执行bundle install之后必须执行这个命令\nrbenv rehash\n\n# 卸载Ruby\nrbenv uninstall 2.4.0\n```\n\n### 切换镜像\n\n```shell\n# rbenv-china-mirror\ngit clone https://github.com/andorchen/rbenv-china-mirror.git ~/.rbenv/plugins/rbenv-china-mirror\n```","source":"_posts/Use-Brew-Install-Rbenv.md","raw":"---\ntitle: Mac OS 下安装 rbenv\ndate: 2016-12-26 16:41:17\ntags:\n- rbenv\n- brew\n- ruby\ncategories: Software\ndescription: rbenv 和 rvm 用来管理多个版本的 ruby 安装和使用。\n---\n\n## 简介\n\n目前Mac OS 下面有两种Ruby 版本的工具，分别是 RVM 和 rbenv，本文主要介绍如何安装和使用 rbenv，并通过它来管理 Ruby 环境\n\n## 安装\n\n### 安装\n\n```\nbrew install rbenv\nbrew install ruby-build\nbrew install rbenv-gemset\nbrew install rbenv-gem-rehash\n```\n\n### 初始化\n\n```\necho 'export PATH=\"$HOME/.rbenv/bin:$PATH\"' >> ~/.bashrc\necho 'eval \"$(rbenv init -)\"' >> ~/.bashrc\n\n# 如果使用的是 Zsh  \necho 'export PATH=\"$HOME/.rbenv/bin:$PATH\"' >> ~/.zshrc\necho 'eval \"$(rbenv init -)\"' >> ~/.zshrc\n```\n\n### 安装Ruby\n\n```shell\n# 查看可用版本\nrbenv install --list\n\n# 安装2.4.0\nrbenv install 2.4.0\n\n# 查看已安装版本\nrbenv versions\n#  system\n#   2.1.5\n#   2.2.1\n# * 2.2.4 (set by /Users/Robbs/.rbenv/version)\n\n# 设置全局版本\nrbenv global 2.4.0\n\n# 设置本地版本\nrbenv local 2.4.0\n\n# 取消设置\nrbenv local --unset\n\n# 设置当前终端版本\nrbenv shell 2.4.0\n\n# 使用系统Ruby\nrbenv global system\n\n# 每当切换ruby版本和执行bundle install之后必须执行这个命令\nrbenv rehash\n\n# 卸载Ruby\nrbenv uninstall 2.4.0\n```\n\n### 切换镜像\n\n```shell\n# rbenv-china-mirror\ngit clone https://github.com/andorchen/rbenv-china-mirror.git ~/.rbenv/plugins/rbenv-china-mirror\n```","slug":"Use-Brew-Install-Rbenv","published":1,"updated":"2018-05-11T03:46:58.795Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjh8jw4vy001c6b8kb1np2ylm","content":"<h2 id=\"简介\"><a href=\"#简介\" class=\"headerlink\" title=\"简介\"></a>简介</h2><p>目前Mac OS 下面有两种Ruby 版本的工具，分别是 RVM 和 rbenv，本文主要介绍如何安装和使用 rbenv，并通过它来管理 Ruby 环境</p>\n<h2 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h2><h3 id=\"安装-1\"><a href=\"#安装-1\" class=\"headerlink\" title=\"安装\"></a>安装</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">brew install rbenv</span><br><span class=\"line\">brew install ruby-build</span><br><span class=\"line\">brew install rbenv-gemset</span><br><span class=\"line\">brew install rbenv-gem-rehash</span><br></pre></td></tr></table></figure>\n<h3 id=\"初始化\"><a href=\"#初始化\" class=\"headerlink\" title=\"初始化\"></a>初始化</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">echo &apos;export PATH=&quot;$HOME/.rbenv/bin:$PATH&quot;&apos; &gt;&gt; ~/.bashrc</span><br><span class=\"line\">echo &apos;eval &quot;$(rbenv init -)&quot;&apos; &gt;&gt; ~/.bashrc</span><br><span class=\"line\"></span><br><span class=\"line\"># 如果使用的是 Zsh  </span><br><span class=\"line\">echo &apos;export PATH=&quot;$HOME/.rbenv/bin:$PATH&quot;&apos; &gt;&gt; ~/.zshrc</span><br><span class=\"line\">echo &apos;eval &quot;$(rbenv init -)&quot;&apos; &gt;&gt; ~/.zshrc</span><br></pre></td></tr></table></figure>\n<h3 id=\"安装Ruby\"><a href=\"#安装Ruby\" class=\"headerlink\" title=\"安装Ruby\"></a>安装Ruby</h3><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 查看可用版本</span></span><br><span class=\"line\">rbenv install --list</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 安装2.4.0</span></span><br><span class=\"line\">rbenv install 2.4.0</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 查看已安装版本</span></span><br><span class=\"line\">rbenv versions</span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">  system</span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">   2.1.5</span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">   2.2.1</span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> * 2.2.4 (<span class=\"built_in\">set</span> by /Users/Robbs/.rbenv/version)</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 设置全局版本</span></span><br><span class=\"line\">rbenv global 2.4.0</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 设置本地版本</span></span><br><span class=\"line\">rbenv local 2.4.0</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 取消设置</span></span><br><span class=\"line\">rbenv local --unset</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 设置当前终端版本</span></span><br><span class=\"line\">rbenv shell 2.4.0</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 使用系统Ruby</span></span><br><span class=\"line\">rbenv global system</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 每当切换ruby版本和执行bundle install之后必须执行这个命令</span></span><br><span class=\"line\">rbenv rehash</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 卸载Ruby</span></span><br><span class=\"line\">rbenv uninstall 2.4.0</span><br></pre></td></tr></table></figure>\n<h3 id=\"切换镜像\"><a href=\"#切换镜像\" class=\"headerlink\" title=\"切换镜像\"></a>切换镜像</h3><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> rbenv-china-mirror</span></span><br><span class=\"line\">git clone https://github.com/andorchen/rbenv-china-mirror.git ~/.rbenv/plugins/rbenv-china-mirror</span><br></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"","more":"<h2 id=\"简介\"><a href=\"#简介\" class=\"headerlink\" title=\"简介\"></a>简介</h2><p>目前Mac OS 下面有两种Ruby 版本的工具，分别是 RVM 和 rbenv，本文主要介绍如何安装和使用 rbenv，并通过它来管理 Ruby 环境</p>\n<h2 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h2><h3 id=\"安装-1\"><a href=\"#安装-1\" class=\"headerlink\" title=\"安装\"></a>安装</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">brew install rbenv</span><br><span class=\"line\">brew install ruby-build</span><br><span class=\"line\">brew install rbenv-gemset</span><br><span class=\"line\">brew install rbenv-gem-rehash</span><br></pre></td></tr></table></figure>\n<h3 id=\"初始化\"><a href=\"#初始化\" class=\"headerlink\" title=\"初始化\"></a>初始化</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">echo &apos;export PATH=&quot;$HOME/.rbenv/bin:$PATH&quot;&apos; &gt;&gt; ~/.bashrc</span><br><span class=\"line\">echo &apos;eval &quot;$(rbenv init -)&quot;&apos; &gt;&gt; ~/.bashrc</span><br><span class=\"line\"></span><br><span class=\"line\"># 如果使用的是 Zsh  </span><br><span class=\"line\">echo &apos;export PATH=&quot;$HOME/.rbenv/bin:$PATH&quot;&apos; &gt;&gt; ~/.zshrc</span><br><span class=\"line\">echo &apos;eval &quot;$(rbenv init -)&quot;&apos; &gt;&gt; ~/.zshrc</span><br></pre></td></tr></table></figure>\n<h3 id=\"安装Ruby\"><a href=\"#安装Ruby\" class=\"headerlink\" title=\"安装Ruby\"></a>安装Ruby</h3><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 查看可用版本</span></span><br><span class=\"line\">rbenv install --list</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 安装2.4.0</span></span><br><span class=\"line\">rbenv install 2.4.0</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 查看已安装版本</span></span><br><span class=\"line\">rbenv versions</span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">  system</span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">   2.1.5</span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">   2.2.1</span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> * 2.2.4 (<span class=\"built_in\">set</span> by /Users/Robbs/.rbenv/version)</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 设置全局版本</span></span><br><span class=\"line\">rbenv global 2.4.0</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 设置本地版本</span></span><br><span class=\"line\">rbenv local 2.4.0</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 取消设置</span></span><br><span class=\"line\">rbenv local --unset</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 设置当前终端版本</span></span><br><span class=\"line\">rbenv shell 2.4.0</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 使用系统Ruby</span></span><br><span class=\"line\">rbenv global system</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 每当切换ruby版本和执行bundle install之后必须执行这个命令</span></span><br><span class=\"line\">rbenv rehash</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 卸载Ruby</span></span><br><span class=\"line\">rbenv uninstall 2.4.0</span><br></pre></td></tr></table></figure>\n<h3 id=\"切换镜像\"><a href=\"#切换镜像\" class=\"headerlink\" title=\"切换镜像\"></a>切换镜像</h3><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> rbenv-china-mirror</span></span><br><span class=\"line\">git clone https://github.com/andorchen/rbenv-china-mirror.git ~/.rbenv/plugins/rbenv-china-mirror</span><br></pre></td></tr></table></figure>"},{"title":"GEM 笔记","date":"2016-10-12T07:44:28.000Z","description":"记录一些比较常用的GEM相关的命令。","_content":"## 前言\n本文记录了在使用过程中经常出现的一些命令\n\n## 记录\n\n### 更换镜像\n由于国内网络问题，在使用很多东西前我们第一件事情就是换镜像。[淘宝镜像](https://ruby.taobao.org/ '淘宝镜像')\n```bash\ngem sources --remove https://rubygems.org/\ngem sources -a https://ruby.taobao.org/\n\ngem sources -l\n```\n```bash\n*** CURRENT SOURCES ***\n\nhttps://ruby.taobao.org\n# 请确保只有 ruby.taobao.org\n```\n\n### 常用命令\n```bash\ngem -v                                 # 查看RubyGems软件的版本\n\ngem help                               # 显示RubyGem使用帮助\ngem help example                       # 列出RubyGem命令一些使用范例\n\ngem install [gemname]                  # 安装指定gem包，程序先从本机查找gem包并安装，如果本地没有，则从远程gem安装。\ngem install -l [gemname]               # 仅从本机安装gem包\ngem install -r [gemname]               # 仅从远程安装gem包\ngem install [gemname] --version=[ver]  # 安装指定版本的gem包\n\ngem uninstall [gemname]                # 删除指定的gem包，注意此命令将删除所有已安装的版本\ngem uninstall [gemname] --version=[ver] # 删除某指定版本gem\n\ngem update --system                     # 更新升级RubyGems软件自身\ngem update [gemname]                    # 更新所有|指定已安装的gem包\n\ngem list                                # 查看本机已安装的所有gem包 # 显示RubyGem使用帮助\n\ngem list | cut -d\" \" -f1 | xargs gem uninstall –aIx  # 删除系统中的所有gems\n# -I Ignore dependency requirements while uninstalling\n# -a Uninstall all matching versions\n# -x Uninstall applicable executables without confirmation\n\ngem cleanup                             # 清除所有包旧版本，保留最新版本  -d 查看那些会被删除   -v\n\ngem environment                         # 查看gem的环境\n```","source":"_posts/gem-note.md","raw":"---\ntitle: GEM 笔记\ndate: 2016-10-12 15:44:28\ntags:\n  -  Software\n  -  GEM\n  -  Ruby\ncategories:\n  -  Software\ndescription: 记录一些比较常用的GEM相关的命令。\n---\n## 前言\n本文记录了在使用过程中经常出现的一些命令\n\n## 记录\n\n### 更换镜像\n由于国内网络问题，在使用很多东西前我们第一件事情就是换镜像。[淘宝镜像](https://ruby.taobao.org/ '淘宝镜像')\n```bash\ngem sources --remove https://rubygems.org/\ngem sources -a https://ruby.taobao.org/\n\ngem sources -l\n```\n```bash\n*** CURRENT SOURCES ***\n\nhttps://ruby.taobao.org\n# 请确保只有 ruby.taobao.org\n```\n\n### 常用命令\n```bash\ngem -v                                 # 查看RubyGems软件的版本\n\ngem help                               # 显示RubyGem使用帮助\ngem help example                       # 列出RubyGem命令一些使用范例\n\ngem install [gemname]                  # 安装指定gem包，程序先从本机查找gem包并安装，如果本地没有，则从远程gem安装。\ngem install -l [gemname]               # 仅从本机安装gem包\ngem install -r [gemname]               # 仅从远程安装gem包\ngem install [gemname] --version=[ver]  # 安装指定版本的gem包\n\ngem uninstall [gemname]                # 删除指定的gem包，注意此命令将删除所有已安装的版本\ngem uninstall [gemname] --version=[ver] # 删除某指定版本gem\n\ngem update --system                     # 更新升级RubyGems软件自身\ngem update [gemname]                    # 更新所有|指定已安装的gem包\n\ngem list                                # 查看本机已安装的所有gem包 # 显示RubyGem使用帮助\n\ngem list | cut -d\" \" -f1 | xargs gem uninstall –aIx  # 删除系统中的所有gems\n# -I Ignore dependency requirements while uninstalling\n# -a Uninstall all matching versions\n# -x Uninstall applicable executables without confirmation\n\ngem cleanup                             # 清除所有包旧版本，保留最新版本  -d 查看那些会被删除   -v\n\ngem environment                         # 查看gem的环境\n```","slug":"gem-note","published":1,"updated":"2018-05-11T03:46:58.795Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjh8jw4w0001g6b8kafckvi9x","content":"<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>本文记录了在使用过程中经常出现的一些命令</p>\n<h2 id=\"记录\"><a href=\"#记录\" class=\"headerlink\" title=\"记录\"></a>记录</h2><h3 id=\"更换镜像\"><a href=\"#更换镜像\" class=\"headerlink\" title=\"更换镜像\"></a>更换镜像</h3><p>由于国内网络问题，在使用很多东西前我们第一件事情就是换镜像。<a href=\"https://ruby.taobao.org/\" title=\"淘宝镜像\" target=\"_blank\" rel=\"noopener\">淘宝镜像</a><br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">gem sources --remove https://rubygems.org/</span><br><span class=\"line\">gem sources -a https://ruby.taobao.org/</span><br><span class=\"line\"></span><br><span class=\"line\">gem sources -l</span><br></pre></td></tr></table></figure></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">*** CURRENT SOURCES ***</span><br><span class=\"line\"></span><br><span class=\"line\">https://ruby.taobao.org</span><br><span class=\"line\"><span class=\"comment\"># 请确保只有 ruby.taobao.org</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"常用命令\"><a href=\"#常用命令\" class=\"headerlink\" title=\"常用命令\"></a>常用命令</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">gem -v                                 <span class=\"comment\"># 查看RubyGems软件的版本</span></span><br><span class=\"line\"></span><br><span class=\"line\">gem <span class=\"built_in\">help</span>                               <span class=\"comment\"># 显示RubyGem使用帮助</span></span><br><span class=\"line\">gem <span class=\"built_in\">help</span> example                       <span class=\"comment\"># 列出RubyGem命令一些使用范例</span></span><br><span class=\"line\"></span><br><span class=\"line\">gem install [gemname]                  <span class=\"comment\"># 安装指定gem包，程序先从本机查找gem包并安装，如果本地没有，则从远程gem安装。</span></span><br><span class=\"line\">gem install -l [gemname]               <span class=\"comment\"># 仅从本机安装gem包</span></span><br><span class=\"line\">gem install -r [gemname]               <span class=\"comment\"># 仅从远程安装gem包</span></span><br><span class=\"line\">gem install [gemname] --version=[ver]  <span class=\"comment\"># 安装指定版本的gem包</span></span><br><span class=\"line\"></span><br><span class=\"line\">gem uninstall [gemname]                <span class=\"comment\"># 删除指定的gem包，注意此命令将删除所有已安装的版本</span></span><br><span class=\"line\">gem uninstall [gemname] --version=[ver] <span class=\"comment\"># 删除某指定版本gem</span></span><br><span class=\"line\"></span><br><span class=\"line\">gem update --system                     <span class=\"comment\"># 更新升级RubyGems软件自身</span></span><br><span class=\"line\">gem update [gemname]                    <span class=\"comment\"># 更新所有|指定已安装的gem包</span></span><br><span class=\"line\"></span><br><span class=\"line\">gem list                                <span class=\"comment\"># 查看本机已安装的所有gem包 # 显示RubyGem使用帮助</span></span><br><span class=\"line\"></span><br><span class=\"line\">gem list | cut -d<span class=\"string\">\" \"</span> -f1 | xargs gem uninstall –aIx  <span class=\"comment\"># 删除系统中的所有gems</span></span><br><span class=\"line\"><span class=\"comment\"># -I Ignore dependency requirements while uninstalling</span></span><br><span class=\"line\"><span class=\"comment\"># -a Uninstall all matching versions</span></span><br><span class=\"line\"><span class=\"comment\"># -x Uninstall applicable executables without confirmation</span></span><br><span class=\"line\"></span><br><span class=\"line\">gem cleanup                             <span class=\"comment\"># 清除所有包旧版本，保留最新版本  -d 查看那些会被删除   -v</span></span><br><span class=\"line\"></span><br><span class=\"line\">gem environment                         <span class=\"comment\"># 查看gem的环境</span></span><br></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"","more":"<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>本文记录了在使用过程中经常出现的一些命令</p>\n<h2 id=\"记录\"><a href=\"#记录\" class=\"headerlink\" title=\"记录\"></a>记录</h2><h3 id=\"更换镜像\"><a href=\"#更换镜像\" class=\"headerlink\" title=\"更换镜像\"></a>更换镜像</h3><p>由于国内网络问题，在使用很多东西前我们第一件事情就是换镜像。<a href=\"https://ruby.taobao.org/\" title=\"淘宝镜像\" target=\"_blank\" rel=\"noopener\">淘宝镜像</a><br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">gem sources --remove https://rubygems.org/</span><br><span class=\"line\">gem sources -a https://ruby.taobao.org/</span><br><span class=\"line\"></span><br><span class=\"line\">gem sources -l</span><br></pre></td></tr></table></figure></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">*** CURRENT SOURCES ***</span><br><span class=\"line\"></span><br><span class=\"line\">https://ruby.taobao.org</span><br><span class=\"line\"><span class=\"comment\"># 请确保只有 ruby.taobao.org</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"常用命令\"><a href=\"#常用命令\" class=\"headerlink\" title=\"常用命令\"></a>常用命令</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">gem -v                                 <span class=\"comment\"># 查看RubyGems软件的版本</span></span><br><span class=\"line\"></span><br><span class=\"line\">gem <span class=\"built_in\">help</span>                               <span class=\"comment\"># 显示RubyGem使用帮助</span></span><br><span class=\"line\">gem <span class=\"built_in\">help</span> example                       <span class=\"comment\"># 列出RubyGem命令一些使用范例</span></span><br><span class=\"line\"></span><br><span class=\"line\">gem install [gemname]                  <span class=\"comment\"># 安装指定gem包，程序先从本机查找gem包并安装，如果本地没有，则从远程gem安装。</span></span><br><span class=\"line\">gem install -l [gemname]               <span class=\"comment\"># 仅从本机安装gem包</span></span><br><span class=\"line\">gem install -r [gemname]               <span class=\"comment\"># 仅从远程安装gem包</span></span><br><span class=\"line\">gem install [gemname] --version=[ver]  <span class=\"comment\"># 安装指定版本的gem包</span></span><br><span class=\"line\"></span><br><span class=\"line\">gem uninstall [gemname]                <span class=\"comment\"># 删除指定的gem包，注意此命令将删除所有已安装的版本</span></span><br><span class=\"line\">gem uninstall [gemname] --version=[ver] <span class=\"comment\"># 删除某指定版本gem</span></span><br><span class=\"line\"></span><br><span class=\"line\">gem update --system                     <span class=\"comment\"># 更新升级RubyGems软件自身</span></span><br><span class=\"line\">gem update [gemname]                    <span class=\"comment\"># 更新所有|指定已安装的gem包</span></span><br><span class=\"line\"></span><br><span class=\"line\">gem list                                <span class=\"comment\"># 查看本机已安装的所有gem包 # 显示RubyGem使用帮助</span></span><br><span class=\"line\"></span><br><span class=\"line\">gem list | cut -d<span class=\"string\">\" \"</span> -f1 | xargs gem uninstall –aIx  <span class=\"comment\"># 删除系统中的所有gems</span></span><br><span class=\"line\"><span class=\"comment\"># -I Ignore dependency requirements while uninstalling</span></span><br><span class=\"line\"><span class=\"comment\"># -a Uninstall all matching versions</span></span><br><span class=\"line\"><span class=\"comment\"># -x Uninstall applicable executables without confirmation</span></span><br><span class=\"line\"></span><br><span class=\"line\">gem cleanup                             <span class=\"comment\"># 清除所有包旧版本，保留最新版本  -d 查看那些会被删除   -v</span></span><br><span class=\"line\"></span><br><span class=\"line\">gem environment                         <span class=\"comment\"># 查看gem的环境</span></span><br></pre></td></tr></table></figure>"},{"title":"使用 Mina 部署 Yii2 项目","date":"2016-10-25T15:03:20.000Z","description":"利用 Mina 快速的发布 Yii2 项目。","_content":"## 前言\n### Mina\n  Really fast deployer and server automation tool.\n  Mina 是一款快速部署工具。它部署脚本简单，扩展性强，部署速度快 (只有一次 SSH 连接)，部署信息简单。\n \n## 部署\n### 前期准备\n  * 一个 [Yii2](/2016-10-25/Create-Yii2-Project.html '创建 Yii2 项目') 的项目仓库\n  * 一台服务器安装了[基础环境](/2016-09-30/Install-Nginx-PHP7-MySQL-on-Ubuntu16-04.html)的VPS\n  * 一台安装有 Ruby 环境的开发机\n### 安装Mina\n  ```bash\n  gem install mina\n  ```\n### 初始化配置\n  ```bash\n  mina init\n  \n  # 生成配置文件\n  # ├── config\n  # │   └── deploy.rb\n  ```\n ### 修改配置文件\n   ```bash\n   vim deploy.rb\n   ```\n   我的配置\n   ```bash\n    require 'mina/git'  # git 支持\n    \n    # Basic settings:\n    #   domain       - The hostname to SSH to.\n    #   deploy_to    - Path to deploy into.\n    #   repository   - Git repo to clone from. (needed by mina/git)\n    #   branch       - Branch name to deploy. (needed by mina/git)\n\n    set :deploy_to, '/var/www/html/test'             # VPS 上用来发布的目录\n    set :repository, 'git@github.com:xxx/test.git'   # github 仓库地址\n    set :branch, 'develop'                           # 用来发布的分支\n\n    set :keep_releases, 4              # 保留的发布版本数\n\n    # Manually create these paths in shared/ (eg: shared/config/database.yml) in your server.\n    # They will be linked in the 'deploy:link_shared_paths' step.\n    set :shared_paths, ['vendor', 'runtime', 'web/assets']    # 设置共享目录\n\n    # Optional settings:\n    #   set :user, 'foobar'    # Username in the server to SSH to.\n    #   set :port, '30000'     # SSH port number.\n    #   set :forward_agent, true     # SSH forward_agent.\n    \n    set :user, 'ubuntu'                              # 登录 VPS 的用户名\n    set :domain, 'x.x.x.x'                           # VPS 的 IP 地址\n\n    # This task is the environment that is loaded for most commands, such as\n    # `mina deploy` or `mina rake`.\n    task :environment do\n    end\n\n    # Put any custom mkdir's in here for when `mina setup` is ran.\n    # For Rails apps, we'll make some of the shared paths that are shared between\n    # all releases.\n    task :setup => :environment do\n      # 项目初始化，生成共享文件夹，安装 Yii2 Composer 支持\n      queue! %[mkdir -p \"#{deploy_to}/#{shared_path}/runtime\"]\n      queue! %[mkdir -p \"#{deploy_to}/#{shared_path}/vendor\"]\n      queue! %[mkdir -p \"#{deploy_to}/#{shared_path}/web/assets\"]\n      queue! %[chmod -R 777 \"#{deploy_to}/#{shared_path}/runtime\"]\n      queue! %[chmod -R 777 \"#{deploy_to}/#{shared_path}/web/assets\"]\n      queue 'composer global require \"fxp/composer-asset-plugin:^1.2.0\"'\n    end\n\n    desc \"Deploys the current version to the server.\"\n    task :deploy => :environment do\n      to :before_hook do\n        # Put things to run locally before ssh\n      end\n      deploy do\n        # Put things that will set up an empty directory into a fully set-up\n        # instance of your project.\n        invoke :'git:clone'                          # 更新代码\n        invoke :'deploy:link_shared_paths'           # 链接共享目录\n        queue 'chmod -R 755 yii'                     # 权限 \n        queue 'composer install'                     # 安装Composer包\n        queue './yii migrate'                        # 数据库迁移\n        quequ 'rm -rf runtime/cache/*'               # 清空缓存\n        quequ 'service nginx restart'                # 重启 Nginx\n        quequ 'service php7.0-fpm restart'           # 重启 PHP\n        invoke :'deploy:cleanup'                     # 清除多余的发布\n      end\n    end\n\n    # 用于回滚到上一个版本\n    desc \"Rollback to previous verison.\"\n    task :rollback => :environment do\n      queue %[echo \"----> Start to rollback\"]\n      queue %[if [ $(ls #{deploy_to}/releases | wc -l) -gt 1 ]; then echo \"---->Relink to previos release\" && unlink #{deploy_to}/current && ln -s #{deploy_to}/releases/\"$(ls #{deploy_to}/releases | tail -2 | head -1)\" #{deploy_to}/current && echo \"Remove old releases\" && rm -rf #{deploy_to}/releases/\"$(ls #{deploy_to}/releases | tail -1)\" && echo \"$(ls #{deploy_to}/releases | tail -1)\" > #{deploy_to}/last_version && echo \"Done. Rollback to v$(cat #{deploy_to}/last_version)\" ; else echo \"No more release to rollback\" ; fi]\n    end\n   ```\n ### 初始化部署环境 \n ```bash\n mina setup\n ```\n 运行后会在配置的发布目录中创建特有的发布目录结构，并执行配置中 `setup` 部分。\n \n### 修改 Nginx\n  ```bash\n  server {\n      listen       80;\n      server_name  test.com;\n      index index.html index.htm index.php;\n      root /var/www/html/test/current;    # 在发布目录上增加 current\n  ```\n ###  开始部署\n 在每一次需要部署时运行以下命令\n   ```bash\n    mina deploy\n   ```\n   \n## Tips\n * 将发布的开发机加入到 VPS 的免密码登录配置\n * 将 VPS 的 SSH Key 加入到 github 仓库的  Deploy keys 内","source":"_posts/Use-Mina-Deploy-Yii2.md","raw":"---\ntitle: 使用 Mina 部署 Yii2 项目\ndate: 2016-10-25 23:03:20\ntags:\n  - Mina\n  - Yii2\n  - PHP\n  - Deploy\ncategories:\n  - Develop\ndescription: 利用 Mina 快速的发布 Yii2 项目。\n---\n## 前言\n### Mina\n  Really fast deployer and server automation tool.\n  Mina 是一款快速部署工具。它部署脚本简单，扩展性强，部署速度快 (只有一次 SSH 连接)，部署信息简单。\n \n## 部署\n### 前期准备\n  * 一个 [Yii2](/2016-10-25/Create-Yii2-Project.html '创建 Yii2 项目') 的项目仓库\n  * 一台服务器安装了[基础环境](/2016-09-30/Install-Nginx-PHP7-MySQL-on-Ubuntu16-04.html)的VPS\n  * 一台安装有 Ruby 环境的开发机\n### 安装Mina\n  ```bash\n  gem install mina\n  ```\n### 初始化配置\n  ```bash\n  mina init\n  \n  # 生成配置文件\n  # ├── config\n  # │   └── deploy.rb\n  ```\n ### 修改配置文件\n   ```bash\n   vim deploy.rb\n   ```\n   我的配置\n   ```bash\n    require 'mina/git'  # git 支持\n    \n    # Basic settings:\n    #   domain       - The hostname to SSH to.\n    #   deploy_to    - Path to deploy into.\n    #   repository   - Git repo to clone from. (needed by mina/git)\n    #   branch       - Branch name to deploy. (needed by mina/git)\n\n    set :deploy_to, '/var/www/html/test'             # VPS 上用来发布的目录\n    set :repository, 'git@github.com:xxx/test.git'   # github 仓库地址\n    set :branch, 'develop'                           # 用来发布的分支\n\n    set :keep_releases, 4              # 保留的发布版本数\n\n    # Manually create these paths in shared/ (eg: shared/config/database.yml) in your server.\n    # They will be linked in the 'deploy:link_shared_paths' step.\n    set :shared_paths, ['vendor', 'runtime', 'web/assets']    # 设置共享目录\n\n    # Optional settings:\n    #   set :user, 'foobar'    # Username in the server to SSH to.\n    #   set :port, '30000'     # SSH port number.\n    #   set :forward_agent, true     # SSH forward_agent.\n    \n    set :user, 'ubuntu'                              # 登录 VPS 的用户名\n    set :domain, 'x.x.x.x'                           # VPS 的 IP 地址\n\n    # This task is the environment that is loaded for most commands, such as\n    # `mina deploy` or `mina rake`.\n    task :environment do\n    end\n\n    # Put any custom mkdir's in here for when `mina setup` is ran.\n    # For Rails apps, we'll make some of the shared paths that are shared between\n    # all releases.\n    task :setup => :environment do\n      # 项目初始化，生成共享文件夹，安装 Yii2 Composer 支持\n      queue! %[mkdir -p \"#{deploy_to}/#{shared_path}/runtime\"]\n      queue! %[mkdir -p \"#{deploy_to}/#{shared_path}/vendor\"]\n      queue! %[mkdir -p \"#{deploy_to}/#{shared_path}/web/assets\"]\n      queue! %[chmod -R 777 \"#{deploy_to}/#{shared_path}/runtime\"]\n      queue! %[chmod -R 777 \"#{deploy_to}/#{shared_path}/web/assets\"]\n      queue 'composer global require \"fxp/composer-asset-plugin:^1.2.0\"'\n    end\n\n    desc \"Deploys the current version to the server.\"\n    task :deploy => :environment do\n      to :before_hook do\n        # Put things to run locally before ssh\n      end\n      deploy do\n        # Put things that will set up an empty directory into a fully set-up\n        # instance of your project.\n        invoke :'git:clone'                          # 更新代码\n        invoke :'deploy:link_shared_paths'           # 链接共享目录\n        queue 'chmod -R 755 yii'                     # 权限 \n        queue 'composer install'                     # 安装Composer包\n        queue './yii migrate'                        # 数据库迁移\n        quequ 'rm -rf runtime/cache/*'               # 清空缓存\n        quequ 'service nginx restart'                # 重启 Nginx\n        quequ 'service php7.0-fpm restart'           # 重启 PHP\n        invoke :'deploy:cleanup'                     # 清除多余的发布\n      end\n    end\n\n    # 用于回滚到上一个版本\n    desc \"Rollback to previous verison.\"\n    task :rollback => :environment do\n      queue %[echo \"----> Start to rollback\"]\n      queue %[if [ $(ls #{deploy_to}/releases | wc -l) -gt 1 ]; then echo \"---->Relink to previos release\" && unlink #{deploy_to}/current && ln -s #{deploy_to}/releases/\"$(ls #{deploy_to}/releases | tail -2 | head -1)\" #{deploy_to}/current && echo \"Remove old releases\" && rm -rf #{deploy_to}/releases/\"$(ls #{deploy_to}/releases | tail -1)\" && echo \"$(ls #{deploy_to}/releases | tail -1)\" > #{deploy_to}/last_version && echo \"Done. Rollback to v$(cat #{deploy_to}/last_version)\" ; else echo \"No more release to rollback\" ; fi]\n    end\n   ```\n ### 初始化部署环境 \n ```bash\n mina setup\n ```\n 运行后会在配置的发布目录中创建特有的发布目录结构，并执行配置中 `setup` 部分。\n \n### 修改 Nginx\n  ```bash\n  server {\n      listen       80;\n      server_name  test.com;\n      index index.html index.htm index.php;\n      root /var/www/html/test/current;    # 在发布目录上增加 current\n  ```\n ###  开始部署\n 在每一次需要部署时运行以下命令\n   ```bash\n    mina deploy\n   ```\n   \n## Tips\n * 将发布的开发机加入到 VPS 的免密码登录配置\n * 将 VPS 的 SSH Key 加入到 github 仓库的  Deploy keys 内","slug":"Use-Mina-Deploy-Yii2","published":1,"updated":"2018-05-11T03:46:58.795Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjh8jw4w2001i6b8kow5z6of3","content":"<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><h3 id=\"Mina\"><a href=\"#Mina\" class=\"headerlink\" title=\"Mina\"></a>Mina</h3><p>  Really fast deployer and server automation tool.<br>  Mina 是一款快速部署工具。它部署脚本简单，扩展性强，部署速度快 (只有一次 SSH 连接)，部署信息简单。</p>\n<h2 id=\"部署\"><a href=\"#部署\" class=\"headerlink\" title=\"部署\"></a>部署</h2><h3 id=\"前期准备\"><a href=\"#前期准备\" class=\"headerlink\" title=\"前期准备\"></a>前期准备</h3><ul>\n<li>一个 <a href=\"/2016-10-25/Create-Yii2-Project.html\" title=\"创建 Yii2 项目\">Yii2</a> 的项目仓库</li>\n<li>一台服务器安装了<a href=\"/2016-09-30/Install-Nginx-PHP7-MySQL-on-Ubuntu16-04.html\">基础环境</a>的VPS</li>\n<li>一台安装有 Ruby 环境的开发机<h3 id=\"安装Mina\"><a href=\"#安装Mina\" class=\"headerlink\" title=\"安装Mina\"></a>安装Mina</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">gem install mina</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h3 id=\"初始化配置\"><a href=\"#初始化配置\" class=\"headerlink\" title=\"初始化配置\"></a>初始化配置</h3>  <figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mina init</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 生成配置文件</span></span><br><span class=\"line\"><span class=\"comment\"># ├── config</span></span><br><span class=\"line\"><span class=\"comment\"># │   └── deploy.rb</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"修改配置文件\"><a href=\"#修改配置文件\" class=\"headerlink\" title=\"修改配置文件\"></a>修改配置文件</h3>   <figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">vim deploy.rb</span><br></pre></td></tr></table></figure>\n<p>   我的配置<br>   <figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">require <span class=\"string\">'mina/git'</span>  <span class=\"comment\"># git 支持</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># Basic settings:</span></span><br><span class=\"line\"><span class=\"comment\">#   domain       - The hostname to SSH to.</span></span><br><span class=\"line\"><span class=\"comment\">#   deploy_to    - Path to deploy into.</span></span><br><span class=\"line\"><span class=\"comment\">#   repository   - Git repo to clone from. (needed by mina/git)</span></span><br><span class=\"line\"><span class=\"comment\">#   branch       - Branch name to deploy. (needed by mina/git)</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">set</span> :deploy_to, <span class=\"string\">'/var/www/html/test'</span>             <span class=\"comment\"># VPS 上用来发布的目录</span></span><br><span class=\"line\"><span class=\"built_in\">set</span> :repository, <span class=\"string\">'git@github.com:xxx/test.git'</span>   <span class=\"comment\"># github 仓库地址</span></span><br><span class=\"line\"><span class=\"built_in\">set</span> :branch, <span class=\"string\">'develop'</span>                           <span class=\"comment\"># 用来发布的分支</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">set</span> :keep_releases, 4              <span class=\"comment\"># 保留的发布版本数</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># Manually create these paths in shared/ (eg: shared/config/database.yml) in your server.</span></span><br><span class=\"line\"><span class=\"comment\"># They will be linked in the 'deploy:link_shared_paths' step.</span></span><br><span class=\"line\"><span class=\"built_in\">set</span> :shared_paths, [<span class=\"string\">'vendor'</span>, <span class=\"string\">'runtime'</span>, <span class=\"string\">'web/assets'</span>]    <span class=\"comment\"># 设置共享目录</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># Optional settings:</span></span><br><span class=\"line\"><span class=\"comment\">#   set :user, 'foobar'    # Username in the server to SSH to.</span></span><br><span class=\"line\"><span class=\"comment\">#   set :port, '30000'     # SSH port number.</span></span><br><span class=\"line\"><span class=\"comment\">#   set :forward_agent, true     # SSH forward_agent.</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">set</span> :user, <span class=\"string\">'ubuntu'</span>                              <span class=\"comment\"># 登录 VPS 的用户名</span></span><br><span class=\"line\"><span class=\"built_in\">set</span> :domain, <span class=\"string\">'x.x.x.x'</span>                           <span class=\"comment\"># VPS 的 IP 地址</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># This task is the environment that is loaded for most commands, such as</span></span><br><span class=\"line\"><span class=\"comment\"># `mina deploy` or `mina rake`.</span></span><br><span class=\"line\">task :environment <span class=\"keyword\">do</span></span><br><span class=\"line\">end</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># Put any custom mkdir's in here for when `mina setup` is ran.</span></span><br><span class=\"line\"><span class=\"comment\"># For Rails apps, we'll make some of the shared paths that are shared between</span></span><br><span class=\"line\"><span class=\"comment\"># all releases.</span></span><br><span class=\"line\">task :setup =&gt; :environment <span class=\"keyword\">do</span></span><br><span class=\"line\">  <span class=\"comment\"># 项目初始化，生成共享文件夹，安装 Yii2 Composer 支持</span></span><br><span class=\"line\">  queue! %[mkdir -p <span class=\"string\">\"#&#123;deploy_to&#125;/#&#123;shared_path&#125;/runtime\"</span>]</span><br><span class=\"line\">  queue! %[mkdir -p <span class=\"string\">\"#&#123;deploy_to&#125;/#&#123;shared_path&#125;/vendor\"</span>]</span><br><span class=\"line\">  queue! %[mkdir -p <span class=\"string\">\"#&#123;deploy_to&#125;/#&#123;shared_path&#125;/web/assets\"</span>]</span><br><span class=\"line\">  queue! %[chmod -R 777 <span class=\"string\">\"#&#123;deploy_to&#125;/#&#123;shared_path&#125;/runtime\"</span>]</span><br><span class=\"line\">  queue! %[chmod -R 777 <span class=\"string\">\"#&#123;deploy_to&#125;/#&#123;shared_path&#125;/web/assets\"</span>]</span><br><span class=\"line\">  queue <span class=\"string\">'composer global require \"fxp/composer-asset-plugin:^1.2.0\"'</span></span><br><span class=\"line\">end</span><br><span class=\"line\"></span><br><span class=\"line\">desc <span class=\"string\">\"Deploys the current version to the server.\"</span></span><br><span class=\"line\">task :deploy =&gt; :environment <span class=\"keyword\">do</span></span><br><span class=\"line\">  to :before_hook <span class=\"keyword\">do</span></span><br><span class=\"line\">    <span class=\"comment\"># Put things to run locally before ssh</span></span><br><span class=\"line\">  end</span><br><span class=\"line\">  deploy <span class=\"keyword\">do</span></span><br><span class=\"line\">    <span class=\"comment\"># Put things that will set up an empty directory into a fully set-up</span></span><br><span class=\"line\">    <span class=\"comment\"># instance of your project.</span></span><br><span class=\"line\">    invoke :<span class=\"string\">'git:clone'</span>                          <span class=\"comment\"># 更新代码</span></span><br><span class=\"line\">    invoke :<span class=\"string\">'deploy:link_shared_paths'</span>           <span class=\"comment\"># 链接共享目录</span></span><br><span class=\"line\">    queue <span class=\"string\">'chmod -R 755 yii'</span>                     <span class=\"comment\"># 权限 </span></span><br><span class=\"line\">    queue <span class=\"string\">'composer install'</span>                     <span class=\"comment\"># 安装Composer包</span></span><br><span class=\"line\">    queue <span class=\"string\">'./yii migrate'</span>                        <span class=\"comment\"># 数据库迁移</span></span><br><span class=\"line\">    quequ <span class=\"string\">'rm -rf runtime/cache/*'</span>               <span class=\"comment\"># 清空缓存</span></span><br><span class=\"line\">    quequ <span class=\"string\">'service nginx restart'</span>                <span class=\"comment\"># 重启 Nginx</span></span><br><span class=\"line\">    quequ <span class=\"string\">'service php7.0-fpm restart'</span>           <span class=\"comment\"># 重启 PHP</span></span><br><span class=\"line\">    invoke :<span class=\"string\">'deploy:cleanup'</span>                     <span class=\"comment\"># 清除多余的发布</span></span><br><span class=\"line\">  end</span><br><span class=\"line\">end</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 用于回滚到上一个版本</span></span><br><span class=\"line\">desc <span class=\"string\">\"Rollback to previous verison.\"</span></span><br><span class=\"line\">task :rollback =&gt; :environment <span class=\"keyword\">do</span></span><br><span class=\"line\">  queue %[<span class=\"built_in\">echo</span> <span class=\"string\">\"----&gt; Start to rollback\"</span>]</span><br><span class=\"line\">  queue %[<span class=\"keyword\">if</span> [ $(ls <span class=\"comment\">#&#123;deploy_to&#125;/releases | wc -l) -gt 1 ]; then echo \"----&gt;Relink to previos release\" &amp;&amp; unlink #&#123;deploy_to&#125;/current &amp;&amp; ln -s #&#123;deploy_to&#125;/releases/\"$(ls #&#123;deploy_to&#125;/releases | tail -2 | head -1)\" #&#123;deploy_to&#125;/current &amp;&amp; echo \"Remove old releases\" &amp;&amp; rm -rf #&#123;deploy_to&#125;/releases/\"$(ls #&#123;deploy_to&#125;/releases | tail -1)\" &amp;&amp; echo \"$(ls #&#123;deploy_to&#125;/releases | tail -1)\" &gt; #&#123;deploy_to&#125;/last_version &amp;&amp; echo \"Done. Rollback to v$(cat #&#123;deploy_to&#125;/last_version)\" ; else echo \"No more release to rollback\" ; fi]</span></span><br><span class=\"line\">end</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"初始化部署环境\"><a href=\"#初始化部署环境\" class=\"headerlink\" title=\"初始化部署环境\"></a>初始化部署环境</h3> <figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mina setup</span><br></pre></td></tr></table></figure>\n<p> 运行后会在配置的发布目录中创建特有的发布目录结构，并执行配置中 <code>setup</code> 部分。</p>\n<h3 id=\"修改-Nginx\"><a href=\"#修改-Nginx\" class=\"headerlink\" title=\"修改 Nginx\"></a>修改 Nginx</h3>  <figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">server &#123;</span><br><span class=\"line\">    listen       80;</span><br><span class=\"line\">    server_name  test.com;</span><br><span class=\"line\">    index index.html index.htm index.php;</span><br><span class=\"line\">    root /var/www/html/<span class=\"built_in\">test</span>/current;    <span class=\"comment\"># 在发布目录上增加 current</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"开始部署\"><a href=\"#开始部署\" class=\"headerlink\" title=\"开始部署\"></a>开始部署</h3><p> 在每一次需要部署时运行以下命令<br>   <figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mina deploy</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"Tips\"><a href=\"#Tips\" class=\"headerlink\" title=\"Tips\"></a>Tips</h2><ul>\n<li>将发布的开发机加入到 VPS 的免密码登录配置</li>\n<li>将 VPS 的 SSH Key 加入到 github 仓库的  Deploy keys 内</li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><h3 id=\"Mina\"><a href=\"#Mina\" class=\"headerlink\" title=\"Mina\"></a>Mina</h3><p>  Really fast deployer and server automation tool.<br>  Mina 是一款快速部署工具。它部署脚本简单，扩展性强，部署速度快 (只有一次 SSH 连接)，部署信息简单。</p>\n<h2 id=\"部署\"><a href=\"#部署\" class=\"headerlink\" title=\"部署\"></a>部署</h2><h3 id=\"前期准备\"><a href=\"#前期准备\" class=\"headerlink\" title=\"前期准备\"></a>前期准备</h3><ul>\n<li>一个 <a href=\"/2016-10-25/Create-Yii2-Project.html\" title=\"创建 Yii2 项目\">Yii2</a> 的项目仓库</li>\n<li>一台服务器安装了<a href=\"/2016-09-30/Install-Nginx-PHP7-MySQL-on-Ubuntu16-04.html\">基础环境</a>的VPS</li>\n<li>一台安装有 Ruby 环境的开发机<h3 id=\"安装Mina\"><a href=\"#安装Mina\" class=\"headerlink\" title=\"安装Mina\"></a>安装Mina</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">gem install mina</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h3 id=\"初始化配置\"><a href=\"#初始化配置\" class=\"headerlink\" title=\"初始化配置\"></a>初始化配置</h3>  <figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mina init</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 生成配置文件</span></span><br><span class=\"line\"><span class=\"comment\"># ├── config</span></span><br><span class=\"line\"><span class=\"comment\"># │   └── deploy.rb</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"修改配置文件\"><a href=\"#修改配置文件\" class=\"headerlink\" title=\"修改配置文件\"></a>修改配置文件</h3>   <figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">vim deploy.rb</span><br></pre></td></tr></table></figure>\n<p>   我的配置<br>   <figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">require <span class=\"string\">'mina/git'</span>  <span class=\"comment\"># git 支持</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># Basic settings:</span></span><br><span class=\"line\"><span class=\"comment\">#   domain       - The hostname to SSH to.</span></span><br><span class=\"line\"><span class=\"comment\">#   deploy_to    - Path to deploy into.</span></span><br><span class=\"line\"><span class=\"comment\">#   repository   - Git repo to clone from. (needed by mina/git)</span></span><br><span class=\"line\"><span class=\"comment\">#   branch       - Branch name to deploy. (needed by mina/git)</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">set</span> :deploy_to, <span class=\"string\">'/var/www/html/test'</span>             <span class=\"comment\"># VPS 上用来发布的目录</span></span><br><span class=\"line\"><span class=\"built_in\">set</span> :repository, <span class=\"string\">'git@github.com:xxx/test.git'</span>   <span class=\"comment\"># github 仓库地址</span></span><br><span class=\"line\"><span class=\"built_in\">set</span> :branch, <span class=\"string\">'develop'</span>                           <span class=\"comment\"># 用来发布的分支</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">set</span> :keep_releases, 4              <span class=\"comment\"># 保留的发布版本数</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># Manually create these paths in shared/ (eg: shared/config/database.yml) in your server.</span></span><br><span class=\"line\"><span class=\"comment\"># They will be linked in the 'deploy:link_shared_paths' step.</span></span><br><span class=\"line\"><span class=\"built_in\">set</span> :shared_paths, [<span class=\"string\">'vendor'</span>, <span class=\"string\">'runtime'</span>, <span class=\"string\">'web/assets'</span>]    <span class=\"comment\"># 设置共享目录</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># Optional settings:</span></span><br><span class=\"line\"><span class=\"comment\">#   set :user, 'foobar'    # Username in the server to SSH to.</span></span><br><span class=\"line\"><span class=\"comment\">#   set :port, '30000'     # SSH port number.</span></span><br><span class=\"line\"><span class=\"comment\">#   set :forward_agent, true     # SSH forward_agent.</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">set</span> :user, <span class=\"string\">'ubuntu'</span>                              <span class=\"comment\"># 登录 VPS 的用户名</span></span><br><span class=\"line\"><span class=\"built_in\">set</span> :domain, <span class=\"string\">'x.x.x.x'</span>                           <span class=\"comment\"># VPS 的 IP 地址</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># This task is the environment that is loaded for most commands, such as</span></span><br><span class=\"line\"><span class=\"comment\"># `mina deploy` or `mina rake`.</span></span><br><span class=\"line\">task :environment <span class=\"keyword\">do</span></span><br><span class=\"line\">end</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># Put any custom mkdir's in here for when `mina setup` is ran.</span></span><br><span class=\"line\"><span class=\"comment\"># For Rails apps, we'll make some of the shared paths that are shared between</span></span><br><span class=\"line\"><span class=\"comment\"># all releases.</span></span><br><span class=\"line\">task :setup =&gt; :environment <span class=\"keyword\">do</span></span><br><span class=\"line\">  <span class=\"comment\"># 项目初始化，生成共享文件夹，安装 Yii2 Composer 支持</span></span><br><span class=\"line\">  queue! %[mkdir -p <span class=\"string\">\"#&#123;deploy_to&#125;/#&#123;shared_path&#125;/runtime\"</span>]</span><br><span class=\"line\">  queue! %[mkdir -p <span class=\"string\">\"#&#123;deploy_to&#125;/#&#123;shared_path&#125;/vendor\"</span>]</span><br><span class=\"line\">  queue! %[mkdir -p <span class=\"string\">\"#&#123;deploy_to&#125;/#&#123;shared_path&#125;/web/assets\"</span>]</span><br><span class=\"line\">  queue! %[chmod -R 777 <span class=\"string\">\"#&#123;deploy_to&#125;/#&#123;shared_path&#125;/runtime\"</span>]</span><br><span class=\"line\">  queue! %[chmod -R 777 <span class=\"string\">\"#&#123;deploy_to&#125;/#&#123;shared_path&#125;/web/assets\"</span>]</span><br><span class=\"line\">  queue <span class=\"string\">'composer global require \"fxp/composer-asset-plugin:^1.2.0\"'</span></span><br><span class=\"line\">end</span><br><span class=\"line\"></span><br><span class=\"line\">desc <span class=\"string\">\"Deploys the current version to the server.\"</span></span><br><span class=\"line\">task :deploy =&gt; :environment <span class=\"keyword\">do</span></span><br><span class=\"line\">  to :before_hook <span class=\"keyword\">do</span></span><br><span class=\"line\">    <span class=\"comment\"># Put things to run locally before ssh</span></span><br><span class=\"line\">  end</span><br><span class=\"line\">  deploy <span class=\"keyword\">do</span></span><br><span class=\"line\">    <span class=\"comment\"># Put things that will set up an empty directory into a fully set-up</span></span><br><span class=\"line\">    <span class=\"comment\"># instance of your project.</span></span><br><span class=\"line\">    invoke :<span class=\"string\">'git:clone'</span>                          <span class=\"comment\"># 更新代码</span></span><br><span class=\"line\">    invoke :<span class=\"string\">'deploy:link_shared_paths'</span>           <span class=\"comment\"># 链接共享目录</span></span><br><span class=\"line\">    queue <span class=\"string\">'chmod -R 755 yii'</span>                     <span class=\"comment\"># 权限 </span></span><br><span class=\"line\">    queue <span class=\"string\">'composer install'</span>                     <span class=\"comment\"># 安装Composer包</span></span><br><span class=\"line\">    queue <span class=\"string\">'./yii migrate'</span>                        <span class=\"comment\"># 数据库迁移</span></span><br><span class=\"line\">    quequ <span class=\"string\">'rm -rf runtime/cache/*'</span>               <span class=\"comment\"># 清空缓存</span></span><br><span class=\"line\">    quequ <span class=\"string\">'service nginx restart'</span>                <span class=\"comment\"># 重启 Nginx</span></span><br><span class=\"line\">    quequ <span class=\"string\">'service php7.0-fpm restart'</span>           <span class=\"comment\"># 重启 PHP</span></span><br><span class=\"line\">    invoke :<span class=\"string\">'deploy:cleanup'</span>                     <span class=\"comment\"># 清除多余的发布</span></span><br><span class=\"line\">  end</span><br><span class=\"line\">end</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 用于回滚到上一个版本</span></span><br><span class=\"line\">desc <span class=\"string\">\"Rollback to previous verison.\"</span></span><br><span class=\"line\">task :rollback =&gt; :environment <span class=\"keyword\">do</span></span><br><span class=\"line\">  queue %[<span class=\"built_in\">echo</span> <span class=\"string\">\"----&gt; Start to rollback\"</span>]</span><br><span class=\"line\">  queue %[<span class=\"keyword\">if</span> [ $(ls <span class=\"comment\">#&#123;deploy_to&#125;/releases | wc -l) -gt 1 ]; then echo \"----&gt;Relink to previos release\" &amp;&amp; unlink #&#123;deploy_to&#125;/current &amp;&amp; ln -s #&#123;deploy_to&#125;/releases/\"$(ls #&#123;deploy_to&#125;/releases | tail -2 | head -1)\" #&#123;deploy_to&#125;/current &amp;&amp; echo \"Remove old releases\" &amp;&amp; rm -rf #&#123;deploy_to&#125;/releases/\"$(ls #&#123;deploy_to&#125;/releases | tail -1)\" &amp;&amp; echo \"$(ls #&#123;deploy_to&#125;/releases | tail -1)\" &gt; #&#123;deploy_to&#125;/last_version &amp;&amp; echo \"Done. Rollback to v$(cat #&#123;deploy_to&#125;/last_version)\" ; else echo \"No more release to rollback\" ; fi]</span></span><br><span class=\"line\">end</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"初始化部署环境\"><a href=\"#初始化部署环境\" class=\"headerlink\" title=\"初始化部署环境\"></a>初始化部署环境</h3> <figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mina setup</span><br></pre></td></tr></table></figure>\n<p> 运行后会在配置的发布目录中创建特有的发布目录结构，并执行配置中 <code>setup</code> 部分。</p>\n<h3 id=\"修改-Nginx\"><a href=\"#修改-Nginx\" class=\"headerlink\" title=\"修改 Nginx\"></a>修改 Nginx</h3>  <figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">server &#123;</span><br><span class=\"line\">    listen       80;</span><br><span class=\"line\">    server_name  test.com;</span><br><span class=\"line\">    index index.html index.htm index.php;</span><br><span class=\"line\">    root /var/www/html/<span class=\"built_in\">test</span>/current;    <span class=\"comment\"># 在发布目录上增加 current</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"开始部署\"><a href=\"#开始部署\" class=\"headerlink\" title=\"开始部署\"></a>开始部署</h3><p> 在每一次需要部署时运行以下命令<br>   <figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mina deploy</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"Tips\"><a href=\"#Tips\" class=\"headerlink\" title=\"Tips\"></a>Tips</h2><ul>\n<li>将发布的开发机加入到 VPS 的免密码登录配置</li>\n<li>将 VPS 的 SSH Key 加入到 github 仓库的  Deploy keys 内</li>\n</ul>\n"},{"title":"基于容器应用设计的原则，模式和反模式","date":"2018-05-14T02:24:02.000Z","description":"在新的容器背景下，相应的原则和模式有助于帮助我们更好的构建“云原生”的应用。我们可以看到，这些原则和模式并非对之前模式的颠覆和推翻，更像是适应新环境的演进版本。","_content":"\n容器和容器编排（Kubernetes）的广泛使用，让我们可以轻松的构建基于微服务的“云原生”（Cloud Native）的应用。容器成为了云时代的新的编程单元，类似面向对象概念下的`对象`，J2EE中的`组件`或者函数式编程中的`函数`。\n\n在面向对象时代，有许多著名的设计原则，模式和反模式等，例如：\n\n* [SOLID][SOLID] (**单一功能、开闭原则、里氏替换、接口隔离以及依赖反转**）\n* [Design Patterns: Elements of Reusable Object-Oriented Software](https://zh.wikipedia.org/wiki/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%EF%BC%9A%E5%8F%AF%E5%A4%8D%E7%94%A8%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E8%BD%AF%E4%BB%B6%E7%9A%84%E5%9F%BA%E7%A1%80)\n\n* [Anti-Pattern](https://zh.wikipedia.org/wiki/%E5%8F%8D%E9%9D%A2%E6%A8%A1%E5%BC%8F)\n\n在新的容器背景下，相应的原则和模式有助于帮助我们更好的构建“云原生”的应用。我们可以看到，这些原则和模式并非对之前模式的颠覆和推翻，更像是适应新环境的演进版本。\n\n## 原则\n\n#### 单一职责原则 SINGLE CONCERN PRINCIPLE (SCP)\n与OO的单一功能相对应，每一个容器应该提供单一的职责，只关注于做好一件事。单一职责使得容器更容易重用。通常容器对应于一个进程，而该进程专注于做好一件事。\n![SINGLE CONCERN PRINCIPLE (SCP)](Container-Application-Design/1526261691982-7ead3978-fe73-423f-a675-90309a8bc859-image.png) \n\n#### 高可观测性原则 HIGH OBSERVABILITY PRINCIPLE (HOP)\n容器像对象一样，应该是一个封装良好的黑盒子。但是在云的环境下，这个黑盒子应该提供良好的观测接口，使得其在云的环境下得到相应的监控和管理。这样，整个应用才能提供一致的生命周期的管理。\n![HIGH OBSERVABILITY PRINCIPLE (HOP)](Container-Application-Design/1526261707323-33e04e90-0449-4fea-8846-49a7a3cf6915-image-resized.png) \n\n可观测性包含：\n* 提供健康检查 Health Check，或者心跳\n* 提供状态\n* 把日志输出到标准输出(STDOUT)和标准出错(STDERR)\n* 等等 \n\n#### 生命周期确认原则 LIFE-CYCLE CONFORMANCE PRINCIPLE (LCP)\n生命周期确认原则指的是容器应该提供和平台交互来处理相应的生命周期的变化。\n![LIFE-CYCLE CONFORMANCE PRINCIPLE (LCP)](Container-Application-Design/1526261801128-be721a67-971b-4f35-960e-0ce907328f73-image-resized.png) \n\n* 捕获并响应Terminate (SIGTERM)信号，来尽快优雅的终止服务进程，以避免kill (SIGKILL)信号强行终止进程。例如一下的NodeJS代码。\n```js\nprocess.on('SIGTERM', function () {\n  console.log(\"Received SIGTERM. Exiting.\")\n  server.close(function () {\n    process.exit(0);\n  });\n});\n```\n* 返回退出码\n```js\nprocess.exit(0);\n```\n\n#### 镜像不可变原则 IMAGE IMMUTABILITY PRINCIPLE (IIP)\n在运行时，配置可以不同，但是镜像应该是不可变的。\n![IMAGE IMMUTABILITY PRINCIPLE (IIP)](Container-Application-Design/1526261901806-402b717e-5379-476a-ab90-d419ff516bc8-image.png) \n我们可以理解为镜像是个类，是容器是对象实例，类是不变的，而容器是拥有不同配置参数的镜像实例。\n\n#### 进程用完既丢原则 PROCESS DISPOSABILITY PRINCIPLE (PDP)\n在云环境下，我们应该假定所有的容器都是临时的，它随时有可能被其它的容器实例所替代。\n![PROCESS DISPOSABILITY PRINCIPLE (PDP)](Container-Application-Design/1526261921352-50cf453f-a1eb-4d16-bde3-c47f7ecb5c96-image.png) \n这也就意味着需要把容器的状态保存在容器之外。并且尽可能快速的启动和终止容器。通常越小的容器就越容易实现这一点。\n\n#### 自包含原则 SELF-CONTAINMENT PRINCIPLE (S-CP)\n容器在构建的时候应该包含所有的依赖，也就是所说容器在运行时不应该有任何的外部依赖。\n![SELF-CONTAINMENT PRINCIPLE (S-CP)](Container-Application-Design/1526261951920-41f3d5f6-38ef-4619-91a1-1f802c90696a-image.png) \n\n#### 限制运行资源原则 RUNTIME CONFINEMENT PRINCIPLE (RCP)\n容器的最佳实践应该是在运行时指定容器对资源配置的需求。例如需要多少的内存，CPU等等。这样做可以使得容器编排能都更有效的调度和管理资源。\n![RUNTIME CONFINEMENT PRINCIPLE (RCP)](Container-Application-Design/1526261967663-aaa59614-51c8-43cc-bde6-237e644fbbb2-image.png) \n\n## 模式\n许多容器应用的模式和Pod的概念相关，Pod是Kubernetes为了有效的管理容器而提出的概念，它是容器的集合，我们可以理解为“超容器”（我随便发明的）。Pod包含的容器之间就好像运行在同一台机器上，这些容器共享Localhost主机地址，可以本机通信，共享卷等等。\n![](Container-Application-Design/1526261996216-83455d4d-0512-4dbb-877e-1cd6e97e76ed-image.png) \n\nKubernetes 类似云上OS，提供了用容器构建云原生应用的最佳实践。我们看看这些常见的模式都有什么。\n\n#### 边车（侧斗）（Sidecar）\n![](Container-Application-Design/1526262020618-7b150d6f-b6a3-4791-8212-38551258c423-image.png) \nSidecar是最常见的模式，在同一个Pod中，我们需要把不同的责任分在不同的容器中，对外部提供一个完整的功能。\n![](Container-Application-Design/1526262054188-bc378617-e76c-4498-9c0b-82f7704e6496-image-resized.png) \n\n这样的例子有很多，例如：\n* 上图中的Node后端和提供缓存的Redis\n* Web服务器和收集日志的服务\n* Web服务器和负责监控服务器性能数据的服务\n\n这样做有点类似面向对象的[组合模式](https://en.wikipedia.org/wiki/Composite_pattern)，好处有很多：\n![Composite Pattern Implementation - UML Class Diagram](Container-Application-Design/1526262095283-87098624-d8fc-4286-a2af-ac94f4b0f47b-image.png) \n\n* 应用单一职责原则，每一个容器只负责专注做好一件事。\n* 隔离，容器之间不会出现互相竞争资源，当一个次要功能（例如日志收集或者缓存）失效或者崩溃的时候，对主要功能的影响降至最小。\n* 可以对每一个容器进行独立的生命周期管理\n* 可以对每一个容器进行独立的弹性扩张\n* 可以方便的替换其中一个容器\n\n#### 代理（大使）容器\n![Proxy Pattern Implementation - UML Class Diagram](Container-Application-Design/1526262238219-a6221168-99d3-4f03-bfc6-ca2fad38c325-image.png) \n类似于面向对象的[Proxy模式](https://en.wikipedia.org/wiki/Proxy_pattern)，利用Pod中一个容器提供对外的访问连接。如下图中Node后端总是通过Service Discovery容器来和外部进行通信。\n![](Container-Application-Design/1526262264669-62a724a4-88d8-4511-9120-328cd7a4af15-image-resized.png) \n\n这样做，负责Node模块开发的只需要假定所有的通信都是来自于本机，而把通信的复杂性交给代理容器，去处理诸如负载均衡，安全，过滤请求，必要时中断通信等功能。\n\n#### 适配器容器\n![Adapter  Pattern Implementation - UML Class Diagram](Container-Application-Design/1526262303219-9324cca1-515f-4424-b9b8-c19b8814b9c3-image.png) \n\n大家常常会把面向对象的Proxy模式，Bridge模式和[Adapter模式](https://en.wikipedia.org/wiki/Adapter_pattern)搞混，因为单单从UML关系图上来看，它们都大同小异。似乎只是取了不同的名字。事实也确实如此，就像几乎所有的OO模式都是组合模式的衍生，所有容器模式都是边车模式的衍生。\n\n在下图的例子中，如果Logging Adapter的名字不提及Adapter，我们不会认为这是个适配器模式。\n![](Container-Application-Design/1526262348948-fce2d10f-320e-4d52-89eb-931bf394454c-image-resized.png) \n\n其实适配器模式关注的是如果把Pod内部的不同容器的功能通过适配器统一的暴漏出来。在上图中，如果我们再多加一个容器，它同时会向卷中写入日志的化，这样就更清楚了。Logging Adapter适配不同容器用不同的接口提供的日志，并提供统一的访问接口。\n\n#### 容器链\n![hain of Responsability Implementation - UML Class Diagram](Container-Application-Design/1526262383289-ee67fbb1-8251-4af3-bb61-f28db3e9bbc0-image.png) \n\n类似于OO的[责任链模式](http://www.oodesign.com/chain-of-responsibility-pattern.html)，把负责不同功能的容器按照依赖顺序链在一起，也是一种常见的模式。\n![](Container-Application-Design/1526262452948-23ea67c9-470f-4f7b-8a03-c76307b4415f-image-resized.png) \n\n#### 准备就绪的Pod\n![](Container-Application-Design/1526262469915-5b17a04f-67ce-46de-967f-8d8ef906ac68-image.png) \n\n通常作为服务的容器有一个启动的过程，在启动过程中，服务是不可用的。Kubernetes提供了[Readiness](https://kubernetes.io/docs/tasks/configure-pod-container/configure-liveness-readiness-probes/)探测功能。\n```yaml\nreadinessProbe:\n  httpGet:\n    path: /\n    port: 5000\n  timeoutSeconds: 1\n  periodSeconds: 5\n```\n和其它模式相比，这个更像是一个使用Kubernetes的最佳实践。\n\n## 反模式\n#### 构建环境和运行环境混杂在一起\n应该使得用于生产的运行环境的镜像尽可能的小，避免在运行环境的镜像中包含构建时的残留。\n\n例如下面的Dockerfile例子：\n```bash\nFROM ubuntu:14.04\n\nRUN apt-get update\nRUN apt-get install gcc\nRUN gcc hello.c -o /hello\n```\n在这个构建的镜像中，有很多不需要也不应该出现在生产环境中的东西，例如gcc，源代码hello.c。这样的结果既不安全（直接暴漏源代码），也会有性能开销（过大的镜像体积导致加载变慢）。\n\nDocker17.05 以后提供的[multi-stage builds](https://docs.docker.com/develop/develop-images/multistage-build/)也可以解决这个问题。\n\n#### 直接使用Pod\n避免直接使用Pod，用Deployment来管理Pod。利用Deployment可以很方便的对Pod进行扩展和管理。\n\n#### 使用latest标签\nLatest标签用于标记最近的稳定版本，然而在创建容器时，尽可能避免在生产环境使用Latest标签。即使使用imagePullPolicy选项为alway。\n\n#### 快速失败的任务\nJob是Kubernetes提供的只运行一次的容器，和service正好相反。要避免快速失败\n```yaml\napiVersion: batch/v1\nkind: Job\nmetadata:\n  name: bad\nspec:\n  template:\n    metadata:\n      name: bad\n    spec:\n      restartPolicy: Never\n      containers:\n      - name: box\n        image: busybox\n        command: [\"/bin/sh\", \"-c\", \"exit 1\"]\n```\n如果你尝试在你的cluster里面创建以上的Job，你可能会碰到如下的状态。\n```bash\n$ kubectl describe jobs \nName:   bad\nNamespace:  default\nImage(s): busybox\nSelector: controller-uid=18a6678e-11d1-11e7-8169-525400c83acf\nParallelism:  1\nCompletions:  1\nStart Time: Sat, 25 Mar 2017 20:05:41 -0700\nLabels:   controller-uid=18a6678e-11d1-11e7-8169-525400c83acf\n    job-name=bad\nPods Statuses:  1 Running / 0 Succeeded / 24 Failed\nNo volumes.\nEvents:\n  FirstSeen LastSeen  Count From      SubObjectPath Type    Reason      Message\n  --------- --------  ----- ----      ------------- --------  ------      -------\n  1m    1m    1 {job-controller }     Normal    SuccessfulCreate  Created pod: bad-fws8g\n  1m    1m    1 {job-controller }     Normal    SuccessfulCreate  Created pod: bad-321pk\n  1m    1m    1 {job-controller }     Normal    SuccessfulCreate  Created pod: bad-2pxq1\n  1m    1m    1 {job-controller }     Normal    SuccessfulCreate  Created pod: bad-kl2tj\n  1m    1m    1 {job-controller }     Normal    SuccessfulCreate  Created pod: bad-wfw8q\n  1m    1m    1 {job-controller }     Normal    SuccessfulCreate  Created pod: bad-lz0hq\n  1m    1m    1 {job-controller }     Normal    SuccessfulCreate  Created pod: bad-0dck0\n  1m    1m    1 {job-controller }     Normal    SuccessfulCreate  Created pod: bad-0lm8k\n  1m    1m    1 {job-controller }     Normal    SuccessfulCreate  Created pod: bad-q6ctf\n  1m    1s    16  {job-controller }     Normal    SuccessfulCreate  (events with common reason combined)\n```\n因为任务快速失败。Kubernetes认为任务没能成功启动，尝试创建新的容器以恢复这个失败，导致的Cluster会在短时间创建大量的容器，这样的结果可能会消耗大量的计算资源。\n\n在Spec中使用.spec.activeDeadlineSeconds来避免这个问题。这个参数定了等待多长时间重试失败的Job。\n\n---\n> 来源: https://my.oschina.net/taogang/blog/1809904\n\n\n\n\n\n\n\n[SOLID]: https://zh.wikipedia.org/wiki/SOLID_(%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E8%AE%BE%E8%AE%A1)\t\"SOLID\"","source":"_posts/Container-Application-Design.md","raw":"---\ntitle: 基于容器应用设计的原则，模式和反模式\ndate: 2018-05-14 10:24:02\ntags:\n - Container\n - Architect\ncategories:\n - Architect\ndescription: 在新的容器背景下，相应的原则和模式有助于帮助我们更好的构建“云原生”的应用。我们可以看到，这些原则和模式并非对之前模式的颠覆和推翻，更像是适应新环境的演进版本。\n---\n\n容器和容器编排（Kubernetes）的广泛使用，让我们可以轻松的构建基于微服务的“云原生”（Cloud Native）的应用。容器成为了云时代的新的编程单元，类似面向对象概念下的`对象`，J2EE中的`组件`或者函数式编程中的`函数`。\n\n在面向对象时代，有许多著名的设计原则，模式和反模式等，例如：\n\n* [SOLID][SOLID] (**单一功能、开闭原则、里氏替换、接口隔离以及依赖反转**）\n* [Design Patterns: Elements of Reusable Object-Oriented Software](https://zh.wikipedia.org/wiki/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%EF%BC%9A%E5%8F%AF%E5%A4%8D%E7%94%A8%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E8%BD%AF%E4%BB%B6%E7%9A%84%E5%9F%BA%E7%A1%80)\n\n* [Anti-Pattern](https://zh.wikipedia.org/wiki/%E5%8F%8D%E9%9D%A2%E6%A8%A1%E5%BC%8F)\n\n在新的容器背景下，相应的原则和模式有助于帮助我们更好的构建“云原生”的应用。我们可以看到，这些原则和模式并非对之前模式的颠覆和推翻，更像是适应新环境的演进版本。\n\n## 原则\n\n#### 单一职责原则 SINGLE CONCERN PRINCIPLE (SCP)\n与OO的单一功能相对应，每一个容器应该提供单一的职责，只关注于做好一件事。单一职责使得容器更容易重用。通常容器对应于一个进程，而该进程专注于做好一件事。\n![SINGLE CONCERN PRINCIPLE (SCP)](Container-Application-Design/1526261691982-7ead3978-fe73-423f-a675-90309a8bc859-image.png) \n\n#### 高可观测性原则 HIGH OBSERVABILITY PRINCIPLE (HOP)\n容器像对象一样，应该是一个封装良好的黑盒子。但是在云的环境下，这个黑盒子应该提供良好的观测接口，使得其在云的环境下得到相应的监控和管理。这样，整个应用才能提供一致的生命周期的管理。\n![HIGH OBSERVABILITY PRINCIPLE (HOP)](Container-Application-Design/1526261707323-33e04e90-0449-4fea-8846-49a7a3cf6915-image-resized.png) \n\n可观测性包含：\n* 提供健康检查 Health Check，或者心跳\n* 提供状态\n* 把日志输出到标准输出(STDOUT)和标准出错(STDERR)\n* 等等 \n\n#### 生命周期确认原则 LIFE-CYCLE CONFORMANCE PRINCIPLE (LCP)\n生命周期确认原则指的是容器应该提供和平台交互来处理相应的生命周期的变化。\n![LIFE-CYCLE CONFORMANCE PRINCIPLE (LCP)](Container-Application-Design/1526261801128-be721a67-971b-4f35-960e-0ce907328f73-image-resized.png) \n\n* 捕获并响应Terminate (SIGTERM)信号，来尽快优雅的终止服务进程，以避免kill (SIGKILL)信号强行终止进程。例如一下的NodeJS代码。\n```js\nprocess.on('SIGTERM', function () {\n  console.log(\"Received SIGTERM. Exiting.\")\n  server.close(function () {\n    process.exit(0);\n  });\n});\n```\n* 返回退出码\n```js\nprocess.exit(0);\n```\n\n#### 镜像不可变原则 IMAGE IMMUTABILITY PRINCIPLE (IIP)\n在运行时，配置可以不同，但是镜像应该是不可变的。\n![IMAGE IMMUTABILITY PRINCIPLE (IIP)](Container-Application-Design/1526261901806-402b717e-5379-476a-ab90-d419ff516bc8-image.png) \n我们可以理解为镜像是个类，是容器是对象实例，类是不变的，而容器是拥有不同配置参数的镜像实例。\n\n#### 进程用完既丢原则 PROCESS DISPOSABILITY PRINCIPLE (PDP)\n在云环境下，我们应该假定所有的容器都是临时的，它随时有可能被其它的容器实例所替代。\n![PROCESS DISPOSABILITY PRINCIPLE (PDP)](Container-Application-Design/1526261921352-50cf453f-a1eb-4d16-bde3-c47f7ecb5c96-image.png) \n这也就意味着需要把容器的状态保存在容器之外。并且尽可能快速的启动和终止容器。通常越小的容器就越容易实现这一点。\n\n#### 自包含原则 SELF-CONTAINMENT PRINCIPLE (S-CP)\n容器在构建的时候应该包含所有的依赖，也就是所说容器在运行时不应该有任何的外部依赖。\n![SELF-CONTAINMENT PRINCIPLE (S-CP)](Container-Application-Design/1526261951920-41f3d5f6-38ef-4619-91a1-1f802c90696a-image.png) \n\n#### 限制运行资源原则 RUNTIME CONFINEMENT PRINCIPLE (RCP)\n容器的最佳实践应该是在运行时指定容器对资源配置的需求。例如需要多少的内存，CPU等等。这样做可以使得容器编排能都更有效的调度和管理资源。\n![RUNTIME CONFINEMENT PRINCIPLE (RCP)](Container-Application-Design/1526261967663-aaa59614-51c8-43cc-bde6-237e644fbbb2-image.png) \n\n## 模式\n许多容器应用的模式和Pod的概念相关，Pod是Kubernetes为了有效的管理容器而提出的概念，它是容器的集合，我们可以理解为“超容器”（我随便发明的）。Pod包含的容器之间就好像运行在同一台机器上，这些容器共享Localhost主机地址，可以本机通信，共享卷等等。\n![](Container-Application-Design/1526261996216-83455d4d-0512-4dbb-877e-1cd6e97e76ed-image.png) \n\nKubernetes 类似云上OS，提供了用容器构建云原生应用的最佳实践。我们看看这些常见的模式都有什么。\n\n#### 边车（侧斗）（Sidecar）\n![](Container-Application-Design/1526262020618-7b150d6f-b6a3-4791-8212-38551258c423-image.png) \nSidecar是最常见的模式，在同一个Pod中，我们需要把不同的责任分在不同的容器中，对外部提供一个完整的功能。\n![](Container-Application-Design/1526262054188-bc378617-e76c-4498-9c0b-82f7704e6496-image-resized.png) \n\n这样的例子有很多，例如：\n* 上图中的Node后端和提供缓存的Redis\n* Web服务器和收集日志的服务\n* Web服务器和负责监控服务器性能数据的服务\n\n这样做有点类似面向对象的[组合模式](https://en.wikipedia.org/wiki/Composite_pattern)，好处有很多：\n![Composite Pattern Implementation - UML Class Diagram](Container-Application-Design/1526262095283-87098624-d8fc-4286-a2af-ac94f4b0f47b-image.png) \n\n* 应用单一职责原则，每一个容器只负责专注做好一件事。\n* 隔离，容器之间不会出现互相竞争资源，当一个次要功能（例如日志收集或者缓存）失效或者崩溃的时候，对主要功能的影响降至最小。\n* 可以对每一个容器进行独立的生命周期管理\n* 可以对每一个容器进行独立的弹性扩张\n* 可以方便的替换其中一个容器\n\n#### 代理（大使）容器\n![Proxy Pattern Implementation - UML Class Diagram](Container-Application-Design/1526262238219-a6221168-99d3-4f03-bfc6-ca2fad38c325-image.png) \n类似于面向对象的[Proxy模式](https://en.wikipedia.org/wiki/Proxy_pattern)，利用Pod中一个容器提供对外的访问连接。如下图中Node后端总是通过Service Discovery容器来和外部进行通信。\n![](Container-Application-Design/1526262264669-62a724a4-88d8-4511-9120-328cd7a4af15-image-resized.png) \n\n这样做，负责Node模块开发的只需要假定所有的通信都是来自于本机，而把通信的复杂性交给代理容器，去处理诸如负载均衡，安全，过滤请求，必要时中断通信等功能。\n\n#### 适配器容器\n![Adapter  Pattern Implementation - UML Class Diagram](Container-Application-Design/1526262303219-9324cca1-515f-4424-b9b8-c19b8814b9c3-image.png) \n\n大家常常会把面向对象的Proxy模式，Bridge模式和[Adapter模式](https://en.wikipedia.org/wiki/Adapter_pattern)搞混，因为单单从UML关系图上来看，它们都大同小异。似乎只是取了不同的名字。事实也确实如此，就像几乎所有的OO模式都是组合模式的衍生，所有容器模式都是边车模式的衍生。\n\n在下图的例子中，如果Logging Adapter的名字不提及Adapter，我们不会认为这是个适配器模式。\n![](Container-Application-Design/1526262348948-fce2d10f-320e-4d52-89eb-931bf394454c-image-resized.png) \n\n其实适配器模式关注的是如果把Pod内部的不同容器的功能通过适配器统一的暴漏出来。在上图中，如果我们再多加一个容器，它同时会向卷中写入日志的化，这样就更清楚了。Logging Adapter适配不同容器用不同的接口提供的日志，并提供统一的访问接口。\n\n#### 容器链\n![hain of Responsability Implementation - UML Class Diagram](Container-Application-Design/1526262383289-ee67fbb1-8251-4af3-bb61-f28db3e9bbc0-image.png) \n\n类似于OO的[责任链模式](http://www.oodesign.com/chain-of-responsibility-pattern.html)，把负责不同功能的容器按照依赖顺序链在一起，也是一种常见的模式。\n![](Container-Application-Design/1526262452948-23ea67c9-470f-4f7b-8a03-c76307b4415f-image-resized.png) \n\n#### 准备就绪的Pod\n![](Container-Application-Design/1526262469915-5b17a04f-67ce-46de-967f-8d8ef906ac68-image.png) \n\n通常作为服务的容器有一个启动的过程，在启动过程中，服务是不可用的。Kubernetes提供了[Readiness](https://kubernetes.io/docs/tasks/configure-pod-container/configure-liveness-readiness-probes/)探测功能。\n```yaml\nreadinessProbe:\n  httpGet:\n    path: /\n    port: 5000\n  timeoutSeconds: 1\n  periodSeconds: 5\n```\n和其它模式相比，这个更像是一个使用Kubernetes的最佳实践。\n\n## 反模式\n#### 构建环境和运行环境混杂在一起\n应该使得用于生产的运行环境的镜像尽可能的小，避免在运行环境的镜像中包含构建时的残留。\n\n例如下面的Dockerfile例子：\n```bash\nFROM ubuntu:14.04\n\nRUN apt-get update\nRUN apt-get install gcc\nRUN gcc hello.c -o /hello\n```\n在这个构建的镜像中，有很多不需要也不应该出现在生产环境中的东西，例如gcc，源代码hello.c。这样的结果既不安全（直接暴漏源代码），也会有性能开销（过大的镜像体积导致加载变慢）。\n\nDocker17.05 以后提供的[multi-stage builds](https://docs.docker.com/develop/develop-images/multistage-build/)也可以解决这个问题。\n\n#### 直接使用Pod\n避免直接使用Pod，用Deployment来管理Pod。利用Deployment可以很方便的对Pod进行扩展和管理。\n\n#### 使用latest标签\nLatest标签用于标记最近的稳定版本，然而在创建容器时，尽可能避免在生产环境使用Latest标签。即使使用imagePullPolicy选项为alway。\n\n#### 快速失败的任务\nJob是Kubernetes提供的只运行一次的容器，和service正好相反。要避免快速失败\n```yaml\napiVersion: batch/v1\nkind: Job\nmetadata:\n  name: bad\nspec:\n  template:\n    metadata:\n      name: bad\n    spec:\n      restartPolicy: Never\n      containers:\n      - name: box\n        image: busybox\n        command: [\"/bin/sh\", \"-c\", \"exit 1\"]\n```\n如果你尝试在你的cluster里面创建以上的Job，你可能会碰到如下的状态。\n```bash\n$ kubectl describe jobs \nName:   bad\nNamespace:  default\nImage(s): busybox\nSelector: controller-uid=18a6678e-11d1-11e7-8169-525400c83acf\nParallelism:  1\nCompletions:  1\nStart Time: Sat, 25 Mar 2017 20:05:41 -0700\nLabels:   controller-uid=18a6678e-11d1-11e7-8169-525400c83acf\n    job-name=bad\nPods Statuses:  1 Running / 0 Succeeded / 24 Failed\nNo volumes.\nEvents:\n  FirstSeen LastSeen  Count From      SubObjectPath Type    Reason      Message\n  --------- --------  ----- ----      ------------- --------  ------      -------\n  1m    1m    1 {job-controller }     Normal    SuccessfulCreate  Created pod: bad-fws8g\n  1m    1m    1 {job-controller }     Normal    SuccessfulCreate  Created pod: bad-321pk\n  1m    1m    1 {job-controller }     Normal    SuccessfulCreate  Created pod: bad-2pxq1\n  1m    1m    1 {job-controller }     Normal    SuccessfulCreate  Created pod: bad-kl2tj\n  1m    1m    1 {job-controller }     Normal    SuccessfulCreate  Created pod: bad-wfw8q\n  1m    1m    1 {job-controller }     Normal    SuccessfulCreate  Created pod: bad-lz0hq\n  1m    1m    1 {job-controller }     Normal    SuccessfulCreate  Created pod: bad-0dck0\n  1m    1m    1 {job-controller }     Normal    SuccessfulCreate  Created pod: bad-0lm8k\n  1m    1m    1 {job-controller }     Normal    SuccessfulCreate  Created pod: bad-q6ctf\n  1m    1s    16  {job-controller }     Normal    SuccessfulCreate  (events with common reason combined)\n```\n因为任务快速失败。Kubernetes认为任务没能成功启动，尝试创建新的容器以恢复这个失败，导致的Cluster会在短时间创建大量的容器，这样的结果可能会消耗大量的计算资源。\n\n在Spec中使用.spec.activeDeadlineSeconds来避免这个问题。这个参数定了等待多长时间重试失败的Job。\n\n---\n> 来源: https://my.oschina.net/taogang/blog/1809904\n\n\n\n\n\n\n\n[SOLID]: https://zh.wikipedia.org/wiki/SOLID_(%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E8%AE%BE%E8%AE%A1)\t\"SOLID\"","slug":"Container-Application-Design","published":1,"updated":"2018-05-14T03:13:00.397Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjh8jw4xd00456b8kejuebd0m","content":"<p>容器和容器编排（Kubernetes）的广泛使用，让我们可以轻松的构建基于微服务的“云原生”（Cloud Native）的应用。容器成为了云时代的新的编程单元，类似面向对象概念下的<code>对象</code>，J2EE中的<code>组件</code>或者函数式编程中的<code>函数</code>。</p>\n<p>在面向对象时代，有许多著名的设计原则，模式和反模式等，例如：</p>\n<ul>\n<li><a href=\"https://zh.wikipedia.org/wiki/SOLID_(%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E8%AE%BE%E8%AE%A1)\" title=\"SOLID\" target=\"_blank\" rel=\"noopener\">SOLID</a> (<strong>单一功能、开闭原则、里氏替换、接口隔离以及依赖反转</strong>）</li>\n<li><p><a href=\"https://zh.wikipedia.org/wiki/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%EF%BC%9A%E5%8F%AF%E5%A4%8D%E7%94%A8%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E8%BD%AF%E4%BB%B6%E7%9A%84%E5%9F%BA%E7%A1%80\" target=\"_blank\" rel=\"noopener\">Design Patterns: Elements of Reusable Object-Oriented Software</a></p>\n</li>\n<li><p><a href=\"https://zh.wikipedia.org/wiki/%E5%8F%8D%E9%9D%A2%E6%A8%A1%E5%BC%8F\" target=\"_blank\" rel=\"noopener\">Anti-Pattern</a></p>\n</li>\n</ul>\n<p>在新的容器背景下，相应的原则和模式有助于帮助我们更好的构建“云原生”的应用。我们可以看到，这些原则和模式并非对之前模式的颠覆和推翻，更像是适应新环境的演进版本。</p>\n<h2 id=\"原则\"><a href=\"#原则\" class=\"headerlink\" title=\"原则\"></a>原则</h2><h4 id=\"单一职责原则-SINGLE-CONCERN-PRINCIPLE-SCP\"><a href=\"#单一职责原则-SINGLE-CONCERN-PRINCIPLE-SCP\" class=\"headerlink\" title=\"单一职责原则 SINGLE CONCERN PRINCIPLE (SCP)\"></a>单一职责原则 SINGLE CONCERN PRINCIPLE (SCP)</h4><p>与OO的单一功能相对应，每一个容器应该提供单一的职责，只关注于做好一件事。单一职责使得容器更容易重用。通常容器对应于一个进程，而该进程专注于做好一件事。<br><img src=\"/2018-05-14/Container-Application-Design/1526261691982-7ead3978-fe73-423f-a675-90309a8bc859-image.png\" alt=\"SINGLE CONCERN PRINCIPLE (SCP)\"> </p>\n<h4 id=\"高可观测性原则-HIGH-OBSERVABILITY-PRINCIPLE-HOP\"><a href=\"#高可观测性原则-HIGH-OBSERVABILITY-PRINCIPLE-HOP\" class=\"headerlink\" title=\"高可观测性原则 HIGH OBSERVABILITY PRINCIPLE (HOP)\"></a>高可观测性原则 HIGH OBSERVABILITY PRINCIPLE (HOP)</h4><p>容器像对象一样，应该是一个封装良好的黑盒子。但是在云的环境下，这个黑盒子应该提供良好的观测接口，使得其在云的环境下得到相应的监控和管理。这样，整个应用才能提供一致的生命周期的管理。<br><img src=\"/2018-05-14/Container-Application-Design/1526261707323-33e04e90-0449-4fea-8846-49a7a3cf6915-image-resized.png\" alt=\"HIGH OBSERVABILITY PRINCIPLE (HOP)\"> </p>\n<p>可观测性包含：</p>\n<ul>\n<li>提供健康检查 Health Check，或者心跳</li>\n<li>提供状态</li>\n<li>把日志输出到标准输出(STDOUT)和标准出错(STDERR)</li>\n<li>等等 </li>\n</ul>\n<h4 id=\"生命周期确认原则-LIFE-CYCLE-CONFORMANCE-PRINCIPLE-LCP\"><a href=\"#生命周期确认原则-LIFE-CYCLE-CONFORMANCE-PRINCIPLE-LCP\" class=\"headerlink\" title=\"生命周期确认原则 LIFE-CYCLE CONFORMANCE PRINCIPLE (LCP)\"></a>生命周期确认原则 LIFE-CYCLE CONFORMANCE PRINCIPLE (LCP)</h4><p>生命周期确认原则指的是容器应该提供和平台交互来处理相应的生命周期的变化。<br><img src=\"/2018-05-14/Container-Application-Design/1526261801128-be721a67-971b-4f35-960e-0ce907328f73-image-resized.png\" alt=\"LIFE-CYCLE CONFORMANCE PRINCIPLE (LCP)\"> </p>\n<ul>\n<li><p>捕获并响应Terminate (SIGTERM)信号，来尽快优雅的终止服务进程，以避免kill (SIGKILL)信号强行终止进程。例如一下的NodeJS代码。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">process.on(<span class=\"string\">'SIGTERM'</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">\"Received SIGTERM. Exiting.\"</span>)</span><br><span class=\"line\">  server.close(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    process.exit(<span class=\"number\">0</span>);</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>返回退出码</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">process.exit(<span class=\"number\">0</span>);</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h4 id=\"镜像不可变原则-IMAGE-IMMUTABILITY-PRINCIPLE-IIP\"><a href=\"#镜像不可变原则-IMAGE-IMMUTABILITY-PRINCIPLE-IIP\" class=\"headerlink\" title=\"镜像不可变原则 IMAGE IMMUTABILITY PRINCIPLE (IIP)\"></a>镜像不可变原则 IMAGE IMMUTABILITY PRINCIPLE (IIP)</h4><p>在运行时，配置可以不同，但是镜像应该是不可变的。<br><img src=\"/2018-05-14/Container-Application-Design/1526261901806-402b717e-5379-476a-ab90-d419ff516bc8-image.png\" alt=\"IMAGE IMMUTABILITY PRINCIPLE (IIP)\"><br>我们可以理解为镜像是个类，是容器是对象实例，类是不变的，而容器是拥有不同配置参数的镜像实例。</p>\n<h4 id=\"进程用完既丢原则-PROCESS-DISPOSABILITY-PRINCIPLE-PDP\"><a href=\"#进程用完既丢原则-PROCESS-DISPOSABILITY-PRINCIPLE-PDP\" class=\"headerlink\" title=\"进程用完既丢原则 PROCESS DISPOSABILITY PRINCIPLE (PDP)\"></a>进程用完既丢原则 PROCESS DISPOSABILITY PRINCIPLE (PDP)</h4><p>在云环境下，我们应该假定所有的容器都是临时的，它随时有可能被其它的容器实例所替代。<br><img src=\"/2018-05-14/Container-Application-Design/1526261921352-50cf453f-a1eb-4d16-bde3-c47f7ecb5c96-image.png\" alt=\"PROCESS DISPOSABILITY PRINCIPLE (PDP)\"><br>这也就意味着需要把容器的状态保存在容器之外。并且尽可能快速的启动和终止容器。通常越小的容器就越容易实现这一点。</p>\n<h4 id=\"自包含原则-SELF-CONTAINMENT-PRINCIPLE-S-CP\"><a href=\"#自包含原则-SELF-CONTAINMENT-PRINCIPLE-S-CP\" class=\"headerlink\" title=\"自包含原则 SELF-CONTAINMENT PRINCIPLE (S-CP)\"></a>自包含原则 SELF-CONTAINMENT PRINCIPLE (S-CP)</h4><p>容器在构建的时候应该包含所有的依赖，也就是所说容器在运行时不应该有任何的外部依赖。<br><img src=\"/2018-05-14/Container-Application-Design/1526261951920-41f3d5f6-38ef-4619-91a1-1f802c90696a-image.png\" alt=\"SELF-CONTAINMENT PRINCIPLE (S-CP)\"> </p>\n<h4 id=\"限制运行资源原则-RUNTIME-CONFINEMENT-PRINCIPLE-RCP\"><a href=\"#限制运行资源原则-RUNTIME-CONFINEMENT-PRINCIPLE-RCP\" class=\"headerlink\" title=\"限制运行资源原则 RUNTIME CONFINEMENT PRINCIPLE (RCP)\"></a>限制运行资源原则 RUNTIME CONFINEMENT PRINCIPLE (RCP)</h4><p>容器的最佳实践应该是在运行时指定容器对资源配置的需求。例如需要多少的内存，CPU等等。这样做可以使得容器编排能都更有效的调度和管理资源。<br><img src=\"/2018-05-14/Container-Application-Design/1526261967663-aaa59614-51c8-43cc-bde6-237e644fbbb2-image.png\" alt=\"RUNTIME CONFINEMENT PRINCIPLE (RCP)\"> </p>\n<h2 id=\"模式\"><a href=\"#模式\" class=\"headerlink\" title=\"模式\"></a>模式</h2><p>许多容器应用的模式和Pod的概念相关，Pod是Kubernetes为了有效的管理容器而提出的概念，它是容器的集合，我们可以理解为“超容器”（我随便发明的）。Pod包含的容器之间就好像运行在同一台机器上，这些容器共享Localhost主机地址，可以本机通信，共享卷等等。<br><img src=\"/2018-05-14/Container-Application-Design/1526261996216-83455d4d-0512-4dbb-877e-1cd6e97e76ed-image.png\" alt=\"\"> </p>\n<p>Kubernetes 类似云上OS，提供了用容器构建云原生应用的最佳实践。我们看看这些常见的模式都有什么。</p>\n<h4 id=\"边车（侧斗）（Sidecar）\"><a href=\"#边车（侧斗）（Sidecar）\" class=\"headerlink\" title=\"边车（侧斗）（Sidecar）\"></a>边车（侧斗）（Sidecar）</h4><p><img src=\"/2018-05-14/Container-Application-Design/1526262020618-7b150d6f-b6a3-4791-8212-38551258c423-image.png\" alt=\"\"><br>Sidecar是最常见的模式，在同一个Pod中，我们需要把不同的责任分在不同的容器中，对外部提供一个完整的功能。<br><img src=\"/2018-05-14/Container-Application-Design/1526262054188-bc378617-e76c-4498-9c0b-82f7704e6496-image-resized.png\" alt=\"\"> </p>\n<p>这样的例子有很多，例如：</p>\n<ul>\n<li>上图中的Node后端和提供缓存的Redis</li>\n<li>Web服务器和收集日志的服务</li>\n<li>Web服务器和负责监控服务器性能数据的服务</li>\n</ul>\n<p>这样做有点类似面向对象的<a href=\"https://en.wikipedia.org/wiki/Composite_pattern\" target=\"_blank\" rel=\"noopener\">组合模式</a>，好处有很多：<br><img src=\"/2018-05-14/Container-Application-Design/1526262095283-87098624-d8fc-4286-a2af-ac94f4b0f47b-image.png\" alt=\"Composite Pattern Implementation - UML Class Diagram\"> </p>\n<ul>\n<li>应用单一职责原则，每一个容器只负责专注做好一件事。</li>\n<li>隔离，容器之间不会出现互相竞争资源，当一个次要功能（例如日志收集或者缓存）失效或者崩溃的时候，对主要功能的影响降至最小。</li>\n<li>可以对每一个容器进行独立的生命周期管理</li>\n<li>可以对每一个容器进行独立的弹性扩张</li>\n<li>可以方便的替换其中一个容器</li>\n</ul>\n<h4 id=\"代理（大使）容器\"><a href=\"#代理（大使）容器\" class=\"headerlink\" title=\"代理（大使）容器\"></a>代理（大使）容器</h4><p><img src=\"/2018-05-14/Container-Application-Design/1526262238219-a6221168-99d3-4f03-bfc6-ca2fad38c325-image.png\" alt=\"Proxy Pattern Implementation - UML Class Diagram\"><br>类似于面向对象的<a href=\"https://en.wikipedia.org/wiki/Proxy_pattern\" target=\"_blank\" rel=\"noopener\">Proxy模式</a>，利用Pod中一个容器提供对外的访问连接。如下图中Node后端总是通过Service Discovery容器来和外部进行通信。<br><img src=\"/2018-05-14/Container-Application-Design/1526262264669-62a724a4-88d8-4511-9120-328cd7a4af15-image-resized.png\" alt=\"\"> </p>\n<p>这样做，负责Node模块开发的只需要假定所有的通信都是来自于本机，而把通信的复杂性交给代理容器，去处理诸如负载均衡，安全，过滤请求，必要时中断通信等功能。</p>\n<h4 id=\"适配器容器\"><a href=\"#适配器容器\" class=\"headerlink\" title=\"适配器容器\"></a>适配器容器</h4><p><img src=\"/2018-05-14/Container-Application-Design/1526262303219-9324cca1-515f-4424-b9b8-c19b8814b9c3-image.png\" alt=\"Adapter  Pattern Implementation - UML Class Diagram\"> </p>\n<p>大家常常会把面向对象的Proxy模式，Bridge模式和<a href=\"https://en.wikipedia.org/wiki/Adapter_pattern\" target=\"_blank\" rel=\"noopener\">Adapter模式</a>搞混，因为单单从UML关系图上来看，它们都大同小异。似乎只是取了不同的名字。事实也确实如此，就像几乎所有的OO模式都是组合模式的衍生，所有容器模式都是边车模式的衍生。</p>\n<p>在下图的例子中，如果Logging Adapter的名字不提及Adapter，我们不会认为这是个适配器模式。<br><img src=\"/2018-05-14/Container-Application-Design/1526262348948-fce2d10f-320e-4d52-89eb-931bf394454c-image-resized.png\" alt=\"\"> </p>\n<p>其实适配器模式关注的是如果把Pod内部的不同容器的功能通过适配器统一的暴漏出来。在上图中，如果我们再多加一个容器，它同时会向卷中写入日志的化，这样就更清楚了。Logging Adapter适配不同容器用不同的接口提供的日志，并提供统一的访问接口。</p>\n<h4 id=\"容器链\"><a href=\"#容器链\" class=\"headerlink\" title=\"容器链\"></a>容器链</h4><p><img src=\"/2018-05-14/Container-Application-Design/1526262383289-ee67fbb1-8251-4af3-bb61-f28db3e9bbc0-image.png\" alt=\"hain of Responsability Implementation - UML Class Diagram\"> </p>\n<p>类似于OO的<a href=\"http://www.oodesign.com/chain-of-responsibility-pattern.html\" target=\"_blank\" rel=\"noopener\">责任链模式</a>，把负责不同功能的容器按照依赖顺序链在一起，也是一种常见的模式。<br><img src=\"/2018-05-14/Container-Application-Design/1526262452948-23ea67c9-470f-4f7b-8a03-c76307b4415f-image-resized.png\" alt=\"\"> </p>\n<h4 id=\"准备就绪的Pod\"><a href=\"#准备就绪的Pod\" class=\"headerlink\" title=\"准备就绪的Pod\"></a>准备就绪的Pod</h4><p><img src=\"/2018-05-14/Container-Application-Design/1526262469915-5b17a04f-67ce-46de-967f-8d8ef906ac68-image.png\" alt=\"\"> </p>\n<p>通常作为服务的容器有一个启动的过程，在启动过程中，服务是不可用的。Kubernetes提供了<a href=\"https://kubernetes.io/docs/tasks/configure-pod-container/configure-liveness-readiness-probes/\" target=\"_blank\" rel=\"noopener\">Readiness</a>探测功能。<br><figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">readinessProbe:</span></span><br><span class=\"line\"><span class=\"attr\">  httpGet:</span></span><br><span class=\"line\"><span class=\"attr\">    path:</span> <span class=\"string\">/</span></span><br><span class=\"line\"><span class=\"attr\">    port:</span> <span class=\"number\">5000</span></span><br><span class=\"line\"><span class=\"attr\">  timeoutSeconds:</span> <span class=\"number\">1</span></span><br><span class=\"line\"><span class=\"attr\">  periodSeconds:</span> <span class=\"number\">5</span></span><br></pre></td></tr></table></figure></p>\n<p>和其它模式相比，这个更像是一个使用Kubernetes的最佳实践。</p>\n<h2 id=\"反模式\"><a href=\"#反模式\" class=\"headerlink\" title=\"反模式\"></a>反模式</h2><h4 id=\"构建环境和运行环境混杂在一起\"><a href=\"#构建环境和运行环境混杂在一起\" class=\"headerlink\" title=\"构建环境和运行环境混杂在一起\"></a>构建环境和运行环境混杂在一起</h4><p>应该使得用于生产的运行环境的镜像尽可能的小，避免在运行环境的镜像中包含构建时的残留。</p>\n<p>例如下面的Dockerfile例子：<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">FROM ubuntu:14.04</span><br><span class=\"line\"></span><br><span class=\"line\">RUN apt-get update</span><br><span class=\"line\">RUN apt-get install gcc</span><br><span class=\"line\">RUN gcc hello.c -o /hello</span><br></pre></td></tr></table></figure></p>\n<p>在这个构建的镜像中，有很多不需要也不应该出现在生产环境中的东西，例如gcc，源代码hello.c。这样的结果既不安全（直接暴漏源代码），也会有性能开销（过大的镜像体积导致加载变慢）。</p>\n<p>Docker17.05 以后提供的<a href=\"https://docs.docker.com/develop/develop-images/multistage-build/\" target=\"_blank\" rel=\"noopener\">multi-stage builds</a>也可以解决这个问题。</p>\n<h4 id=\"直接使用Pod\"><a href=\"#直接使用Pod\" class=\"headerlink\" title=\"直接使用Pod\"></a>直接使用Pod</h4><p>避免直接使用Pod，用Deployment来管理Pod。利用Deployment可以很方便的对Pod进行扩展和管理。</p>\n<h4 id=\"使用latest标签\"><a href=\"#使用latest标签\" class=\"headerlink\" title=\"使用latest标签\"></a>使用latest标签</h4><p>Latest标签用于标记最近的稳定版本，然而在创建容器时，尽可能避免在生产环境使用Latest标签。即使使用imagePullPolicy选项为alway。</p>\n<h4 id=\"快速失败的任务\"><a href=\"#快速失败的任务\" class=\"headerlink\" title=\"快速失败的任务\"></a>快速失败的任务</h4><p>Job是Kubernetes提供的只运行一次的容器，和service正好相反。要避免快速失败<br><figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">apiVersion:</span> <span class=\"string\">batch/v1</span></span><br><span class=\"line\"><span class=\"attr\">kind:</span> <span class=\"string\">Job</span></span><br><span class=\"line\"><span class=\"attr\">metadata:</span></span><br><span class=\"line\"><span class=\"attr\">  name:</span> <span class=\"string\">bad</span></span><br><span class=\"line\"><span class=\"attr\">spec:</span></span><br><span class=\"line\"><span class=\"attr\">  template:</span></span><br><span class=\"line\"><span class=\"attr\">    metadata:</span></span><br><span class=\"line\"><span class=\"attr\">      name:</span> <span class=\"string\">bad</span></span><br><span class=\"line\"><span class=\"attr\">    spec:</span></span><br><span class=\"line\"><span class=\"attr\">      restartPolicy:</span> <span class=\"string\">Never</span></span><br><span class=\"line\"><span class=\"attr\">      containers:</span></span><br><span class=\"line\"><span class=\"attr\">      - name:</span> <span class=\"string\">box</span></span><br><span class=\"line\"><span class=\"attr\">        image:</span> <span class=\"string\">busybox</span></span><br><span class=\"line\"><span class=\"attr\">        command:</span> <span class=\"string\">[\"/bin/sh\",</span> <span class=\"string\">\"-c\"</span><span class=\"string\">,</span> <span class=\"string\">\"exit 1\"</span><span class=\"string\">]</span></span><br></pre></td></tr></table></figure></p>\n<p>如果你尝试在你的cluster里面创建以上的Job，你可能会碰到如下的状态。<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ kubectl describe <span class=\"built_in\">jobs</span> </span><br><span class=\"line\">Name:   bad</span><br><span class=\"line\">Namespace:  default</span><br><span class=\"line\">Image(s): busybox</span><br><span class=\"line\">Selector: controller-uid=18a6678e-11d1-11e7-8169-525400c83acf</span><br><span class=\"line\">Parallelism:  1</span><br><span class=\"line\">Completions:  1</span><br><span class=\"line\">Start Time: Sat, 25 Mar 2017 20:05:41 -0700</span><br><span class=\"line\">Labels:   controller-uid=18a6678e-11d1-11e7-8169-525400c83acf</span><br><span class=\"line\">    job-name=bad</span><br><span class=\"line\">Pods Statuses:  1 Running / 0 Succeeded / 24 Failed</span><br><span class=\"line\">No volumes.</span><br><span class=\"line\">Events:</span><br><span class=\"line\">  FirstSeen LastSeen  Count From      SubObjectPath Type    Reason      Message</span><br><span class=\"line\">  --------- --------  ----- ----      ------------- --------  ------      -------</span><br><span class=\"line\">  1m    1m    1 &#123;job-controller &#125;     Normal    SuccessfulCreate  Created pod: bad-fws8g</span><br><span class=\"line\">  1m    1m    1 &#123;job-controller &#125;     Normal    SuccessfulCreate  Created pod: bad-321pk</span><br><span class=\"line\">  1m    1m    1 &#123;job-controller &#125;     Normal    SuccessfulCreate  Created pod: bad-2pxq1</span><br><span class=\"line\">  1m    1m    1 &#123;job-controller &#125;     Normal    SuccessfulCreate  Created pod: bad-kl2tj</span><br><span class=\"line\">  1m    1m    1 &#123;job-controller &#125;     Normal    SuccessfulCreate  Created pod: bad-wfw8q</span><br><span class=\"line\">  1m    1m    1 &#123;job-controller &#125;     Normal    SuccessfulCreate  Created pod: bad-lz0hq</span><br><span class=\"line\">  1m    1m    1 &#123;job-controller &#125;     Normal    SuccessfulCreate  Created pod: bad-0dck0</span><br><span class=\"line\">  1m    1m    1 &#123;job-controller &#125;     Normal    SuccessfulCreate  Created pod: bad-0lm8k</span><br><span class=\"line\">  1m    1m    1 &#123;job-controller &#125;     Normal    SuccessfulCreate  Created pod: bad-q6ctf</span><br><span class=\"line\">  1m    1s    16  &#123;job-controller &#125;     Normal    SuccessfulCreate  (events with common reason combined)</span><br></pre></td></tr></table></figure></p>\n<p>因为任务快速失败。Kubernetes认为任务没能成功启动，尝试创建新的容器以恢复这个失败，导致的Cluster会在短时间创建大量的容器，这样的结果可能会消耗大量的计算资源。</p>\n<p>在Spec中使用.spec.activeDeadlineSeconds来避免这个问题。这个参数定了等待多长时间重试失败的Job。</p>\n<hr>\n<blockquote>\n<p>来源: <a href=\"https://my.oschina.net/taogang/blog/1809904\" target=\"_blank\" rel=\"noopener\">https://my.oschina.net/taogang/blog/1809904</a></p>\n</blockquote>\n","site":{"data":{}},"excerpt":"","more":"<p>容器和容器编排（Kubernetes）的广泛使用，让我们可以轻松的构建基于微服务的“云原生”（Cloud Native）的应用。容器成为了云时代的新的编程单元，类似面向对象概念下的<code>对象</code>，J2EE中的<code>组件</code>或者函数式编程中的<code>函数</code>。</p>\n<p>在面向对象时代，有许多著名的设计原则，模式和反模式等，例如：</p>\n<ul>\n<li><a href=\"https://zh.wikipedia.org/wiki/SOLID_(%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E8%AE%BE%E8%AE%A1)\" title=\"SOLID\" target=\"_blank\" rel=\"noopener\">SOLID</a> (<strong>单一功能、开闭原则、里氏替换、接口隔离以及依赖反转</strong>）</li>\n<li><p><a href=\"https://zh.wikipedia.org/wiki/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%EF%BC%9A%E5%8F%AF%E5%A4%8D%E7%94%A8%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E8%BD%AF%E4%BB%B6%E7%9A%84%E5%9F%BA%E7%A1%80\" target=\"_blank\" rel=\"noopener\">Design Patterns: Elements of Reusable Object-Oriented Software</a></p>\n</li>\n<li><p><a href=\"https://zh.wikipedia.org/wiki/%E5%8F%8D%E9%9D%A2%E6%A8%A1%E5%BC%8F\" target=\"_blank\" rel=\"noopener\">Anti-Pattern</a></p>\n</li>\n</ul>\n<p>在新的容器背景下，相应的原则和模式有助于帮助我们更好的构建“云原生”的应用。我们可以看到，这些原则和模式并非对之前模式的颠覆和推翻，更像是适应新环境的演进版本。</p>\n<h2 id=\"原则\"><a href=\"#原则\" class=\"headerlink\" title=\"原则\"></a>原则</h2><h4 id=\"单一职责原则-SINGLE-CONCERN-PRINCIPLE-SCP\"><a href=\"#单一职责原则-SINGLE-CONCERN-PRINCIPLE-SCP\" class=\"headerlink\" title=\"单一职责原则 SINGLE CONCERN PRINCIPLE (SCP)\"></a>单一职责原则 SINGLE CONCERN PRINCIPLE (SCP)</h4><p>与OO的单一功能相对应，每一个容器应该提供单一的职责，只关注于做好一件事。单一职责使得容器更容易重用。通常容器对应于一个进程，而该进程专注于做好一件事。<br><img src=\"/2018-05-14/Container-Application-Design/1526261691982-7ead3978-fe73-423f-a675-90309a8bc859-image.png\" alt=\"SINGLE CONCERN PRINCIPLE (SCP)\"> </p>\n<h4 id=\"高可观测性原则-HIGH-OBSERVABILITY-PRINCIPLE-HOP\"><a href=\"#高可观测性原则-HIGH-OBSERVABILITY-PRINCIPLE-HOP\" class=\"headerlink\" title=\"高可观测性原则 HIGH OBSERVABILITY PRINCIPLE (HOP)\"></a>高可观测性原则 HIGH OBSERVABILITY PRINCIPLE (HOP)</h4><p>容器像对象一样，应该是一个封装良好的黑盒子。但是在云的环境下，这个黑盒子应该提供良好的观测接口，使得其在云的环境下得到相应的监控和管理。这样，整个应用才能提供一致的生命周期的管理。<br><img src=\"/2018-05-14/Container-Application-Design/1526261707323-33e04e90-0449-4fea-8846-49a7a3cf6915-image-resized.png\" alt=\"HIGH OBSERVABILITY PRINCIPLE (HOP)\"> </p>\n<p>可观测性包含：</p>\n<ul>\n<li>提供健康检查 Health Check，或者心跳</li>\n<li>提供状态</li>\n<li>把日志输出到标准输出(STDOUT)和标准出错(STDERR)</li>\n<li>等等 </li>\n</ul>\n<h4 id=\"生命周期确认原则-LIFE-CYCLE-CONFORMANCE-PRINCIPLE-LCP\"><a href=\"#生命周期确认原则-LIFE-CYCLE-CONFORMANCE-PRINCIPLE-LCP\" class=\"headerlink\" title=\"生命周期确认原则 LIFE-CYCLE CONFORMANCE PRINCIPLE (LCP)\"></a>生命周期确认原则 LIFE-CYCLE CONFORMANCE PRINCIPLE (LCP)</h4><p>生命周期确认原则指的是容器应该提供和平台交互来处理相应的生命周期的变化。<br><img src=\"/2018-05-14/Container-Application-Design/1526261801128-be721a67-971b-4f35-960e-0ce907328f73-image-resized.png\" alt=\"LIFE-CYCLE CONFORMANCE PRINCIPLE (LCP)\"> </p>\n<ul>\n<li><p>捕获并响应Terminate (SIGTERM)信号，来尽快优雅的终止服务进程，以避免kill (SIGKILL)信号强行终止进程。例如一下的NodeJS代码。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">process.on(<span class=\"string\">'SIGTERM'</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">\"Received SIGTERM. Exiting.\"</span>)</span><br><span class=\"line\">  server.close(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    process.exit(<span class=\"number\">0</span>);</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>返回退出码</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">process.exit(<span class=\"number\">0</span>);</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h4 id=\"镜像不可变原则-IMAGE-IMMUTABILITY-PRINCIPLE-IIP\"><a href=\"#镜像不可变原则-IMAGE-IMMUTABILITY-PRINCIPLE-IIP\" class=\"headerlink\" title=\"镜像不可变原则 IMAGE IMMUTABILITY PRINCIPLE (IIP)\"></a>镜像不可变原则 IMAGE IMMUTABILITY PRINCIPLE (IIP)</h4><p>在运行时，配置可以不同，但是镜像应该是不可变的。<br><img src=\"/2018-05-14/Container-Application-Design/1526261901806-402b717e-5379-476a-ab90-d419ff516bc8-image.png\" alt=\"IMAGE IMMUTABILITY PRINCIPLE (IIP)\"><br>我们可以理解为镜像是个类，是容器是对象实例，类是不变的，而容器是拥有不同配置参数的镜像实例。</p>\n<h4 id=\"进程用完既丢原则-PROCESS-DISPOSABILITY-PRINCIPLE-PDP\"><a href=\"#进程用完既丢原则-PROCESS-DISPOSABILITY-PRINCIPLE-PDP\" class=\"headerlink\" title=\"进程用完既丢原则 PROCESS DISPOSABILITY PRINCIPLE (PDP)\"></a>进程用完既丢原则 PROCESS DISPOSABILITY PRINCIPLE (PDP)</h4><p>在云环境下，我们应该假定所有的容器都是临时的，它随时有可能被其它的容器实例所替代。<br><img src=\"/2018-05-14/Container-Application-Design/1526261921352-50cf453f-a1eb-4d16-bde3-c47f7ecb5c96-image.png\" alt=\"PROCESS DISPOSABILITY PRINCIPLE (PDP)\"><br>这也就意味着需要把容器的状态保存在容器之外。并且尽可能快速的启动和终止容器。通常越小的容器就越容易实现这一点。</p>\n<h4 id=\"自包含原则-SELF-CONTAINMENT-PRINCIPLE-S-CP\"><a href=\"#自包含原则-SELF-CONTAINMENT-PRINCIPLE-S-CP\" class=\"headerlink\" title=\"自包含原则 SELF-CONTAINMENT PRINCIPLE (S-CP)\"></a>自包含原则 SELF-CONTAINMENT PRINCIPLE (S-CP)</h4><p>容器在构建的时候应该包含所有的依赖，也就是所说容器在运行时不应该有任何的外部依赖。<br><img src=\"/2018-05-14/Container-Application-Design/1526261951920-41f3d5f6-38ef-4619-91a1-1f802c90696a-image.png\" alt=\"SELF-CONTAINMENT PRINCIPLE (S-CP)\"> </p>\n<h4 id=\"限制运行资源原则-RUNTIME-CONFINEMENT-PRINCIPLE-RCP\"><a href=\"#限制运行资源原则-RUNTIME-CONFINEMENT-PRINCIPLE-RCP\" class=\"headerlink\" title=\"限制运行资源原则 RUNTIME CONFINEMENT PRINCIPLE (RCP)\"></a>限制运行资源原则 RUNTIME CONFINEMENT PRINCIPLE (RCP)</h4><p>容器的最佳实践应该是在运行时指定容器对资源配置的需求。例如需要多少的内存，CPU等等。这样做可以使得容器编排能都更有效的调度和管理资源。<br><img src=\"/2018-05-14/Container-Application-Design/1526261967663-aaa59614-51c8-43cc-bde6-237e644fbbb2-image.png\" alt=\"RUNTIME CONFINEMENT PRINCIPLE (RCP)\"> </p>\n<h2 id=\"模式\"><a href=\"#模式\" class=\"headerlink\" title=\"模式\"></a>模式</h2><p>许多容器应用的模式和Pod的概念相关，Pod是Kubernetes为了有效的管理容器而提出的概念，它是容器的集合，我们可以理解为“超容器”（我随便发明的）。Pod包含的容器之间就好像运行在同一台机器上，这些容器共享Localhost主机地址，可以本机通信，共享卷等等。<br><img src=\"/2018-05-14/Container-Application-Design/1526261996216-83455d4d-0512-4dbb-877e-1cd6e97e76ed-image.png\" alt=\"\"> </p>\n<p>Kubernetes 类似云上OS，提供了用容器构建云原生应用的最佳实践。我们看看这些常见的模式都有什么。</p>\n<h4 id=\"边车（侧斗）（Sidecar）\"><a href=\"#边车（侧斗）（Sidecar）\" class=\"headerlink\" title=\"边车（侧斗）（Sidecar）\"></a>边车（侧斗）（Sidecar）</h4><p><img src=\"/2018-05-14/Container-Application-Design/1526262020618-7b150d6f-b6a3-4791-8212-38551258c423-image.png\" alt=\"\"><br>Sidecar是最常见的模式，在同一个Pod中，我们需要把不同的责任分在不同的容器中，对外部提供一个完整的功能。<br><img src=\"/2018-05-14/Container-Application-Design/1526262054188-bc378617-e76c-4498-9c0b-82f7704e6496-image-resized.png\" alt=\"\"> </p>\n<p>这样的例子有很多，例如：</p>\n<ul>\n<li>上图中的Node后端和提供缓存的Redis</li>\n<li>Web服务器和收集日志的服务</li>\n<li>Web服务器和负责监控服务器性能数据的服务</li>\n</ul>\n<p>这样做有点类似面向对象的<a href=\"https://en.wikipedia.org/wiki/Composite_pattern\" target=\"_blank\" rel=\"noopener\">组合模式</a>，好处有很多：<br><img src=\"/2018-05-14/Container-Application-Design/1526262095283-87098624-d8fc-4286-a2af-ac94f4b0f47b-image.png\" alt=\"Composite Pattern Implementation - UML Class Diagram\"> </p>\n<ul>\n<li>应用单一职责原则，每一个容器只负责专注做好一件事。</li>\n<li>隔离，容器之间不会出现互相竞争资源，当一个次要功能（例如日志收集或者缓存）失效或者崩溃的时候，对主要功能的影响降至最小。</li>\n<li>可以对每一个容器进行独立的生命周期管理</li>\n<li>可以对每一个容器进行独立的弹性扩张</li>\n<li>可以方便的替换其中一个容器</li>\n</ul>\n<h4 id=\"代理（大使）容器\"><a href=\"#代理（大使）容器\" class=\"headerlink\" title=\"代理（大使）容器\"></a>代理（大使）容器</h4><p><img src=\"/2018-05-14/Container-Application-Design/1526262238219-a6221168-99d3-4f03-bfc6-ca2fad38c325-image.png\" alt=\"Proxy Pattern Implementation - UML Class Diagram\"><br>类似于面向对象的<a href=\"https://en.wikipedia.org/wiki/Proxy_pattern\" target=\"_blank\" rel=\"noopener\">Proxy模式</a>，利用Pod中一个容器提供对外的访问连接。如下图中Node后端总是通过Service Discovery容器来和外部进行通信。<br><img src=\"/2018-05-14/Container-Application-Design/1526262264669-62a724a4-88d8-4511-9120-328cd7a4af15-image-resized.png\" alt=\"\"> </p>\n<p>这样做，负责Node模块开发的只需要假定所有的通信都是来自于本机，而把通信的复杂性交给代理容器，去处理诸如负载均衡，安全，过滤请求，必要时中断通信等功能。</p>\n<h4 id=\"适配器容器\"><a href=\"#适配器容器\" class=\"headerlink\" title=\"适配器容器\"></a>适配器容器</h4><p><img src=\"/2018-05-14/Container-Application-Design/1526262303219-9324cca1-515f-4424-b9b8-c19b8814b9c3-image.png\" alt=\"Adapter  Pattern Implementation - UML Class Diagram\"> </p>\n<p>大家常常会把面向对象的Proxy模式，Bridge模式和<a href=\"https://en.wikipedia.org/wiki/Adapter_pattern\" target=\"_blank\" rel=\"noopener\">Adapter模式</a>搞混，因为单单从UML关系图上来看，它们都大同小异。似乎只是取了不同的名字。事实也确实如此，就像几乎所有的OO模式都是组合模式的衍生，所有容器模式都是边车模式的衍生。</p>\n<p>在下图的例子中，如果Logging Adapter的名字不提及Adapter，我们不会认为这是个适配器模式。<br><img src=\"/2018-05-14/Container-Application-Design/1526262348948-fce2d10f-320e-4d52-89eb-931bf394454c-image-resized.png\" alt=\"\"> </p>\n<p>其实适配器模式关注的是如果把Pod内部的不同容器的功能通过适配器统一的暴漏出来。在上图中，如果我们再多加一个容器，它同时会向卷中写入日志的化，这样就更清楚了。Logging Adapter适配不同容器用不同的接口提供的日志，并提供统一的访问接口。</p>\n<h4 id=\"容器链\"><a href=\"#容器链\" class=\"headerlink\" title=\"容器链\"></a>容器链</h4><p><img src=\"/2018-05-14/Container-Application-Design/1526262383289-ee67fbb1-8251-4af3-bb61-f28db3e9bbc0-image.png\" alt=\"hain of Responsability Implementation - UML Class Diagram\"> </p>\n<p>类似于OO的<a href=\"http://www.oodesign.com/chain-of-responsibility-pattern.html\" target=\"_blank\" rel=\"noopener\">责任链模式</a>，把负责不同功能的容器按照依赖顺序链在一起，也是一种常见的模式。<br><img src=\"/2018-05-14/Container-Application-Design/1526262452948-23ea67c9-470f-4f7b-8a03-c76307b4415f-image-resized.png\" alt=\"\"> </p>\n<h4 id=\"准备就绪的Pod\"><a href=\"#准备就绪的Pod\" class=\"headerlink\" title=\"准备就绪的Pod\"></a>准备就绪的Pod</h4><p><img src=\"/2018-05-14/Container-Application-Design/1526262469915-5b17a04f-67ce-46de-967f-8d8ef906ac68-image.png\" alt=\"\"> </p>\n<p>通常作为服务的容器有一个启动的过程，在启动过程中，服务是不可用的。Kubernetes提供了<a href=\"https://kubernetes.io/docs/tasks/configure-pod-container/configure-liveness-readiness-probes/\" target=\"_blank\" rel=\"noopener\">Readiness</a>探测功能。<br><figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">readinessProbe:</span></span><br><span class=\"line\"><span class=\"attr\">  httpGet:</span></span><br><span class=\"line\"><span class=\"attr\">    path:</span> <span class=\"string\">/</span></span><br><span class=\"line\"><span class=\"attr\">    port:</span> <span class=\"number\">5000</span></span><br><span class=\"line\"><span class=\"attr\">  timeoutSeconds:</span> <span class=\"number\">1</span></span><br><span class=\"line\"><span class=\"attr\">  periodSeconds:</span> <span class=\"number\">5</span></span><br></pre></td></tr></table></figure></p>\n<p>和其它模式相比，这个更像是一个使用Kubernetes的最佳实践。</p>\n<h2 id=\"反模式\"><a href=\"#反模式\" class=\"headerlink\" title=\"反模式\"></a>反模式</h2><h4 id=\"构建环境和运行环境混杂在一起\"><a href=\"#构建环境和运行环境混杂在一起\" class=\"headerlink\" title=\"构建环境和运行环境混杂在一起\"></a>构建环境和运行环境混杂在一起</h4><p>应该使得用于生产的运行环境的镜像尽可能的小，避免在运行环境的镜像中包含构建时的残留。</p>\n<p>例如下面的Dockerfile例子：<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">FROM ubuntu:14.04</span><br><span class=\"line\"></span><br><span class=\"line\">RUN apt-get update</span><br><span class=\"line\">RUN apt-get install gcc</span><br><span class=\"line\">RUN gcc hello.c -o /hello</span><br></pre></td></tr></table></figure></p>\n<p>在这个构建的镜像中，有很多不需要也不应该出现在生产环境中的东西，例如gcc，源代码hello.c。这样的结果既不安全（直接暴漏源代码），也会有性能开销（过大的镜像体积导致加载变慢）。</p>\n<p>Docker17.05 以后提供的<a href=\"https://docs.docker.com/develop/develop-images/multistage-build/\" target=\"_blank\" rel=\"noopener\">multi-stage builds</a>也可以解决这个问题。</p>\n<h4 id=\"直接使用Pod\"><a href=\"#直接使用Pod\" class=\"headerlink\" title=\"直接使用Pod\"></a>直接使用Pod</h4><p>避免直接使用Pod，用Deployment来管理Pod。利用Deployment可以很方便的对Pod进行扩展和管理。</p>\n<h4 id=\"使用latest标签\"><a href=\"#使用latest标签\" class=\"headerlink\" title=\"使用latest标签\"></a>使用latest标签</h4><p>Latest标签用于标记最近的稳定版本，然而在创建容器时，尽可能避免在生产环境使用Latest标签。即使使用imagePullPolicy选项为alway。</p>\n<h4 id=\"快速失败的任务\"><a href=\"#快速失败的任务\" class=\"headerlink\" title=\"快速失败的任务\"></a>快速失败的任务</h4><p>Job是Kubernetes提供的只运行一次的容器，和service正好相反。要避免快速失败<br><figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">apiVersion:</span> <span class=\"string\">batch/v1</span></span><br><span class=\"line\"><span class=\"attr\">kind:</span> <span class=\"string\">Job</span></span><br><span class=\"line\"><span class=\"attr\">metadata:</span></span><br><span class=\"line\"><span class=\"attr\">  name:</span> <span class=\"string\">bad</span></span><br><span class=\"line\"><span class=\"attr\">spec:</span></span><br><span class=\"line\"><span class=\"attr\">  template:</span></span><br><span class=\"line\"><span class=\"attr\">    metadata:</span></span><br><span class=\"line\"><span class=\"attr\">      name:</span> <span class=\"string\">bad</span></span><br><span class=\"line\"><span class=\"attr\">    spec:</span></span><br><span class=\"line\"><span class=\"attr\">      restartPolicy:</span> <span class=\"string\">Never</span></span><br><span class=\"line\"><span class=\"attr\">      containers:</span></span><br><span class=\"line\"><span class=\"attr\">      - name:</span> <span class=\"string\">box</span></span><br><span class=\"line\"><span class=\"attr\">        image:</span> <span class=\"string\">busybox</span></span><br><span class=\"line\"><span class=\"attr\">        command:</span> <span class=\"string\">[\"/bin/sh\",</span> <span class=\"string\">\"-c\"</span><span class=\"string\">,</span> <span class=\"string\">\"exit 1\"</span><span class=\"string\">]</span></span><br></pre></td></tr></table></figure></p>\n<p>如果你尝试在你的cluster里面创建以上的Job，你可能会碰到如下的状态。<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ kubectl describe <span class=\"built_in\">jobs</span> </span><br><span class=\"line\">Name:   bad</span><br><span class=\"line\">Namespace:  default</span><br><span class=\"line\">Image(s): busybox</span><br><span class=\"line\">Selector: controller-uid=18a6678e-11d1-11e7-8169-525400c83acf</span><br><span class=\"line\">Parallelism:  1</span><br><span class=\"line\">Completions:  1</span><br><span class=\"line\">Start Time: Sat, 25 Mar 2017 20:05:41 -0700</span><br><span class=\"line\">Labels:   controller-uid=18a6678e-11d1-11e7-8169-525400c83acf</span><br><span class=\"line\">    job-name=bad</span><br><span class=\"line\">Pods Statuses:  1 Running / 0 Succeeded / 24 Failed</span><br><span class=\"line\">No volumes.</span><br><span class=\"line\">Events:</span><br><span class=\"line\">  FirstSeen LastSeen  Count From      SubObjectPath Type    Reason      Message</span><br><span class=\"line\">  --------- --------  ----- ----      ------------- --------  ------      -------</span><br><span class=\"line\">  1m    1m    1 &#123;job-controller &#125;     Normal    SuccessfulCreate  Created pod: bad-fws8g</span><br><span class=\"line\">  1m    1m    1 &#123;job-controller &#125;     Normal    SuccessfulCreate  Created pod: bad-321pk</span><br><span class=\"line\">  1m    1m    1 &#123;job-controller &#125;     Normal    SuccessfulCreate  Created pod: bad-2pxq1</span><br><span class=\"line\">  1m    1m    1 &#123;job-controller &#125;     Normal    SuccessfulCreate  Created pod: bad-kl2tj</span><br><span class=\"line\">  1m    1m    1 &#123;job-controller &#125;     Normal    SuccessfulCreate  Created pod: bad-wfw8q</span><br><span class=\"line\">  1m    1m    1 &#123;job-controller &#125;     Normal    SuccessfulCreate  Created pod: bad-lz0hq</span><br><span class=\"line\">  1m    1m    1 &#123;job-controller &#125;     Normal    SuccessfulCreate  Created pod: bad-0dck0</span><br><span class=\"line\">  1m    1m    1 &#123;job-controller &#125;     Normal    SuccessfulCreate  Created pod: bad-0lm8k</span><br><span class=\"line\">  1m    1m    1 &#123;job-controller &#125;     Normal    SuccessfulCreate  Created pod: bad-q6ctf</span><br><span class=\"line\">  1m    1s    16  &#123;job-controller &#125;     Normal    SuccessfulCreate  (events with common reason combined)</span><br></pre></td></tr></table></figure></p>\n<p>因为任务快速失败。Kubernetes认为任务没能成功启动，尝试创建新的容器以恢复这个失败，导致的Cluster会在短时间创建大量的容器，这样的结果可能会消耗大量的计算资源。</p>\n<p>在Spec中使用.spec.activeDeadlineSeconds来避免这个问题。这个参数定了等待多长时间重试失败的Job。</p>\n<hr>\n<blockquote>\n<p>来源: <a href=\"https://my.oschina.net/taogang/blog/1809904\" target=\"_blank\" rel=\"noopener\">https://my.oschina.net/taogang/blog/1809904</a></p>\n</blockquote>\n"},{"title":"谈谈架构","date":"2018-05-16T03:26:29.000Z","description":"系统介绍架构相关知识","_content":"\n最近在公司内部做了一次架构交流/培训，把架构的概念、架构的形式、架构设计原则都做了阐述。\n[PPT观看](http://www.rowkey.me/arch-ppt/index.html)\n\n## 什么是架构\n* 部门的人力分配、项目规划\n* 建筑设计中楼层规划、功能性设施规划\n* 城市的道路布局、功能性建筑设计、娱乐设施设计\n* 国家的城市规划、高速公路规划、高铁线路规划\n>**All is 架构！！！**\n\n## 架构的本质\n* **核心生命周期**：拆分之后主体不变的子生命周期\n* **非核心生命周期**：拆分之后主体改变的子生命周期\n  ![](Talk-About-The-Architecture/1526437772448-7783bdeb-4306-4847-85db-3754065cdea8-image.png) \n> **架构的本质在于不断拆分生命周期（树形结构），使得业务可以做到空间上并行。拆出来的每一个生命周期都有自己的边界，不会影响到其他生命周期，各自的变化都在自己的生命周期内确定，即为高内聚。**\n\n## 软件架构\n> **软件生命周期： 软件开发生命周期 + 软件运行生命周期（软件访问、软件功能、软件监控)**\n\n![](Talk-About-The-Architecture/1526437909260-9eff08f6-b8c8-436d-81ff-2ebc3f639464-image.png) \n\n## 优秀软件架构三要素\n* **Firmness（稳定）**: Achieve a satisfactory level of freedom from damaging failure.\n* **Commodity（实用）**: Utility to accomplish the tasks it is purported to be for.\n* **Delight（易用）**: Pleasure in use.\n> **建筑(Solid、Useful、Beautiful)->软件(Firmness、Commodity、Delight)**\n\n## 架构流程概述\n1. **业务架构**：俯视架构，包括业务规则、业务模块和业务流程。主要是对整个系统的业务进行拆分，对领域模型进行设计，把现实中的业务转化成抽象的对象。\n2. **技术架构**：剖面架构，是硬件到应用的抽象，包括抽象层和编程接口。技术架构和业务架构是相辅相成的关系，业务架构的每一个部分都有其技术架构，系统的架构需要先做好这两部分。\n3. **数据架构**：存储架构，主要指的是数据结构的设计。决定了应用数据源的特性，是业务架构和技术架构的基础。\n4. **部署架构**：拓扑架构，包括系统部署了几个结点、结点之间的关系、服务器的高可用、容错性、网络接口与协议等。决定了应用如何运行、运行的性能、可维护性、可扩展性等，是所有架构的基础。\n5. **组织架构**：团队架构，包括项目的组织形式、人员构成、职责等，是上面所有架构的保障设施。良好的组织架构能够保证其他架构的有效实施和推进。\n> **架构随着业务、负载的变化需要不断的梳理和重构，推进架构的演进。**\n\n## 业务架构\n![俯视视角](Talk-About-The-Architecture/1526438152354-6a181918-13db-4d45-855f-88257de3f429-image.png) \n* 业务执行是应用的核心模块，是应用的主要功能。\n* 数据分析是应用的辅助模块，有助于对应用做数据驱动化研发、商业智能研究、改善用户体验。\n* 系统管理是应用的基础部分，做好系统的部署、各项指标的监控、关键数据的备份等有助于应用快速迭代部署和稳定运行。\n\n## 技术架构 - 概览\n![剖面视角](Talk-About-The-Architecture/1526438216252-267d0e5e-63b3-44dc-b988-c9eb1758a10f-image.png) \n* 业务数据源、数据的规则引擎和分析规则支撑起了交互界面的呈现\n* 基础设施、通用服务构建起了底层的业务逻辑\n\n## 技术架构 - 具体\n![](Talk-About-The-Architecture/1526438239613-1cdabcae-9196-4aad-869d-94285ae76d41-image.png) \n* UI和应用都属于应用层，即提供具体的业务实现。其中UI是视图层的主要表现形式。\n* 应用和服务属于控制逻辑和访问通道，其中服务则是主要的业务逻辑所在，其可以提供服务接口，供应用调用。\n* 核心、驱动和数据构成了数据层，是对业务中所有相关数据的操作逻辑，是模型层。其中，核心可以对外提供接口，供服务调用。\n\n## 架构的演化\n![](Talk-About-The-Architecture/1526438275615-26fee321-9534-4a04-b51e-7806434b66e7-image.png) \n* 单体应用架构，所有逻辑都在应用和核心模块中，包括业务逻辑、数据操作等。\n* 通过数据驱动统一数据操作接口，屏蔽数据源的差异，可以根据资源进行垂直分区。\n* 解耦各个模块以服务的形式对外提供api接口，形成分布式服务架构。\n\n## 部署架构\n![](Talk-About-The-Architecture/1526438314473-c5da5a10-c62d-49a0-9209-5e43e54b88ca-image-resized.png) \n* UI交互界面单独部署，包括web、app等形式\n* 应用单独部署为一个结点或者集群\n* 服务、核心以及驱动做为整体进行部署\n* 数据源单独部署\n* 一个简单的应用/服务集群: LVS(使用keepalived做主备) + Nginx(反向代理) + Tomcat(业务容器)\n\n## 数据架构\n![](Talk-About-The-Architecture/1526438343067-0e351afe-72f7-4a7f-a6be-72fab9cd54c8-image.png) \n* 交互界面呈现出来的数据交互逻辑、数据流向决定了业务的主要数据设计\n* 原始的业务数据、日志和统计需要的数据支撑了数据分析需要的报表输出\n* 实时信息在一定的规则和状态机引擎下可以提供出实时状态监测等仪表盘功能\n\n## 数据的五个属性\n* **访问频率**：读写频率；只读且经常被访问的数据可以冗余多份\n* **对一致性的要求**：一致性要求高的数据需要严格保证准确性。\n* **访问权限**：API设计中根据不同的权限暴露不同粒度的数据。PO->VO即是对同一事物在不同权限下的描述,\n* **数据重要性**：不可丢失、允许部分丢失、只是缓存、无需保存\n* **数据保密性**：内部可以明文、内部不可明文、可以对外公开\n\n## 数据设计\n* 充分理解交互UI，需要知道哪些数据界面关联，哪些数据可以缓存。\n* 充分理解业务，要搞清楚哪些数据需要记录以及数据之间的关系。\n* 数据库设计需要注意存储效率：\n  - 减少事务\n  - 减少联表查询\n  - 适当使用索引\n  - 考虑使用缓存\n  - ...\n* 数据统计场景中，实时性要求较高的数据统计可以用redis；非实时数据则可以使用单独表，通过队列异步运算或者定时计算更新数据。此外，对于一致性要求较高的统计数据，需要依靠事务或者定时校对机制保证准确性。\n\n## 什么是架构师\n* 生命周期识别，合理拆分生命周期\n* 识别问题和问题的主体, 切忌把解决方案当问题, 发现问题永远比解决问题更加重要!!!\n* 关注业务技术，保障业务增长\n* OKR架构：负责关键技术的突破，解决技术可行性问题，拿出从0到1的那些关键结果\n* **权责对等，保障架构执行！！！**\n\n## 架构师必备素质\n* 站的高、望的远、扎的深\n* 精通某种技术，能够从本质上类比，触类旁通其他技术。\n* 平等对待所有技术，只有合适与不合适，没有喜欢与不喜欢。\n* 视野开阔，了解不同技术的优缺点, 知道可以直接用哪个开源项目来满足这样那样的需求，能够辨别是否需要造轮子。\n* 精通设计模式，但又不泛用。\n* 把系统拆分成多个子系统或模块，模块之间尽量松耦合，使得原先只能串行的开发任务，可以并行开展，可以通过投入更多人力来缩短工期。\n* 能清楚地知道系统的瓶颈在什么地方，不断地定位技术难度、研发进度、性能、内存等各方面的瓶颈，不断调整骨干力量解决瓶颈，在风险爆发之前就消除隐患。\n* 能够预料到需求可能产生怎样的变化，做好前瞻性设计。\n\n## 架构六步思考法\n![架构六步思考法](Talk-About-The-Architecture/1526438498119-90bbb34f-ef90-43cb-939b-aa0f696262ce-image.png) \n\n## 架构原则 - 概览\n![](Talk-About-The-Architecture/1526438513492-00ba90a2-24fb-460d-aa4c-d30bed417433-image.png) \n\n## 架构原则\n* **避免过度设计**：最简单的方案最容易实现和维护，也可以避免浪费资源。但方案中需要包括扩展。\n* **冗余设计**：对服务、数据库的做结点冗余，保证服务的高可用。通过数据库主从模式、应用集群来实现。\n* **多活数据中心**：为了容灾，从根本上保障应用的高可用性。需要构建多活的数据中心，以防止一个数据中心由于不可控因素出现故障后，引起整个系统的不可用。\n* **无状态设计**：api、接口等的设计不能有前后依赖关系，一个资源不受其他资源改动的影响。无状态的系统才能更好地进行扩展。如果非得有状态，则要么客户端管理状态，要么服务端用分布式缓存管理状态。\n* **可回滚**：对于任何业务尤其是关键业务，都具有恢复机制。可以使用基于日志的WAL、基于事件的Event sourcing等来实现可回滚。\n* **可禁用/自我保护**：具有限流机制，当上游的流量超过自身的负载能力时，能够拒绝溢出的请求。可以通过手动开关或者自动开关（监测异常流量行为），在应用前端挡住流量。\n* **问题可追踪**：当系统出现问题时，能够定位请求的轨迹、每一步的请求信息等。分布式链路追踪系统即解决的此方面的问题。\n* **可监控**：可监控是保障系统能够稳定运行的关键。包括对业务逻辑的监控、应用进程的监控以及应用依赖的CPU、硬盘等系统资源的监控。每一个系统都需要做好这几个层面的监控。\n* **故障隔离**：将系统依赖的资源(线程、CPU)和服务隔离开来能够使得某个服务的故障不会影响其他服务的调用。通过线程池或者分散部署结点可以对故障进行隔离。\n* **成熟可控的技术选型**：使用市面上主流、成熟、文档、支持资源多的技术，选择合适的而非最火的技术实现系统。\n* **梯级存储**：内存->SSD硬盘->传统硬盘->磁带，可以根据数据的重要性和生命周期对数据进行分级存储。\n* **缓存设计**：隔离请求与后端逻辑、存储，是就近原则的一种机制。包括客户端缓存（预先下发资源）、nginx缓存、本地缓存以及分布式缓存。\n* **异步设计**：对于调用方不关注结果或者允许结果延时返回的接口，采用队列进行异步响应能够很大程度提高系统性能；调用其他服务的时候不去等待服务方返回结果直接返回，同样能够提升系统响应性能。异步队列也是解决分布式事务的常用手段。\n* **前瞻性设计**：根据行业经验和预判，提前把可扩展性、后向兼容性设计好。\n* **水平扩展**：相比起垂直扩展，能够通过堆机器解决问题是最优先考虑的问题，系统的负载能力也才能接近无限扩展。此外，基于`云计算`技术根据系统的负载自动调整容量能够在节省成本的同时保证服务的可用性。\n* **小步构建和发布**：快速迭代项目，快速试错。不能有跨度时间过长的项目规划。\n* **自动化**：打包、测试的自动化称为持续集成，部署的自动化称为持续部署。自动化机制是快速迭代和试错的基础保证。\n\n## 架构原则 - 可扩展\n![三轴扩展理论](Talk-About-The-Architecture/1526438712437-0ddc81c3-0e3f-437a-8b2f-721e5a730e49-image.png) \n* X轴，水平复制或克隆，面向目标，如数据库读写分离、复制表、replication等，将单体应用或者以来的服务做冗余，通过负载均衡提高系统负载能力。\n* Y轴，面向功能/服务，如垂直应用、分布式服务等，就是将单体应用根据功能拆分成小的应用或者服务。\n* Z轴，面向资源，如数据库水平分库，对资源做分片，将压力分散到不同的结点上。\n> * **避免依赖于数据库的运算功能(函数、存储器、触发器等)，将负载放在更容易扩展的业务应用端。**\n> * **可扩展方案原则： 20倍设计、3倍实施、1.5倍部署（DID）。**\n\n## 系统响应性能提升五板斧\n* **异步**：队列缓冲、异步请求。\n* **并发**：利用多CPU多线程执行业务逻辑。\n* **就近原则**：缓存、梯度存储。\n* **减少IO**：合并细粒度接口为粗粒度接口、频繁的覆盖操作可以只做最后一次操作。这里一个需要特别注意的地方: **代码中尽量避免在循环中调用外部服务，更好的做法是使用粗粒度批量接口在循环外面只进行一次请求。**\n* **分区**：频繁访问的数据集规模保持在合理的范围。\n\n## 参考资料\n* 《架构真经》 by 陈斌\n* 《聊聊架构》 by 王概凯\n* 《架构师的第一课》 by 蔡学镛\n* 架构六步思考法 by 夏华夏@美团\n\n---\n> 来源: http://www.rowkey.me/arch-ppt/index.html","source":"_posts/Talk-About-The-Architecture.md","raw":"---\ntitle: 谈谈架构\ndate: 2018-05-16 11:26:29\ntags:  \n  - Architect\n  - Humanity\ncategories:\n  - Architect\ndescription: 系统介绍架构相关知识\n---\n\n最近在公司内部做了一次架构交流/培训，把架构的概念、架构的形式、架构设计原则都做了阐述。\n[PPT观看](http://www.rowkey.me/arch-ppt/index.html)\n\n## 什么是架构\n* 部门的人力分配、项目规划\n* 建筑设计中楼层规划、功能性设施规划\n* 城市的道路布局、功能性建筑设计、娱乐设施设计\n* 国家的城市规划、高速公路规划、高铁线路规划\n>**All is 架构！！！**\n\n## 架构的本质\n* **核心生命周期**：拆分之后主体不变的子生命周期\n* **非核心生命周期**：拆分之后主体改变的子生命周期\n  ![](Talk-About-The-Architecture/1526437772448-7783bdeb-4306-4847-85db-3754065cdea8-image.png) \n> **架构的本质在于不断拆分生命周期（树形结构），使得业务可以做到空间上并行。拆出来的每一个生命周期都有自己的边界，不会影响到其他生命周期，各自的变化都在自己的生命周期内确定，即为高内聚。**\n\n## 软件架构\n> **软件生命周期： 软件开发生命周期 + 软件运行生命周期（软件访问、软件功能、软件监控)**\n\n![](Talk-About-The-Architecture/1526437909260-9eff08f6-b8c8-436d-81ff-2ebc3f639464-image.png) \n\n## 优秀软件架构三要素\n* **Firmness（稳定）**: Achieve a satisfactory level of freedom from damaging failure.\n* **Commodity（实用）**: Utility to accomplish the tasks it is purported to be for.\n* **Delight（易用）**: Pleasure in use.\n> **建筑(Solid、Useful、Beautiful)->软件(Firmness、Commodity、Delight)**\n\n## 架构流程概述\n1. **业务架构**：俯视架构，包括业务规则、业务模块和业务流程。主要是对整个系统的业务进行拆分，对领域模型进行设计，把现实中的业务转化成抽象的对象。\n2. **技术架构**：剖面架构，是硬件到应用的抽象，包括抽象层和编程接口。技术架构和业务架构是相辅相成的关系，业务架构的每一个部分都有其技术架构，系统的架构需要先做好这两部分。\n3. **数据架构**：存储架构，主要指的是数据结构的设计。决定了应用数据源的特性，是业务架构和技术架构的基础。\n4. **部署架构**：拓扑架构，包括系统部署了几个结点、结点之间的关系、服务器的高可用、容错性、网络接口与协议等。决定了应用如何运行、运行的性能、可维护性、可扩展性等，是所有架构的基础。\n5. **组织架构**：团队架构，包括项目的组织形式、人员构成、职责等，是上面所有架构的保障设施。良好的组织架构能够保证其他架构的有效实施和推进。\n> **架构随着业务、负载的变化需要不断的梳理和重构，推进架构的演进。**\n\n## 业务架构\n![俯视视角](Talk-About-The-Architecture/1526438152354-6a181918-13db-4d45-855f-88257de3f429-image.png) \n* 业务执行是应用的核心模块，是应用的主要功能。\n* 数据分析是应用的辅助模块，有助于对应用做数据驱动化研发、商业智能研究、改善用户体验。\n* 系统管理是应用的基础部分，做好系统的部署、各项指标的监控、关键数据的备份等有助于应用快速迭代部署和稳定运行。\n\n## 技术架构 - 概览\n![剖面视角](Talk-About-The-Architecture/1526438216252-267d0e5e-63b3-44dc-b988-c9eb1758a10f-image.png) \n* 业务数据源、数据的规则引擎和分析规则支撑起了交互界面的呈现\n* 基础设施、通用服务构建起了底层的业务逻辑\n\n## 技术架构 - 具体\n![](Talk-About-The-Architecture/1526438239613-1cdabcae-9196-4aad-869d-94285ae76d41-image.png) \n* UI和应用都属于应用层，即提供具体的业务实现。其中UI是视图层的主要表现形式。\n* 应用和服务属于控制逻辑和访问通道，其中服务则是主要的业务逻辑所在，其可以提供服务接口，供应用调用。\n* 核心、驱动和数据构成了数据层，是对业务中所有相关数据的操作逻辑，是模型层。其中，核心可以对外提供接口，供服务调用。\n\n## 架构的演化\n![](Talk-About-The-Architecture/1526438275615-26fee321-9534-4a04-b51e-7806434b66e7-image.png) \n* 单体应用架构，所有逻辑都在应用和核心模块中，包括业务逻辑、数据操作等。\n* 通过数据驱动统一数据操作接口，屏蔽数据源的差异，可以根据资源进行垂直分区。\n* 解耦各个模块以服务的形式对外提供api接口，形成分布式服务架构。\n\n## 部署架构\n![](Talk-About-The-Architecture/1526438314473-c5da5a10-c62d-49a0-9209-5e43e54b88ca-image-resized.png) \n* UI交互界面单独部署，包括web、app等形式\n* 应用单独部署为一个结点或者集群\n* 服务、核心以及驱动做为整体进行部署\n* 数据源单独部署\n* 一个简单的应用/服务集群: LVS(使用keepalived做主备) + Nginx(反向代理) + Tomcat(业务容器)\n\n## 数据架构\n![](Talk-About-The-Architecture/1526438343067-0e351afe-72f7-4a7f-a6be-72fab9cd54c8-image.png) \n* 交互界面呈现出来的数据交互逻辑、数据流向决定了业务的主要数据设计\n* 原始的业务数据、日志和统计需要的数据支撑了数据分析需要的报表输出\n* 实时信息在一定的规则和状态机引擎下可以提供出实时状态监测等仪表盘功能\n\n## 数据的五个属性\n* **访问频率**：读写频率；只读且经常被访问的数据可以冗余多份\n* **对一致性的要求**：一致性要求高的数据需要严格保证准确性。\n* **访问权限**：API设计中根据不同的权限暴露不同粒度的数据。PO->VO即是对同一事物在不同权限下的描述,\n* **数据重要性**：不可丢失、允许部分丢失、只是缓存、无需保存\n* **数据保密性**：内部可以明文、内部不可明文、可以对外公开\n\n## 数据设计\n* 充分理解交互UI，需要知道哪些数据界面关联，哪些数据可以缓存。\n* 充分理解业务，要搞清楚哪些数据需要记录以及数据之间的关系。\n* 数据库设计需要注意存储效率：\n  - 减少事务\n  - 减少联表查询\n  - 适当使用索引\n  - 考虑使用缓存\n  - ...\n* 数据统计场景中，实时性要求较高的数据统计可以用redis；非实时数据则可以使用单独表，通过队列异步运算或者定时计算更新数据。此外，对于一致性要求较高的统计数据，需要依靠事务或者定时校对机制保证准确性。\n\n## 什么是架构师\n* 生命周期识别，合理拆分生命周期\n* 识别问题和问题的主体, 切忌把解决方案当问题, 发现问题永远比解决问题更加重要!!!\n* 关注业务技术，保障业务增长\n* OKR架构：负责关键技术的突破，解决技术可行性问题，拿出从0到1的那些关键结果\n* **权责对等，保障架构执行！！！**\n\n## 架构师必备素质\n* 站的高、望的远、扎的深\n* 精通某种技术，能够从本质上类比，触类旁通其他技术。\n* 平等对待所有技术，只有合适与不合适，没有喜欢与不喜欢。\n* 视野开阔，了解不同技术的优缺点, 知道可以直接用哪个开源项目来满足这样那样的需求，能够辨别是否需要造轮子。\n* 精通设计模式，但又不泛用。\n* 把系统拆分成多个子系统或模块，模块之间尽量松耦合，使得原先只能串行的开发任务，可以并行开展，可以通过投入更多人力来缩短工期。\n* 能清楚地知道系统的瓶颈在什么地方，不断地定位技术难度、研发进度、性能、内存等各方面的瓶颈，不断调整骨干力量解决瓶颈，在风险爆发之前就消除隐患。\n* 能够预料到需求可能产生怎样的变化，做好前瞻性设计。\n\n## 架构六步思考法\n![架构六步思考法](Talk-About-The-Architecture/1526438498119-90bbb34f-ef90-43cb-939b-aa0f696262ce-image.png) \n\n## 架构原则 - 概览\n![](Talk-About-The-Architecture/1526438513492-00ba90a2-24fb-460d-aa4c-d30bed417433-image.png) \n\n## 架构原则\n* **避免过度设计**：最简单的方案最容易实现和维护，也可以避免浪费资源。但方案中需要包括扩展。\n* **冗余设计**：对服务、数据库的做结点冗余，保证服务的高可用。通过数据库主从模式、应用集群来实现。\n* **多活数据中心**：为了容灾，从根本上保障应用的高可用性。需要构建多活的数据中心，以防止一个数据中心由于不可控因素出现故障后，引起整个系统的不可用。\n* **无状态设计**：api、接口等的设计不能有前后依赖关系，一个资源不受其他资源改动的影响。无状态的系统才能更好地进行扩展。如果非得有状态，则要么客户端管理状态，要么服务端用分布式缓存管理状态。\n* **可回滚**：对于任何业务尤其是关键业务，都具有恢复机制。可以使用基于日志的WAL、基于事件的Event sourcing等来实现可回滚。\n* **可禁用/自我保护**：具有限流机制，当上游的流量超过自身的负载能力时，能够拒绝溢出的请求。可以通过手动开关或者自动开关（监测异常流量行为），在应用前端挡住流量。\n* **问题可追踪**：当系统出现问题时，能够定位请求的轨迹、每一步的请求信息等。分布式链路追踪系统即解决的此方面的问题。\n* **可监控**：可监控是保障系统能够稳定运行的关键。包括对业务逻辑的监控、应用进程的监控以及应用依赖的CPU、硬盘等系统资源的监控。每一个系统都需要做好这几个层面的监控。\n* **故障隔离**：将系统依赖的资源(线程、CPU)和服务隔离开来能够使得某个服务的故障不会影响其他服务的调用。通过线程池或者分散部署结点可以对故障进行隔离。\n* **成熟可控的技术选型**：使用市面上主流、成熟、文档、支持资源多的技术，选择合适的而非最火的技术实现系统。\n* **梯级存储**：内存->SSD硬盘->传统硬盘->磁带，可以根据数据的重要性和生命周期对数据进行分级存储。\n* **缓存设计**：隔离请求与后端逻辑、存储，是就近原则的一种机制。包括客户端缓存（预先下发资源）、nginx缓存、本地缓存以及分布式缓存。\n* **异步设计**：对于调用方不关注结果或者允许结果延时返回的接口，采用队列进行异步响应能够很大程度提高系统性能；调用其他服务的时候不去等待服务方返回结果直接返回，同样能够提升系统响应性能。异步队列也是解决分布式事务的常用手段。\n* **前瞻性设计**：根据行业经验和预判，提前把可扩展性、后向兼容性设计好。\n* **水平扩展**：相比起垂直扩展，能够通过堆机器解决问题是最优先考虑的问题，系统的负载能力也才能接近无限扩展。此外，基于`云计算`技术根据系统的负载自动调整容量能够在节省成本的同时保证服务的可用性。\n* **小步构建和发布**：快速迭代项目，快速试错。不能有跨度时间过长的项目规划。\n* **自动化**：打包、测试的自动化称为持续集成，部署的自动化称为持续部署。自动化机制是快速迭代和试错的基础保证。\n\n## 架构原则 - 可扩展\n![三轴扩展理论](Talk-About-The-Architecture/1526438712437-0ddc81c3-0e3f-437a-8b2f-721e5a730e49-image.png) \n* X轴，水平复制或克隆，面向目标，如数据库读写分离、复制表、replication等，将单体应用或者以来的服务做冗余，通过负载均衡提高系统负载能力。\n* Y轴，面向功能/服务，如垂直应用、分布式服务等，就是将单体应用根据功能拆分成小的应用或者服务。\n* Z轴，面向资源，如数据库水平分库，对资源做分片，将压力分散到不同的结点上。\n> * **避免依赖于数据库的运算功能(函数、存储器、触发器等)，将负载放在更容易扩展的业务应用端。**\n> * **可扩展方案原则： 20倍设计、3倍实施、1.5倍部署（DID）。**\n\n## 系统响应性能提升五板斧\n* **异步**：队列缓冲、异步请求。\n* **并发**：利用多CPU多线程执行业务逻辑。\n* **就近原则**：缓存、梯度存储。\n* **减少IO**：合并细粒度接口为粗粒度接口、频繁的覆盖操作可以只做最后一次操作。这里一个需要特别注意的地方: **代码中尽量避免在循环中调用外部服务，更好的做法是使用粗粒度批量接口在循环外面只进行一次请求。**\n* **分区**：频繁访问的数据集规模保持在合理的范围。\n\n## 参考资料\n* 《架构真经》 by 陈斌\n* 《聊聊架构》 by 王概凯\n* 《架构师的第一课》 by 蔡学镛\n* 架构六步思考法 by 夏华夏@美团\n\n---\n> 来源: http://www.rowkey.me/arch-ppt/index.html","slug":"Talk-About-The-Architecture","published":1,"updated":"2018-05-16T03:38:29.436Z","_id":"cjh8jw4xf00466b8keysqq2sr","comments":1,"layout":"post","photos":[],"link":"","content":"<p>最近在公司内部做了一次架构交流/培训，把架构的概念、架构的形式、架构设计原则都做了阐述。<br><a href=\"http://www.rowkey.me/arch-ppt/index.html\" target=\"_blank\" rel=\"noopener\">PPT观看</a></p>\n<h2 id=\"什么是架构\"><a href=\"#什么是架构\" class=\"headerlink\" title=\"什么是架构\"></a>什么是架构</h2><ul>\n<li>部门的人力分配、项目规划</li>\n<li>建筑设计中楼层规划、功能性设施规划</li>\n<li>城市的道路布局、功能性建筑设计、娱乐设施设计</li>\n<li>国家的城市规划、高速公路规划、高铁线路规划<blockquote>\n<p><strong>All is 架构！！！</strong></p>\n</blockquote>\n</li>\n</ul>\n<h2 id=\"架构的本质\"><a href=\"#架构的本质\" class=\"headerlink\" title=\"架构的本质\"></a>架构的本质</h2><ul>\n<li><strong>核心生命周期</strong>：拆分之后主体不变的子生命周期</li>\n<li><strong>非核心生命周期</strong>：拆分之后主体改变的子生命周期<br><img src=\"/2018-05-16/Talk-About-The-Architecture/1526437772448-7783bdeb-4306-4847-85db-3754065cdea8-image.png\" alt=\"\"> <blockquote>\n<p><strong>架构的本质在于不断拆分生命周期（树形结构），使得业务可以做到空间上并行。拆出来的每一个生命周期都有自己的边界，不会影响到其他生命周期，各自的变化都在自己的生命周期内确定，即为高内聚。</strong></p>\n</blockquote>\n</li>\n</ul>\n<h2 id=\"软件架构\"><a href=\"#软件架构\" class=\"headerlink\" title=\"软件架构\"></a>软件架构</h2><blockquote>\n<p><strong>软件生命周期： 软件开发生命周期 + 软件运行生命周期（软件访问、软件功能、软件监控)</strong></p>\n</blockquote>\n<p><img src=\"/2018-05-16/Talk-About-The-Architecture/1526437909260-9eff08f6-b8c8-436d-81ff-2ebc3f639464-image.png\" alt=\"\"> </p>\n<h2 id=\"优秀软件架构三要素\"><a href=\"#优秀软件架构三要素\" class=\"headerlink\" title=\"优秀软件架构三要素\"></a>优秀软件架构三要素</h2><ul>\n<li><strong>Firmness（稳定）</strong>: Achieve a satisfactory level of freedom from damaging failure.</li>\n<li><strong>Commodity（实用）</strong>: Utility to accomplish the tasks it is purported to be for.</li>\n<li><strong>Delight（易用）</strong>: Pleasure in use.<blockquote>\n<p><strong>建筑(Solid、Useful、Beautiful)-&gt;软件(Firmness、Commodity、Delight)</strong></p>\n</blockquote>\n</li>\n</ul>\n<h2 id=\"架构流程概述\"><a href=\"#架构流程概述\" class=\"headerlink\" title=\"架构流程概述\"></a>架构流程概述</h2><ol>\n<li><strong>业务架构</strong>：俯视架构，包括业务规则、业务模块和业务流程。主要是对整个系统的业务进行拆分，对领域模型进行设计，把现实中的业务转化成抽象的对象。</li>\n<li><strong>技术架构</strong>：剖面架构，是硬件到应用的抽象，包括抽象层和编程接口。技术架构和业务架构是相辅相成的关系，业务架构的每一个部分都有其技术架构，系统的架构需要先做好这两部分。</li>\n<li><strong>数据架构</strong>：存储架构，主要指的是数据结构的设计。决定了应用数据源的特性，是业务架构和技术架构的基础。</li>\n<li><strong>部署架构</strong>：拓扑架构，包括系统部署了几个结点、结点之间的关系、服务器的高可用、容错性、网络接口与协议等。决定了应用如何运行、运行的性能、可维护性、可扩展性等，是所有架构的基础。</li>\n<li><strong>组织架构</strong>：团队架构，包括项目的组织形式、人员构成、职责等，是上面所有架构的保障设施。良好的组织架构能够保证其他架构的有效实施和推进。<blockquote>\n<p><strong>架构随着业务、负载的变化需要不断的梳理和重构，推进架构的演进。</strong></p>\n</blockquote>\n</li>\n</ol>\n<h2 id=\"业务架构\"><a href=\"#业务架构\" class=\"headerlink\" title=\"业务架构\"></a>业务架构</h2><p><img src=\"/2018-05-16/Talk-About-The-Architecture/1526438152354-6a181918-13db-4d45-855f-88257de3f429-image.png\" alt=\"俯视视角\"> </p>\n<ul>\n<li>业务执行是应用的核心模块，是应用的主要功能。</li>\n<li>数据分析是应用的辅助模块，有助于对应用做数据驱动化研发、商业智能研究、改善用户体验。</li>\n<li>系统管理是应用的基础部分，做好系统的部署、各项指标的监控、关键数据的备份等有助于应用快速迭代部署和稳定运行。</li>\n</ul>\n<h2 id=\"技术架构-概览\"><a href=\"#技术架构-概览\" class=\"headerlink\" title=\"技术架构 - 概览\"></a>技术架构 - 概览</h2><p><img src=\"/2018-05-16/Talk-About-The-Architecture/1526438216252-267d0e5e-63b3-44dc-b988-c9eb1758a10f-image.png\" alt=\"剖面视角\"> </p>\n<ul>\n<li>业务数据源、数据的规则引擎和分析规则支撑起了交互界面的呈现</li>\n<li>基础设施、通用服务构建起了底层的业务逻辑</li>\n</ul>\n<h2 id=\"技术架构-具体\"><a href=\"#技术架构-具体\" class=\"headerlink\" title=\"技术架构 - 具体\"></a>技术架构 - 具体</h2><p><img src=\"/2018-05-16/Talk-About-The-Architecture/1526438239613-1cdabcae-9196-4aad-869d-94285ae76d41-image.png\" alt=\"\"> </p>\n<ul>\n<li>UI和应用都属于应用层，即提供具体的业务实现。其中UI是视图层的主要表现形式。</li>\n<li>应用和服务属于控制逻辑和访问通道，其中服务则是主要的业务逻辑所在，其可以提供服务接口，供应用调用。</li>\n<li>核心、驱动和数据构成了数据层，是对业务中所有相关数据的操作逻辑，是模型层。其中，核心可以对外提供接口，供服务调用。</li>\n</ul>\n<h2 id=\"架构的演化\"><a href=\"#架构的演化\" class=\"headerlink\" title=\"架构的演化\"></a>架构的演化</h2><p><img src=\"/2018-05-16/Talk-About-The-Architecture/1526438275615-26fee321-9534-4a04-b51e-7806434b66e7-image.png\" alt=\"\"> </p>\n<ul>\n<li>单体应用架构，所有逻辑都在应用和核心模块中，包括业务逻辑、数据操作等。</li>\n<li>通过数据驱动统一数据操作接口，屏蔽数据源的差异，可以根据资源进行垂直分区。</li>\n<li>解耦各个模块以服务的形式对外提供api接口，形成分布式服务架构。</li>\n</ul>\n<h2 id=\"部署架构\"><a href=\"#部署架构\" class=\"headerlink\" title=\"部署架构\"></a>部署架构</h2><p><img src=\"/2018-05-16/Talk-About-The-Architecture/1526438314473-c5da5a10-c62d-49a0-9209-5e43e54b88ca-image-resized.png\" alt=\"\"> </p>\n<ul>\n<li>UI交互界面单独部署，包括web、app等形式</li>\n<li>应用单独部署为一个结点或者集群</li>\n<li>服务、核心以及驱动做为整体进行部署</li>\n<li>数据源单独部署</li>\n<li>一个简单的应用/服务集群: LVS(使用keepalived做主备) + Nginx(反向代理) + Tomcat(业务容器)</li>\n</ul>\n<h2 id=\"数据架构\"><a href=\"#数据架构\" class=\"headerlink\" title=\"数据架构\"></a>数据架构</h2><p><img src=\"/2018-05-16/Talk-About-The-Architecture/1526438343067-0e351afe-72f7-4a7f-a6be-72fab9cd54c8-image.png\" alt=\"\"> </p>\n<ul>\n<li>交互界面呈现出来的数据交互逻辑、数据流向决定了业务的主要数据设计</li>\n<li>原始的业务数据、日志和统计需要的数据支撑了数据分析需要的报表输出</li>\n<li>实时信息在一定的规则和状态机引擎下可以提供出实时状态监测等仪表盘功能</li>\n</ul>\n<h2 id=\"数据的五个属性\"><a href=\"#数据的五个属性\" class=\"headerlink\" title=\"数据的五个属性\"></a>数据的五个属性</h2><ul>\n<li><strong>访问频率</strong>：读写频率；只读且经常被访问的数据可以冗余多份</li>\n<li><strong>对一致性的要求</strong>：一致性要求高的数据需要严格保证准确性。</li>\n<li><strong>访问权限</strong>：API设计中根据不同的权限暴露不同粒度的数据。PO-&gt;VO即是对同一事物在不同权限下的描述,</li>\n<li><strong>数据重要性</strong>：不可丢失、允许部分丢失、只是缓存、无需保存</li>\n<li><strong>数据保密性</strong>：内部可以明文、内部不可明文、可以对外公开</li>\n</ul>\n<h2 id=\"数据设计\"><a href=\"#数据设计\" class=\"headerlink\" title=\"数据设计\"></a>数据设计</h2><ul>\n<li>充分理解交互UI，需要知道哪些数据界面关联，哪些数据可以缓存。</li>\n<li>充分理解业务，要搞清楚哪些数据需要记录以及数据之间的关系。</li>\n<li>数据库设计需要注意存储效率：<ul>\n<li>减少事务</li>\n<li>减少联表查询</li>\n<li>适当使用索引</li>\n<li>考虑使用缓存</li>\n<li>…</li>\n</ul>\n</li>\n<li>数据统计场景中，实时性要求较高的数据统计可以用redis；非实时数据则可以使用单独表，通过队列异步运算或者定时计算更新数据。此外，对于一致性要求较高的统计数据，需要依靠事务或者定时校对机制保证准确性。</li>\n</ul>\n<h2 id=\"什么是架构师\"><a href=\"#什么是架构师\" class=\"headerlink\" title=\"什么是架构师\"></a>什么是架构师</h2><ul>\n<li>生命周期识别，合理拆分生命周期</li>\n<li>识别问题和问题的主体, 切忌把解决方案当问题, 发现问题永远比解决问题更加重要!!!</li>\n<li>关注业务技术，保障业务增长</li>\n<li>OKR架构：负责关键技术的突破，解决技术可行性问题，拿出从0到1的那些关键结果</li>\n<li><strong>权责对等，保障架构执行！！！</strong></li>\n</ul>\n<h2 id=\"架构师必备素质\"><a href=\"#架构师必备素质\" class=\"headerlink\" title=\"架构师必备素质\"></a>架构师必备素质</h2><ul>\n<li>站的高、望的远、扎的深</li>\n<li>精通某种技术，能够从本质上类比，触类旁通其他技术。</li>\n<li>平等对待所有技术，只有合适与不合适，没有喜欢与不喜欢。</li>\n<li>视野开阔，了解不同技术的优缺点, 知道可以直接用哪个开源项目来满足这样那样的需求，能够辨别是否需要造轮子。</li>\n<li>精通设计模式，但又不泛用。</li>\n<li>把系统拆分成多个子系统或模块，模块之间尽量松耦合，使得原先只能串行的开发任务，可以并行开展，可以通过投入更多人力来缩短工期。</li>\n<li>能清楚地知道系统的瓶颈在什么地方，不断地定位技术难度、研发进度、性能、内存等各方面的瓶颈，不断调整骨干力量解决瓶颈，在风险爆发之前就消除隐患。</li>\n<li>能够预料到需求可能产生怎样的变化，做好前瞻性设计。</li>\n</ul>\n<h2 id=\"架构六步思考法\"><a href=\"#架构六步思考法\" class=\"headerlink\" title=\"架构六步思考法\"></a>架构六步思考法</h2><p><img src=\"/2018-05-16/Talk-About-The-Architecture/1526438498119-90bbb34f-ef90-43cb-939b-aa0f696262ce-image.png\" alt=\"架构六步思考法\"> </p>\n<h2 id=\"架构原则-概览\"><a href=\"#架构原则-概览\" class=\"headerlink\" title=\"架构原则 - 概览\"></a>架构原则 - 概览</h2><p><img src=\"/2018-05-16/Talk-About-The-Architecture/1526438513492-00ba90a2-24fb-460d-aa4c-d30bed417433-image.png\" alt=\"\"> </p>\n<h2 id=\"架构原则\"><a href=\"#架构原则\" class=\"headerlink\" title=\"架构原则\"></a>架构原则</h2><ul>\n<li><strong>避免过度设计</strong>：最简单的方案最容易实现和维护，也可以避免浪费资源。但方案中需要包括扩展。</li>\n<li><strong>冗余设计</strong>：对服务、数据库的做结点冗余，保证服务的高可用。通过数据库主从模式、应用集群来实现。</li>\n<li><strong>多活数据中心</strong>：为了容灾，从根本上保障应用的高可用性。需要构建多活的数据中心，以防止一个数据中心由于不可控因素出现故障后，引起整个系统的不可用。</li>\n<li><strong>无状态设计</strong>：api、接口等的设计不能有前后依赖关系，一个资源不受其他资源改动的影响。无状态的系统才能更好地进行扩展。如果非得有状态，则要么客户端管理状态，要么服务端用分布式缓存管理状态。</li>\n<li><strong>可回滚</strong>：对于任何业务尤其是关键业务，都具有恢复机制。可以使用基于日志的WAL、基于事件的Event sourcing等来实现可回滚。</li>\n<li><strong>可禁用/自我保护</strong>：具有限流机制，当上游的流量超过自身的负载能力时，能够拒绝溢出的请求。可以通过手动开关或者自动开关（监测异常流量行为），在应用前端挡住流量。</li>\n<li><strong>问题可追踪</strong>：当系统出现问题时，能够定位请求的轨迹、每一步的请求信息等。分布式链路追踪系统即解决的此方面的问题。</li>\n<li><strong>可监控</strong>：可监控是保障系统能够稳定运行的关键。包括对业务逻辑的监控、应用进程的监控以及应用依赖的CPU、硬盘等系统资源的监控。每一个系统都需要做好这几个层面的监控。</li>\n<li><strong>故障隔离</strong>：将系统依赖的资源(线程、CPU)和服务隔离开来能够使得某个服务的故障不会影响其他服务的调用。通过线程池或者分散部署结点可以对故障进行隔离。</li>\n<li><strong>成熟可控的技术选型</strong>：使用市面上主流、成熟、文档、支持资源多的技术，选择合适的而非最火的技术实现系统。</li>\n<li><strong>梯级存储</strong>：内存-&gt;SSD硬盘-&gt;传统硬盘-&gt;磁带，可以根据数据的重要性和生命周期对数据进行分级存储。</li>\n<li><strong>缓存设计</strong>：隔离请求与后端逻辑、存储，是就近原则的一种机制。包括客户端缓存（预先下发资源）、nginx缓存、本地缓存以及分布式缓存。</li>\n<li><strong>异步设计</strong>：对于调用方不关注结果或者允许结果延时返回的接口，采用队列进行异步响应能够很大程度提高系统性能；调用其他服务的时候不去等待服务方返回结果直接返回，同样能够提升系统响应性能。异步队列也是解决分布式事务的常用手段。</li>\n<li><strong>前瞻性设计</strong>：根据行业经验和预判，提前把可扩展性、后向兼容性设计好。</li>\n<li><strong>水平扩展</strong>：相比起垂直扩展，能够通过堆机器解决问题是最优先考虑的问题，系统的负载能力也才能接近无限扩展。此外，基于<code>云计算</code>技术根据系统的负载自动调整容量能够在节省成本的同时保证服务的可用性。</li>\n<li><strong>小步构建和发布</strong>：快速迭代项目，快速试错。不能有跨度时间过长的项目规划。</li>\n<li><strong>自动化</strong>：打包、测试的自动化称为持续集成，部署的自动化称为持续部署。自动化机制是快速迭代和试错的基础保证。</li>\n</ul>\n<h2 id=\"架构原则-可扩展\"><a href=\"#架构原则-可扩展\" class=\"headerlink\" title=\"架构原则 - 可扩展\"></a>架构原则 - 可扩展</h2><p><img src=\"/2018-05-16/Talk-About-The-Architecture/1526438712437-0ddc81c3-0e3f-437a-8b2f-721e5a730e49-image.png\" alt=\"三轴扩展理论\"> </p>\n<ul>\n<li>X轴，水平复制或克隆，面向目标，如数据库读写分离、复制表、replication等，将单体应用或者以来的服务做冗余，通过负载均衡提高系统负载能力。</li>\n<li>Y轴，面向功能/服务，如垂直应用、分布式服务等，就是将单体应用根据功能拆分成小的应用或者服务。</li>\n<li>Z轴，面向资源，如数据库水平分库，对资源做分片，将压力分散到不同的结点上。<blockquote>\n<ul>\n<li><strong>避免依赖于数据库的运算功能(函数、存储器、触发器等)，将负载放在更容易扩展的业务应用端。</strong></li>\n<li><strong>可扩展方案原则： 20倍设计、3倍实施、1.5倍部署（DID）。</strong></li>\n</ul>\n</blockquote>\n</li>\n</ul>\n<h2 id=\"系统响应性能提升五板斧\"><a href=\"#系统响应性能提升五板斧\" class=\"headerlink\" title=\"系统响应性能提升五板斧\"></a>系统响应性能提升五板斧</h2><ul>\n<li><strong>异步</strong>：队列缓冲、异步请求。</li>\n<li><strong>并发</strong>：利用多CPU多线程执行业务逻辑。</li>\n<li><strong>就近原则</strong>：缓存、梯度存储。</li>\n<li><strong>减少IO</strong>：合并细粒度接口为粗粒度接口、频繁的覆盖操作可以只做最后一次操作。这里一个需要特别注意的地方: <strong>代码中尽量避免在循环中调用外部服务，更好的做法是使用粗粒度批量接口在循环外面只进行一次请求。</strong></li>\n<li><strong>分区</strong>：频繁访问的数据集规模保持在合理的范围。</li>\n</ul>\n<h2 id=\"参考资料\"><a href=\"#参考资料\" class=\"headerlink\" title=\"参考资料\"></a>参考资料</h2><ul>\n<li>《架构真经》 by 陈斌</li>\n<li>《聊聊架构》 by 王概凯</li>\n<li>《架构师的第一课》 by 蔡学镛</li>\n<li>架构六步思考法 by 夏华夏@美团</li>\n</ul>\n<hr>\n<blockquote>\n<p>来源: <a href=\"http://www.rowkey.me/arch-ppt/index.html\" target=\"_blank\" rel=\"noopener\">http://www.rowkey.me/arch-ppt/index.html</a></p>\n</blockquote>\n","site":{"data":{}},"excerpt":"","more":"<p>最近在公司内部做了一次架构交流/培训，把架构的概念、架构的形式、架构设计原则都做了阐述。<br><a href=\"http://www.rowkey.me/arch-ppt/index.html\" target=\"_blank\" rel=\"noopener\">PPT观看</a></p>\n<h2 id=\"什么是架构\"><a href=\"#什么是架构\" class=\"headerlink\" title=\"什么是架构\"></a>什么是架构</h2><ul>\n<li>部门的人力分配、项目规划</li>\n<li>建筑设计中楼层规划、功能性设施规划</li>\n<li>城市的道路布局、功能性建筑设计、娱乐设施设计</li>\n<li>国家的城市规划、高速公路规划、高铁线路规划<blockquote>\n<p><strong>All is 架构！！！</strong></p>\n</blockquote>\n</li>\n</ul>\n<h2 id=\"架构的本质\"><a href=\"#架构的本质\" class=\"headerlink\" title=\"架构的本质\"></a>架构的本质</h2><ul>\n<li><strong>核心生命周期</strong>：拆分之后主体不变的子生命周期</li>\n<li><strong>非核心生命周期</strong>：拆分之后主体改变的子生命周期<br><img src=\"/2018-05-16/Talk-About-The-Architecture/1526437772448-7783bdeb-4306-4847-85db-3754065cdea8-image.png\" alt=\"\"> <blockquote>\n<p><strong>架构的本质在于不断拆分生命周期（树形结构），使得业务可以做到空间上并行。拆出来的每一个生命周期都有自己的边界，不会影响到其他生命周期，各自的变化都在自己的生命周期内确定，即为高内聚。</strong></p>\n</blockquote>\n</li>\n</ul>\n<h2 id=\"软件架构\"><a href=\"#软件架构\" class=\"headerlink\" title=\"软件架构\"></a>软件架构</h2><blockquote>\n<p><strong>软件生命周期： 软件开发生命周期 + 软件运行生命周期（软件访问、软件功能、软件监控)</strong></p>\n</blockquote>\n<p><img src=\"/2018-05-16/Talk-About-The-Architecture/1526437909260-9eff08f6-b8c8-436d-81ff-2ebc3f639464-image.png\" alt=\"\"> </p>\n<h2 id=\"优秀软件架构三要素\"><a href=\"#优秀软件架构三要素\" class=\"headerlink\" title=\"优秀软件架构三要素\"></a>优秀软件架构三要素</h2><ul>\n<li><strong>Firmness（稳定）</strong>: Achieve a satisfactory level of freedom from damaging failure.</li>\n<li><strong>Commodity（实用）</strong>: Utility to accomplish the tasks it is purported to be for.</li>\n<li><strong>Delight（易用）</strong>: Pleasure in use.<blockquote>\n<p><strong>建筑(Solid、Useful、Beautiful)-&gt;软件(Firmness、Commodity、Delight)</strong></p>\n</blockquote>\n</li>\n</ul>\n<h2 id=\"架构流程概述\"><a href=\"#架构流程概述\" class=\"headerlink\" title=\"架构流程概述\"></a>架构流程概述</h2><ol>\n<li><strong>业务架构</strong>：俯视架构，包括业务规则、业务模块和业务流程。主要是对整个系统的业务进行拆分，对领域模型进行设计，把现实中的业务转化成抽象的对象。</li>\n<li><strong>技术架构</strong>：剖面架构，是硬件到应用的抽象，包括抽象层和编程接口。技术架构和业务架构是相辅相成的关系，业务架构的每一个部分都有其技术架构，系统的架构需要先做好这两部分。</li>\n<li><strong>数据架构</strong>：存储架构，主要指的是数据结构的设计。决定了应用数据源的特性，是业务架构和技术架构的基础。</li>\n<li><strong>部署架构</strong>：拓扑架构，包括系统部署了几个结点、结点之间的关系、服务器的高可用、容错性、网络接口与协议等。决定了应用如何运行、运行的性能、可维护性、可扩展性等，是所有架构的基础。</li>\n<li><strong>组织架构</strong>：团队架构，包括项目的组织形式、人员构成、职责等，是上面所有架构的保障设施。良好的组织架构能够保证其他架构的有效实施和推进。<blockquote>\n<p><strong>架构随着业务、负载的变化需要不断的梳理和重构，推进架构的演进。</strong></p>\n</blockquote>\n</li>\n</ol>\n<h2 id=\"业务架构\"><a href=\"#业务架构\" class=\"headerlink\" title=\"业务架构\"></a>业务架构</h2><p><img src=\"/2018-05-16/Talk-About-The-Architecture/1526438152354-6a181918-13db-4d45-855f-88257de3f429-image.png\" alt=\"俯视视角\"> </p>\n<ul>\n<li>业务执行是应用的核心模块，是应用的主要功能。</li>\n<li>数据分析是应用的辅助模块，有助于对应用做数据驱动化研发、商业智能研究、改善用户体验。</li>\n<li>系统管理是应用的基础部分，做好系统的部署、各项指标的监控、关键数据的备份等有助于应用快速迭代部署和稳定运行。</li>\n</ul>\n<h2 id=\"技术架构-概览\"><a href=\"#技术架构-概览\" class=\"headerlink\" title=\"技术架构 - 概览\"></a>技术架构 - 概览</h2><p><img src=\"/2018-05-16/Talk-About-The-Architecture/1526438216252-267d0e5e-63b3-44dc-b988-c9eb1758a10f-image.png\" alt=\"剖面视角\"> </p>\n<ul>\n<li>业务数据源、数据的规则引擎和分析规则支撑起了交互界面的呈现</li>\n<li>基础设施、通用服务构建起了底层的业务逻辑</li>\n</ul>\n<h2 id=\"技术架构-具体\"><a href=\"#技术架构-具体\" class=\"headerlink\" title=\"技术架构 - 具体\"></a>技术架构 - 具体</h2><p><img src=\"/2018-05-16/Talk-About-The-Architecture/1526438239613-1cdabcae-9196-4aad-869d-94285ae76d41-image.png\" alt=\"\"> </p>\n<ul>\n<li>UI和应用都属于应用层，即提供具体的业务实现。其中UI是视图层的主要表现形式。</li>\n<li>应用和服务属于控制逻辑和访问通道，其中服务则是主要的业务逻辑所在，其可以提供服务接口，供应用调用。</li>\n<li>核心、驱动和数据构成了数据层，是对业务中所有相关数据的操作逻辑，是模型层。其中，核心可以对外提供接口，供服务调用。</li>\n</ul>\n<h2 id=\"架构的演化\"><a href=\"#架构的演化\" class=\"headerlink\" title=\"架构的演化\"></a>架构的演化</h2><p><img src=\"/2018-05-16/Talk-About-The-Architecture/1526438275615-26fee321-9534-4a04-b51e-7806434b66e7-image.png\" alt=\"\"> </p>\n<ul>\n<li>单体应用架构，所有逻辑都在应用和核心模块中，包括业务逻辑、数据操作等。</li>\n<li>通过数据驱动统一数据操作接口，屏蔽数据源的差异，可以根据资源进行垂直分区。</li>\n<li>解耦各个模块以服务的形式对外提供api接口，形成分布式服务架构。</li>\n</ul>\n<h2 id=\"部署架构\"><a href=\"#部署架构\" class=\"headerlink\" title=\"部署架构\"></a>部署架构</h2><p><img src=\"/2018-05-16/Talk-About-The-Architecture/1526438314473-c5da5a10-c62d-49a0-9209-5e43e54b88ca-image-resized.png\" alt=\"\"> </p>\n<ul>\n<li>UI交互界面单独部署，包括web、app等形式</li>\n<li>应用单独部署为一个结点或者集群</li>\n<li>服务、核心以及驱动做为整体进行部署</li>\n<li>数据源单独部署</li>\n<li>一个简单的应用/服务集群: LVS(使用keepalived做主备) + Nginx(反向代理) + Tomcat(业务容器)</li>\n</ul>\n<h2 id=\"数据架构\"><a href=\"#数据架构\" class=\"headerlink\" title=\"数据架构\"></a>数据架构</h2><p><img src=\"/2018-05-16/Talk-About-The-Architecture/1526438343067-0e351afe-72f7-4a7f-a6be-72fab9cd54c8-image.png\" alt=\"\"> </p>\n<ul>\n<li>交互界面呈现出来的数据交互逻辑、数据流向决定了业务的主要数据设计</li>\n<li>原始的业务数据、日志和统计需要的数据支撑了数据分析需要的报表输出</li>\n<li>实时信息在一定的规则和状态机引擎下可以提供出实时状态监测等仪表盘功能</li>\n</ul>\n<h2 id=\"数据的五个属性\"><a href=\"#数据的五个属性\" class=\"headerlink\" title=\"数据的五个属性\"></a>数据的五个属性</h2><ul>\n<li><strong>访问频率</strong>：读写频率；只读且经常被访问的数据可以冗余多份</li>\n<li><strong>对一致性的要求</strong>：一致性要求高的数据需要严格保证准确性。</li>\n<li><strong>访问权限</strong>：API设计中根据不同的权限暴露不同粒度的数据。PO-&gt;VO即是对同一事物在不同权限下的描述,</li>\n<li><strong>数据重要性</strong>：不可丢失、允许部分丢失、只是缓存、无需保存</li>\n<li><strong>数据保密性</strong>：内部可以明文、内部不可明文、可以对外公开</li>\n</ul>\n<h2 id=\"数据设计\"><a href=\"#数据设计\" class=\"headerlink\" title=\"数据设计\"></a>数据设计</h2><ul>\n<li>充分理解交互UI，需要知道哪些数据界面关联，哪些数据可以缓存。</li>\n<li>充分理解业务，要搞清楚哪些数据需要记录以及数据之间的关系。</li>\n<li>数据库设计需要注意存储效率：<ul>\n<li>减少事务</li>\n<li>减少联表查询</li>\n<li>适当使用索引</li>\n<li>考虑使用缓存</li>\n<li>…</li>\n</ul>\n</li>\n<li>数据统计场景中，实时性要求较高的数据统计可以用redis；非实时数据则可以使用单独表，通过队列异步运算或者定时计算更新数据。此外，对于一致性要求较高的统计数据，需要依靠事务或者定时校对机制保证准确性。</li>\n</ul>\n<h2 id=\"什么是架构师\"><a href=\"#什么是架构师\" class=\"headerlink\" title=\"什么是架构师\"></a>什么是架构师</h2><ul>\n<li>生命周期识别，合理拆分生命周期</li>\n<li>识别问题和问题的主体, 切忌把解决方案当问题, 发现问题永远比解决问题更加重要!!!</li>\n<li>关注业务技术，保障业务增长</li>\n<li>OKR架构：负责关键技术的突破，解决技术可行性问题，拿出从0到1的那些关键结果</li>\n<li><strong>权责对等，保障架构执行！！！</strong></li>\n</ul>\n<h2 id=\"架构师必备素质\"><a href=\"#架构师必备素质\" class=\"headerlink\" title=\"架构师必备素质\"></a>架构师必备素质</h2><ul>\n<li>站的高、望的远、扎的深</li>\n<li>精通某种技术，能够从本质上类比，触类旁通其他技术。</li>\n<li>平等对待所有技术，只有合适与不合适，没有喜欢与不喜欢。</li>\n<li>视野开阔，了解不同技术的优缺点, 知道可以直接用哪个开源项目来满足这样那样的需求，能够辨别是否需要造轮子。</li>\n<li>精通设计模式，但又不泛用。</li>\n<li>把系统拆分成多个子系统或模块，模块之间尽量松耦合，使得原先只能串行的开发任务，可以并行开展，可以通过投入更多人力来缩短工期。</li>\n<li>能清楚地知道系统的瓶颈在什么地方，不断地定位技术难度、研发进度、性能、内存等各方面的瓶颈，不断调整骨干力量解决瓶颈，在风险爆发之前就消除隐患。</li>\n<li>能够预料到需求可能产生怎样的变化，做好前瞻性设计。</li>\n</ul>\n<h2 id=\"架构六步思考法\"><a href=\"#架构六步思考法\" class=\"headerlink\" title=\"架构六步思考法\"></a>架构六步思考法</h2><p><img src=\"/2018-05-16/Talk-About-The-Architecture/1526438498119-90bbb34f-ef90-43cb-939b-aa0f696262ce-image.png\" alt=\"架构六步思考法\"> </p>\n<h2 id=\"架构原则-概览\"><a href=\"#架构原则-概览\" class=\"headerlink\" title=\"架构原则 - 概览\"></a>架构原则 - 概览</h2><p><img src=\"/2018-05-16/Talk-About-The-Architecture/1526438513492-00ba90a2-24fb-460d-aa4c-d30bed417433-image.png\" alt=\"\"> </p>\n<h2 id=\"架构原则\"><a href=\"#架构原则\" class=\"headerlink\" title=\"架构原则\"></a>架构原则</h2><ul>\n<li><strong>避免过度设计</strong>：最简单的方案最容易实现和维护，也可以避免浪费资源。但方案中需要包括扩展。</li>\n<li><strong>冗余设计</strong>：对服务、数据库的做结点冗余，保证服务的高可用。通过数据库主从模式、应用集群来实现。</li>\n<li><strong>多活数据中心</strong>：为了容灾，从根本上保障应用的高可用性。需要构建多活的数据中心，以防止一个数据中心由于不可控因素出现故障后，引起整个系统的不可用。</li>\n<li><strong>无状态设计</strong>：api、接口等的设计不能有前后依赖关系，一个资源不受其他资源改动的影响。无状态的系统才能更好地进行扩展。如果非得有状态，则要么客户端管理状态，要么服务端用分布式缓存管理状态。</li>\n<li><strong>可回滚</strong>：对于任何业务尤其是关键业务，都具有恢复机制。可以使用基于日志的WAL、基于事件的Event sourcing等来实现可回滚。</li>\n<li><strong>可禁用/自我保护</strong>：具有限流机制，当上游的流量超过自身的负载能力时，能够拒绝溢出的请求。可以通过手动开关或者自动开关（监测异常流量行为），在应用前端挡住流量。</li>\n<li><strong>问题可追踪</strong>：当系统出现问题时，能够定位请求的轨迹、每一步的请求信息等。分布式链路追踪系统即解决的此方面的问题。</li>\n<li><strong>可监控</strong>：可监控是保障系统能够稳定运行的关键。包括对业务逻辑的监控、应用进程的监控以及应用依赖的CPU、硬盘等系统资源的监控。每一个系统都需要做好这几个层面的监控。</li>\n<li><strong>故障隔离</strong>：将系统依赖的资源(线程、CPU)和服务隔离开来能够使得某个服务的故障不会影响其他服务的调用。通过线程池或者分散部署结点可以对故障进行隔离。</li>\n<li><strong>成熟可控的技术选型</strong>：使用市面上主流、成熟、文档、支持资源多的技术，选择合适的而非最火的技术实现系统。</li>\n<li><strong>梯级存储</strong>：内存-&gt;SSD硬盘-&gt;传统硬盘-&gt;磁带，可以根据数据的重要性和生命周期对数据进行分级存储。</li>\n<li><strong>缓存设计</strong>：隔离请求与后端逻辑、存储，是就近原则的一种机制。包括客户端缓存（预先下发资源）、nginx缓存、本地缓存以及分布式缓存。</li>\n<li><strong>异步设计</strong>：对于调用方不关注结果或者允许结果延时返回的接口，采用队列进行异步响应能够很大程度提高系统性能；调用其他服务的时候不去等待服务方返回结果直接返回，同样能够提升系统响应性能。异步队列也是解决分布式事务的常用手段。</li>\n<li><strong>前瞻性设计</strong>：根据行业经验和预判，提前把可扩展性、后向兼容性设计好。</li>\n<li><strong>水平扩展</strong>：相比起垂直扩展，能够通过堆机器解决问题是最优先考虑的问题，系统的负载能力也才能接近无限扩展。此外，基于<code>云计算</code>技术根据系统的负载自动调整容量能够在节省成本的同时保证服务的可用性。</li>\n<li><strong>小步构建和发布</strong>：快速迭代项目，快速试错。不能有跨度时间过长的项目规划。</li>\n<li><strong>自动化</strong>：打包、测试的自动化称为持续集成，部署的自动化称为持续部署。自动化机制是快速迭代和试错的基础保证。</li>\n</ul>\n<h2 id=\"架构原则-可扩展\"><a href=\"#架构原则-可扩展\" class=\"headerlink\" title=\"架构原则 - 可扩展\"></a>架构原则 - 可扩展</h2><p><img src=\"/2018-05-16/Talk-About-The-Architecture/1526438712437-0ddc81c3-0e3f-437a-8b2f-721e5a730e49-image.png\" alt=\"三轴扩展理论\"> </p>\n<ul>\n<li>X轴，水平复制或克隆，面向目标，如数据库读写分离、复制表、replication等，将单体应用或者以来的服务做冗余，通过负载均衡提高系统负载能力。</li>\n<li>Y轴，面向功能/服务，如垂直应用、分布式服务等，就是将单体应用根据功能拆分成小的应用或者服务。</li>\n<li>Z轴，面向资源，如数据库水平分库，对资源做分片，将压力分散到不同的结点上。<blockquote>\n<ul>\n<li><strong>避免依赖于数据库的运算功能(函数、存储器、触发器等)，将负载放在更容易扩展的业务应用端。</strong></li>\n<li><strong>可扩展方案原则： 20倍设计、3倍实施、1.5倍部署（DID）。</strong></li>\n</ul>\n</blockquote>\n</li>\n</ul>\n<h2 id=\"系统响应性能提升五板斧\"><a href=\"#系统响应性能提升五板斧\" class=\"headerlink\" title=\"系统响应性能提升五板斧\"></a>系统响应性能提升五板斧</h2><ul>\n<li><strong>异步</strong>：队列缓冲、异步请求。</li>\n<li><strong>并发</strong>：利用多CPU多线程执行业务逻辑。</li>\n<li><strong>就近原则</strong>：缓存、梯度存储。</li>\n<li><strong>减少IO</strong>：合并细粒度接口为粗粒度接口、频繁的覆盖操作可以只做最后一次操作。这里一个需要特别注意的地方: <strong>代码中尽量避免在循环中调用外部服务，更好的做法是使用粗粒度批量接口在循环外面只进行一次请求。</strong></li>\n<li><strong>分区</strong>：频繁访问的数据集规模保持在合理的范围。</li>\n</ul>\n<h2 id=\"参考资料\"><a href=\"#参考资料\" class=\"headerlink\" title=\"参考资料\"></a>参考资料</h2><ul>\n<li>《架构真经》 by 陈斌</li>\n<li>《聊聊架构》 by 王概凯</li>\n<li>《架构师的第一课》 by 蔡学镛</li>\n<li>架构六步思考法 by 夏华夏@美团</li>\n</ul>\n<hr>\n<blockquote>\n<p>来源: <a href=\"http://www.rowkey.me/arch-ppt/index.html\" target=\"_blank\" rel=\"noopener\">http://www.rowkey.me/arch-ppt/index.html</a></p>\n</blockquote>\n"}],"PostAsset":[{"_id":"source/_posts/Container-Application-Design/1526262020618-7b150d6f-b6a3-4791-8212-38551258c423-image.png","slug":"1526262020618-7b150d6f-b6a3-4791-8212-38551258c423-image.png","post":"cjh8jw4xd00456b8kejuebd0m","modified":1,"renderable":0},{"_id":"source/_posts/Talk-About-The-Architecture/1526437772448-7783bdeb-4306-4847-85db-3754065cdea8-image.png","slug":"1526437772448-7783bdeb-4306-4847-85db-3754065cdea8-image.png","post":"cjh8jw4xf00466b8keysqq2sr","modified":1,"renderable":0},{"_id":"source/_posts/Talk-About-The-Architecture/1526437909260-9eff08f6-b8c8-436d-81ff-2ebc3f639464-image.png","slug":"1526437909260-9eff08f6-b8c8-436d-81ff-2ebc3f639464-image.png","post":"cjh8jw4xf00466b8keysqq2sr","modified":1,"renderable":0},{"_id":"source/_posts/Talk-About-The-Architecture/1526438152354-6a181918-13db-4d45-855f-88257de3f429-image.png","slug":"1526438152354-6a181918-13db-4d45-855f-88257de3f429-image.png","post":"cjh8jw4xf00466b8keysqq2sr","modified":1,"renderable":0},{"_id":"source/_posts/Talk-About-The-Architecture/1526438216252-267d0e5e-63b3-44dc-b988-c9eb1758a10f-image.png","slug":"1526438216252-267d0e5e-63b3-44dc-b988-c9eb1758a10f-image.png","post":"cjh8jw4xf00466b8keysqq2sr","modified":0,"renderable":0},{"_id":"source/_posts/Talk-About-The-Architecture/1526438239613-1cdabcae-9196-4aad-869d-94285ae76d41-image.png","slug":"1526438239613-1cdabcae-9196-4aad-869d-94285ae76d41-image.png","post":"cjh8jw4xf00466b8keysqq2sr","modified":1,"renderable":0},{"_id":"source/_posts/Talk-About-The-Architecture/1526438275615-26fee321-9534-4a04-b51e-7806434b66e7-image.png","slug":"1526438275615-26fee321-9534-4a04-b51e-7806434b66e7-image.png","post":"cjh8jw4xf00466b8keysqq2sr","modified":0,"renderable":0},{"_id":"source/_posts/Talk-About-The-Architecture/1526438314473-c5da5a10-c62d-49a0-9209-5e43e54b88ca-image-resized.png","slug":"1526438314473-c5da5a10-c62d-49a0-9209-5e43e54b88ca-image-resized.png","post":"cjh8jw4xf00466b8keysqq2sr","modified":1,"renderable":0},{"_id":"source/_posts/Talk-About-The-Architecture/1526438343067-0e351afe-72f7-4a7f-a6be-72fab9cd54c8-image.png","slug":"1526438343067-0e351afe-72f7-4a7f-a6be-72fab9cd54c8-image.png","post":"cjh8jw4xf00466b8keysqq2sr","modified":1,"renderable":0},{"_id":"source/_posts/Talk-About-The-Architecture/1526438498119-90bbb34f-ef90-43cb-939b-aa0f696262ce-image.png","slug":"1526438498119-90bbb34f-ef90-43cb-939b-aa0f696262ce-image.png","post":"cjh8jw4xf00466b8keysqq2sr","modified":0,"renderable":0},{"_id":"source/_posts/Talk-About-The-Architecture/1526438513492-00ba90a2-24fb-460d-aa4c-d30bed417433-image.png","slug":"1526438513492-00ba90a2-24fb-460d-aa4c-d30bed417433-image.png","post":"cjh8jw4xf00466b8keysqq2sr","modified":1,"renderable":0},{"_id":"source/_posts/Talk-About-The-Architecture/1526438712437-0ddc81c3-0e3f-437a-8b2f-721e5a730e49-image.png","slug":"1526438712437-0ddc81c3-0e3f-437a-8b2f-721e5a730e49-image.png","post":"cjh8jw4xf00466b8keysqq2sr","modified":1,"renderable":0},{"_id":"source/_posts/Container-Application-Design/1526261691982-7ead3978-fe73-423f-a675-90309a8bc859-image.png","slug":"1526261691982-7ead3978-fe73-423f-a675-90309a8bc859-image.png","post":"cjh8jw4xd00456b8kejuebd0m","modified":1,"renderable":0},{"_id":"source/_posts/Container-Application-Design/1526261707323-33e04e90-0449-4fea-8846-49a7a3cf6915-image-resized.png","slug":"1526261707323-33e04e90-0449-4fea-8846-49a7a3cf6915-image-resized.png","post":"cjh8jw4xd00456b8kejuebd0m","modified":1,"renderable":0},{"_id":"source/_posts/Container-Application-Design/1526261801128-be721a67-971b-4f35-960e-0ce907328f73-image-resized.png","slug":"1526261801128-be721a67-971b-4f35-960e-0ce907328f73-image-resized.png","post":"cjh8jw4xd00456b8kejuebd0m","modified":1,"renderable":0},{"_id":"source/_posts/Container-Application-Design/1526261901806-402b717e-5379-476a-ab90-d419ff516bc8-image.png","slug":"1526261901806-402b717e-5379-476a-ab90-d419ff516bc8-image.png","post":"cjh8jw4xd00456b8kejuebd0m","modified":1,"renderable":0},{"_id":"source/_posts/Container-Application-Design/1526261921352-50cf453f-a1eb-4d16-bde3-c47f7ecb5c96-image.png","slug":"1526261921352-50cf453f-a1eb-4d16-bde3-c47f7ecb5c96-image.png","post":"cjh8jw4xd00456b8kejuebd0m","modified":1,"renderable":0},{"_id":"source/_posts/Container-Application-Design/1526261951920-41f3d5f6-38ef-4619-91a1-1f802c90696a-image.png","slug":"1526261951920-41f3d5f6-38ef-4619-91a1-1f802c90696a-image.png","post":"cjh8jw4xd00456b8kejuebd0m","modified":1,"renderable":0},{"_id":"source/_posts/Container-Application-Design/1526261967663-aaa59614-51c8-43cc-bde6-237e644fbbb2-image.png","slug":"1526261967663-aaa59614-51c8-43cc-bde6-237e644fbbb2-image.png","post":"cjh8jw4xd00456b8kejuebd0m","modified":1,"renderable":0},{"_id":"source/_posts/Container-Application-Design/1526261996216-83455d4d-0512-4dbb-877e-1cd6e97e76ed-image.png","slug":"1526261996216-83455d4d-0512-4dbb-877e-1cd6e97e76ed-image.png","post":"cjh8jw4xd00456b8kejuebd0m","modified":1,"renderable":0},{"_id":"source/_posts/Container-Application-Design/1526262054188-bc378617-e76c-4498-9c0b-82f7704e6496-image-resized.png","slug":"1526262054188-bc378617-e76c-4498-9c0b-82f7704e6496-image-resized.png","post":"cjh8jw4xd00456b8kejuebd0m","modified":1,"renderable":0},{"_id":"source/_posts/Container-Application-Design/1526262095283-87098624-d8fc-4286-a2af-ac94f4b0f47b-image.png","slug":"1526262095283-87098624-d8fc-4286-a2af-ac94f4b0f47b-image.png","post":"cjh8jw4xd00456b8kejuebd0m","modified":1,"renderable":0},{"_id":"source/_posts/Container-Application-Design/1526262238219-a6221168-99d3-4f03-bfc6-ca2fad38c325-image.png","slug":"1526262238219-a6221168-99d3-4f03-bfc6-ca2fad38c325-image.png","post":"cjh8jw4xd00456b8kejuebd0m","modified":1,"renderable":0},{"_id":"source/_posts/Container-Application-Design/1526262264669-62a724a4-88d8-4511-9120-328cd7a4af15-image-resized.png","slug":"1526262264669-62a724a4-88d8-4511-9120-328cd7a4af15-image-resized.png","post":"cjh8jw4xd00456b8kejuebd0m","modified":1,"renderable":0},{"_id":"source/_posts/Container-Application-Design/1526262303219-9324cca1-515f-4424-b9b8-c19b8814b9c3-image.png","slug":"1526262303219-9324cca1-515f-4424-b9b8-c19b8814b9c3-image.png","post":"cjh8jw4xd00456b8kejuebd0m","modified":1,"renderable":0},{"_id":"source/_posts/Container-Application-Design/1526262348948-fce2d10f-320e-4d52-89eb-931bf394454c-image-resized.png","slug":"1526262348948-fce2d10f-320e-4d52-89eb-931bf394454c-image-resized.png","post":"cjh8jw4xd00456b8kejuebd0m","modified":1,"renderable":0},{"_id":"source/_posts/Container-Application-Design/1526262383289-ee67fbb1-8251-4af3-bb61-f28db3e9bbc0-image.png","slug":"1526262383289-ee67fbb1-8251-4af3-bb61-f28db3e9bbc0-image.png","post":"cjh8jw4xd00456b8kejuebd0m","modified":1,"renderable":0},{"_id":"source/_posts/Container-Application-Design/1526262452948-23ea67c9-470f-4f7b-8a03-c76307b4415f-image-resized.png","slug":"1526262452948-23ea67c9-470f-4f7b-8a03-c76307b4415f-image-resized.png","post":"cjh8jw4xd00456b8kejuebd0m","modified":1,"renderable":0},{"_id":"source/_posts/Container-Application-Design/1526262469915-5b17a04f-67ce-46de-967f-8d8ef906ac68-image.png","slug":"1526262469915-5b17a04f-67ce-46de-967f-8d8ef906ac68-image.png","post":"cjh8jw4xd00456b8kejuebd0m","modified":1,"renderable":0}],"PostCategory":[{"post_id":"cjh8jw4uq00006b8k1lfxdx34","category_id":"cjh8jw4v000036b8k0i4do9kl","_id":"cjh8jw4vc000c6b8k9v4rpki4"},{"post_id":"cjh8jw4v600076b8kymndkcee","category_id":"cjh8jw4v000036b8k0i4do9kl","_id":"cjh8jw4vf000g6b8kai2qjbbt"},{"post_id":"cjh8jw4v9000a6b8kd0465wjw","category_id":"cjh8jw4v000036b8k0i4do9kl","_id":"cjh8jw4vi000j6b8km2o050px"},{"post_id":"cjh8jw4ux00026b8ks08qutvt","category_id":"cjh8jw4v700086b8k4hvtj5f4","_id":"cjh8jw4vk000o6b8ku5xib9yl"},{"post_id":"cjh8jw4vb000b6b8k99qm1bhl","category_id":"cjh8jw4v000036b8k0i4do9kl","_id":"cjh8jw4vm000q6b8k8wj707qm"},{"post_id":"cjh8jw4ve000f6b8kzn0i690j","category_id":"cjh8jw4v000036b8k0i4do9kl","_id":"cjh8jw4vo000u6b8kmxgm4lge"},{"post_id":"cjh8jw4v300056b8kqykbntuc","category_id":"cjh8jw4vd000d6b8kczixffsb","_id":"cjh8jw4vq000x6b8klthpgy9y"},{"post_id":"cjh8jw4vj000n6b8ku7sb35gm","category_id":"cjh8jw4vj000l6b8ksxhdfk0m","_id":"cjh8jw4vs00116b8kx7ojzui7"},{"post_id":"cjh8jw4v500066b8kcl55nylp","category_id":"cjh8jw4vj000l6b8ksxhdfk0m","_id":"cjh8jw4vu00146b8kz31u47qe"},{"post_id":"cjh8jw4vl000p6b8krpnnn5d5","category_id":"cjh8jw4v000036b8k0i4do9kl","_id":"cjh8jw4vw00166b8kj6iki0gj"},{"post_id":"cjh8jw4vp000w6b8ktqd6fzw9","category_id":"cjh8jw4v000036b8k0i4do9kl","_id":"cjh8jw4vy001a6b8k7nqlfccs"},{"post_id":"cjh8jw4vh000i6b8k8qw3083k","category_id":"cjh8jw4vn000r6b8k5hta7q6z","_id":"cjh8jw4vz001d6b8kff01krnu"},{"post_id":"cjh8jw4vt00136b8kq9goe22h","category_id":"cjh8jw4vj000l6b8ksxhdfk0m","_id":"cjh8jw4w1001h6b8kmw60r7qx"},{"post_id":"cjh8jw4vn000t6b8ksiucugag","category_id":"cjh8jw4vs00106b8kbv6z0dke","_id":"cjh8jw4w3001j6b8kdldf147l"},{"post_id":"cjh8jw4vu00156b8kzlwo8n9q","category_id":"cjh8jw4vj000l6b8ksxhdfk0m","_id":"cjh8jw4w4001l6b8krt0079a6"},{"post_id":"cjh8jw4vx00196b8koi99i3bl","category_id":"cjh8jw4v000036b8k0i4do9kl","_id":"cjh8jw4w5001n6b8kx39zydb0"},{"post_id":"cjh8jw4vr000z6b8k7t6sqrq5","category_id":"cjh8jw4vw00176b8k0bvp8u7y","_id":"cjh8jw4w5001p6b8kmokkqqd5"},{"post_id":"cjh8jw4vy001c6b8kb1np2ylm","category_id":"cjh8jw4vj000l6b8ksxhdfk0m","_id":"cjh8jw4w6001r6b8k7s8cwsq6"},{"post_id":"cjh8jw4w0001g6b8kafckvi9x","category_id":"cjh8jw4vj000l6b8ksxhdfk0m","_id":"cjh8jw4w6001s6b8kxxj4wnfl"},{"post_id":"cjh8jw4w2001i6b8kow5z6of3","category_id":"cjh8jw4v700086b8k4hvtj5f4","_id":"cjh8jw4w6001u6b8kqinwecw1"},{"post_id":"cjh8jw4xd00456b8kejuebd0m","category_id":"cjh8jw4vd000d6b8kczixffsb","_id":"cjh8jw4y300496b8kg5gmab1s"},{"post_id":"cjh8jw4xf00466b8keysqq2sr","category_id":"cjh8jw4vd000d6b8kczixffsb","_id":"cjh8jw4y3004b6b8k6utpkbtu"}],"PostTag":[{"post_id":"cjh8jw4uq00006b8k1lfxdx34","tag_id":"cjh8jw4v300046b8ksve3qajm","_id":"cjh8jw4vg000h6b8kiu1iszry"},{"post_id":"cjh8jw4uq00006b8k1lfxdx34","tag_id":"cjh8jw4v800096b8kmpqtrpvy","_id":"cjh8jw4vi000k6b8ks2jnk78l"},{"post_id":"cjh8jw4ux00026b8ks08qutvt","tag_id":"cjh8jw4vd000e6b8ks8is2rzu","_id":"cjh8jw4vp000v6b8kdaiwbb7j"},{"post_id":"cjh8jw4ux00026b8ks08qutvt","tag_id":"cjh8jw4vj000m6b8kh76ck2ap","_id":"cjh8jw4vr000y6b8kvnnk72t2"},{"post_id":"cjh8jw4v300056b8kqykbntuc","tag_id":"cjh8jw4vn000s6b8klc5w8d40","_id":"cjh8jw4vy001b6b8kcwb5y06q"},{"post_id":"cjh8jw4v300056b8kqykbntuc","tag_id":"cjh8jw4vs00126b8k27z2yfkd","_id":"cjh8jw4w0001e6b8k2scofuup"},{"post_id":"cjh8jw4v500066b8kcl55nylp","tag_id":"cjh8jw4vw00186b8k2s3cnef5","_id":"cjh8jw4w5001m6b8ki42dp0jg"},{"post_id":"cjh8jw4v500066b8kcl55nylp","tag_id":"cjh8jw4w0001f6b8kfg58m4c9","_id":"cjh8jw4w5001o6b8k1no8bsxc"},{"post_id":"cjh8jw4v600076b8kymndkcee","tag_id":"cjh8jw4w4001k6b8kiipgq97h","_id":"cjh8jw4w8001x6b8kqdbar51i"},{"post_id":"cjh8jw4v600076b8kymndkcee","tag_id":"cjh8jw4w5001q6b8kjlfasjyv","_id":"cjh8jw4w8001y6b8kx0x81xl1"},{"post_id":"cjh8jw4v600076b8kymndkcee","tag_id":"cjh8jw4w6001t6b8k18hll4z9","_id":"cjh8jw4wa00206b8km6e1dufc"},{"post_id":"cjh8jw4v600076b8kymndkcee","tag_id":"cjh8jw4w6001v6b8k30by23o9","_id":"cjh8jw4wa00216b8kc3sl3gqj"},{"post_id":"cjh8jw4v9000a6b8kd0465wjw","tag_id":"cjh8jw4w8001w6b8k5hvyl7g3","_id":"cjh8jw4wb00246b8ke50yynrz"},{"post_id":"cjh8jw4v9000a6b8kd0465wjw","tag_id":"cjh8jw4w6001v6b8k30by23o9","_id":"cjh8jw4wb00256b8k1a36u7fe"},{"post_id":"cjh8jw4v9000a6b8kd0465wjw","tag_id":"cjh8jw4wa00226b8kv7u6ejhd","_id":"cjh8jw4we00276b8keu9j5f6c"},{"post_id":"cjh8jw4vb000b6b8k99qm1bhl","tag_id":"cjh8jw4wb00236b8ksuudruyx","_id":"cjh8jw4wg00296b8krd3o8qlz"},{"post_id":"cjh8jw4vb000b6b8k99qm1bhl","tag_id":"cjh8jw4w4001k6b8kiipgq97h","_id":"cjh8jw4wg002a6b8kkvs87swz"},{"post_id":"cjh8jw4ve000f6b8kzn0i690j","tag_id":"cjh8jw4w6001v6b8k30by23o9","_id":"cjh8jw4wi002e6b8ky7bwbggl"},{"post_id":"cjh8jw4ve000f6b8kzn0i690j","tag_id":"cjh8jw4w4001k6b8kiipgq97h","_id":"cjh8jw4wi002f6b8kb45lgh9a"},{"post_id":"cjh8jw4ve000f6b8kzn0i690j","tag_id":"cjh8jw4w6001t6b8k18hll4z9","_id":"cjh8jw4wj002h6b8kj9acipr9"},{"post_id":"cjh8jw4vh000i6b8k8qw3083k","tag_id":"cjh8jw4wi002d6b8ke1ihpwyq","_id":"cjh8jw4wj002j6b8k7ovyvngg"},{"post_id":"cjh8jw4vh000i6b8k8qw3083k","tag_id":"cjh8jw4wi002g6b8kcsfwl0du","_id":"cjh8jw4wk002k6b8kodfnko7j"},{"post_id":"cjh8jw4vj000n6b8ku7sb35gm","tag_id":"cjh8jw4w0001f6b8kfg58m4c9","_id":"cjh8jw4wl002n6b8kvp8nd7jg"},{"post_id":"cjh8jw4vj000n6b8ku7sb35gm","tag_id":"cjh8jw4wk002l6b8khklcgemc","_id":"cjh8jw4wl002o6b8kdaatg4ob"},{"post_id":"cjh8jw4vl000p6b8krpnnn5d5","tag_id":"cjh8jw4w6001v6b8k30by23o9","_id":"cjh8jw4wm002r6b8k1w2icekr"},{"post_id":"cjh8jw4vl000p6b8krpnnn5d5","tag_id":"cjh8jw4wl002p6b8k3d3vxfo8","_id":"cjh8jw4wm002s6b8konz1xcl9"},{"post_id":"cjh8jw4vn000t6b8ksiucugag","tag_id":"cjh8jw4vd000e6b8ks8is2rzu","_id":"cjh8jw4wn002u6b8kajf3pn4o"},{"post_id":"cjh8jw4vn000t6b8ksiucugag","tag_id":"cjh8jw4wl002q6b8ku7im1yvp","_id":"cjh8jw4wn002v6b8k4ddkh6ww"},{"post_id":"cjh8jw4vp000w6b8ktqd6fzw9","tag_id":"cjh8jw4w6001v6b8k30by23o9","_id":"cjh8jw4wo002y6b8kcuw259jq"},{"post_id":"cjh8jw4vp000w6b8ktqd6fzw9","tag_id":"cjh8jw4vd000e6b8ks8is2rzu","_id":"cjh8jw4wo002z6b8kzqmjj51j"},{"post_id":"cjh8jw4vp000w6b8ktqd6fzw9","tag_id":"cjh8jw4wn002w6b8ktxdiqzu4","_id":"cjh8jw4wp00316b8k412kvxml"},{"post_id":"cjh8jw4vr000z6b8k7t6sqrq5","tag_id":"cjh8jw4wo002x6b8ky7cqdvf0","_id":"cjh8jw4wq00346b8k5bi2a4ou"},{"post_id":"cjh8jw4vr000z6b8k7t6sqrq5","tag_id":"cjh8jw4wo00306b8kyc8vp5sb","_id":"cjh8jw4wr00356b8kn8z4pf6m"},{"post_id":"cjh8jw4vr000z6b8k7t6sqrq5","tag_id":"cjh8jw4wp00326b8kggkjsr2r","_id":"cjh8jw4wt00376b8k0zmqcs8q"},{"post_id":"cjh8jw4vt00136b8kq9goe22h","tag_id":"cjh8jw4w6001v6b8k30by23o9","_id":"cjh8jw4wu00396b8kngnlfk8s"},{"post_id":"cjh8jw4vt00136b8kq9goe22h","tag_id":"cjh8jw4wr00366b8k13lhnnjh","_id":"cjh8jw4wv003a6b8kqwp3q0km"},{"post_id":"cjh8jw4vu00156b8kzlwo8n9q","tag_id":"cjh8jw4w4001k6b8kiipgq97h","_id":"cjh8jw4wy003f6b8khmctb507"},{"post_id":"cjh8jw4vu00156b8kzlwo8n9q","tag_id":"cjh8jw4w0001f6b8kfg58m4c9","_id":"cjh8jw4wy003g6b8kslvnhqhx"},{"post_id":"cjh8jw4vu00156b8kzlwo8n9q","tag_id":"cjh8jw4wv003c6b8keglq23qp","_id":"cjh8jw4wy003i6b8kawb5soda"},{"post_id":"cjh8jw4vu00156b8kzlwo8n9q","tag_id":"cjh8jw4wx003d6b8k4id2xlov","_id":"cjh8jw4wz003j6b8kwkqjuhzh"},{"post_id":"cjh8jw4vx00196b8koi99i3bl","tag_id":"cjh8jw4w4001k6b8kiipgq97h","_id":"cjh8jw4x1003m6b8kn33j6ix2"},{"post_id":"cjh8jw4vx00196b8koi99i3bl","tag_id":"cjh8jw4wy003h6b8kcaje4j4c","_id":"cjh8jw4x1003n6b8kkylhmbhb"},{"post_id":"cjh8jw4vx00196b8koi99i3bl","tag_id":"cjh8jw4w6001v6b8k30by23o9","_id":"cjh8jw4x2003p6b8kanab2hy9"},{"post_id":"cjh8jw4vy001c6b8kb1np2ylm","tag_id":"cjh8jw4wz003l6b8kl8tg1hh9","_id":"cjh8jw4x3003s6b8k0kzzgp7i"},{"post_id":"cjh8jw4vy001c6b8kb1np2ylm","tag_id":"cjh8jw4x1003o6b8k549nz1jl","_id":"cjh8jw4x3003t6b8krn69rbi4"},{"post_id":"cjh8jw4vy001c6b8kb1np2ylm","tag_id":"cjh8jw4x2003q6b8k16g9jck3","_id":"cjh8jw4x4003v6b8k4coo9p0c"},{"post_id":"cjh8jw4w0001g6b8kafckvi9x","tag_id":"cjh8jw4w0001f6b8kfg58m4c9","_id":"cjh8jw4x6003x6b8kawxs5kio"},{"post_id":"cjh8jw4w0001g6b8kafckvi9x","tag_id":"cjh8jw4x2003r6b8k18fnqlj6","_id":"cjh8jw4x6003y6b8kkqlzzc5b"},{"post_id":"cjh8jw4w0001g6b8kafckvi9x","tag_id":"cjh8jw4wo002x6b8ky7cqdvf0","_id":"cjh8jw4x700406b8k8m2l602j"},{"post_id":"cjh8jw4w2001i6b8kow5z6of3","tag_id":"cjh8jw4x4003w6b8kqqww9as1","_id":"cjh8jw4x900416b8kfuscq0q9"},{"post_id":"cjh8jw4w2001i6b8kow5z6of3","tag_id":"cjh8jw4vj000m6b8kh76ck2ap","_id":"cjh8jw4xa00426b8k1ukps576"},{"post_id":"cjh8jw4w2001i6b8kow5z6of3","tag_id":"cjh8jw4vd000e6b8ks8is2rzu","_id":"cjh8jw4xa00436b8kdnkf6jww"},{"post_id":"cjh8jw4w2001i6b8kow5z6of3","tag_id":"cjh8jw4x7003z6b8kn737ntsd","_id":"cjh8jw4xa00446b8kvsby0418"},{"post_id":"cjh8jw4xf00466b8keysqq2sr","tag_id":"cjh8jw4vn000s6b8klc5w8d40","_id":"cjh8jw4y100486b8koh1ekjkh"},{"post_id":"cjh8jw4xf00466b8keysqq2sr","tag_id":"cjh8jw4vs00126b8k27z2yfkd","_id":"cjh8jw4y3004a6b8kxjnr1jd5"},{"post_id":"cjh8jw4xd00456b8kejuebd0m","tag_id":"cjh8jw4xi00476b8k08tds4wt","_id":"cjh8jw4y3004c6b8kat9um2yx"},{"post_id":"cjh8jw4xd00456b8kejuebd0m","tag_id":"cjh8jw4vn000s6b8klc5w8d40","_id":"cjh8jw4y3004d6b8klfxuo4zk"}],"Tag":[{"name":"Aliyun","_id":"cjh8jw4v300046b8ksve3qajm"},{"name":"IPv6","_id":"cjh8jw4v800096b8kmpqtrpvy"},{"name":"PHP","_id":"cjh8jw4vd000e6b8ks8is2rzu"},{"name":"Yii2","_id":"cjh8jw4vj000m6b8kh76ck2ap"},{"name":"Architect","_id":"cjh8jw4vn000s6b8klc5w8d40"},{"name":"Humanity","_id":"cjh8jw4vs00126b8k27z2yfkd"},{"name":"DynamoDB","_id":"cjh8jw4vw00186b8k2s3cnef5"},{"name":"Software","_id":"cjh8jw4w0001f6b8kfg58m4c9"},{"name":"Ubuntu","_id":"cjh8jw4w4001k6b8kiipgq97h"},{"name":"HTTPS","_id":"cjh8jw4w5001q6b8kjlfasjyv"},{"name":"Nginx","_id":"cjh8jw4w6001t6b8k18hll4z9"},{"name":"Server","_id":"cjh8jw4w6001v6b8k30by23o9"},{"name":"AirFlow","_id":"cjh8jw4w8001w6b8k5hvyl7g3"},{"name":"Supervisord","_id":"cjh8jw4wa00226b8kv7u6ejhd"},{"name":"MongoDB","_id":"cjh8jw4wb00236b8ksuudruyx"},{"name":"Linux","_id":"cjh8jw4wi002d6b8ke1ihpwyq"},{"name":"Shell","_id":"cjh8jw4wi002g6b8kcsfwl0du"},{"name":"OSX","_id":"cjh8jw4wk002l6b8khklcgemc"},{"name":"Shadowsocks","_id":"cjh8jw4wl002p6b8k3d3vxfo8"},{"name":"Tips","_id":"cjh8jw4wl002q6b8ku7im1yvp"},{"name":"Process Manager","_id":"cjh8jw4wn002w6b8ktxdiqzu4"},{"name":"Ruby","_id":"cjh8jw4wo002x6b8ky7cqdvf0"},{"name":"Cache","_id":"cjh8jw4wo00306b8kyc8vp5sb"},{"name":"Rails","_id":"cjh8jw4wp00326b8kggkjsr2r"},{"name":"Siege","_id":"cjh8jw4wr00366b8k13lhnnjh"},{"name":"PPA","_id":"cjh8jw4wv003c6b8keglq23qp"},{"name":"Sources","_id":"cjh8jw4wx003d6b8k4id2xlov"},{"name":"Swap","_id":"cjh8jw4wy003h6b8kcaje4j4c"},{"name":"rbenv","_id":"cjh8jw4wz003l6b8kl8tg1hh9"},{"name":"brew","_id":"cjh8jw4x1003o6b8k549nz1jl"},{"name":"ruby","_id":"cjh8jw4x2003q6b8k16g9jck3"},{"name":"GEM","_id":"cjh8jw4x2003r6b8k18fnqlj6"},{"name":"Mina","_id":"cjh8jw4x4003w6b8kqqww9as1"},{"name":"Deploy","_id":"cjh8jw4x7003z6b8kn737ntsd"},{"name":"Container","_id":"cjh8jw4xi00476b8k08tds4wt"}]}}