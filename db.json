{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[{"_id":"source/CNAME","path":"CNAME","modified":0,"renderable":0},{"_id":"source/favicon.ico","path":"favicon.ico","modified":0,"renderable":0},{"_id":"source/apple-touch-icon.png","path":"apple-touch-icon.png","modified":0,"renderable":0},{"_id":"source/robots.txt","path":"robots.txt","modified":0,"renderable":0},{"_id":"themes/maupassant/source/fancybox/blank.gif","path":"fancybox/blank.gif","modified":0,"renderable":1},{"_id":"themes/maupassant/source/css/style.scss","path":"css/style.scss","modified":0,"renderable":1},{"_id":"themes/maupassant/source/fancybox/fancybox_loading.gif","path":"fancybox/fancybox_loading.gif","modified":0,"renderable":1},{"_id":"themes/maupassant/source/fancybox/fancybox_loading@2x.gif","path":"fancybox/fancybox_loading@2x.gif","modified":0,"renderable":1},{"_id":"themes/maupassant/source/css/jquery.fancybox.css","path":"css/jquery.fancybox.css","modified":0,"renderable":1},{"_id":"themes/maupassant/source/fancybox/fancybox_sprite.png","path":"fancybox/fancybox_sprite.png","modified":0,"renderable":1},{"_id":"themes/maupassant/source/fancybox/fancybox_overlay.png","path":"fancybox/fancybox_overlay.png","modified":0,"renderable":1},{"_id":"themes/maupassant/source/fancybox/fancybox_sprite@2x.png","path":"fancybox/fancybox_sprite@2x.png","modified":0,"renderable":1},{"_id":"themes/maupassant/source/js/fancybox.js","path":"js/fancybox.js","modified":0,"renderable":1},{"_id":"themes/maupassant/source/js/search.js","path":"js/search.js","modified":0,"renderable":1},{"_id":"themes/maupassant/source/js/codeblock-resizer.js","path":"js/codeblock-resizer.js","modified":0,"renderable":1},{"_id":"themes/maupassant/source/js/smartresize.js","path":"js/smartresize.js","modified":0,"renderable":1},{"_id":"themes/maupassant/source/js/totop.js","path":"js/totop.js","modified":0,"renderable":1},{"_id":"themes/maupassant/source/js/share.js","path":"js/share.js","modified":0,"renderable":1}],"Cache":[{"_id":"source/CNAME","hash":"1dd2871f1d1edbb369ff272d10431cc029f1286f","modified":1486914759000},{"_id":"themes/maupassant/.travis.yml","hash":"0339959f29deddc365e8fe8bd85da524410b9a23","modified":1486914759000},{"_id":"source/favicon.ico","hash":"b9e93fdd6b61eeed5f19b23a3c86e122f08c70bf","modified":1486914759000},{"_id":"source/apple-touch-icon.png","hash":"bcc42f6158418aaf3efc04c68e4eac2dec7aaf97","modified":1486914759000},{"_id":"source/robots.txt","hash":"fe301ff6ce278429b113a06a558a244807e642a0","modified":1486914759000},{"_id":"themes/maupassant/README.md","hash":"75d8c42569809961953d1934de445418c00ab94c","modified":1486914759000},{"_id":"themes/maupassant/_config.yml","hash":"88352790fbc46b036a0fd5a5ce8fb578366e9a44","modified":1486914759000},{"_id":"themes/maupassant/LICENSE","hash":"019dc6a9aba02ae3aaabca45f39aecd6e8e7f1d8","modified":1486914759000},{"_id":"themes/maupassant/package.json","hash":"81fb4e2ac051ecfb9a93f37b28910291b939771a","modified":1486914759000},{"_id":"source/_posts/Create-Yii2-Project.md","hash":"2a477be195e3d560c6aabfe086363590ba1bd887","modified":1486914759000},{"_id":"source/_posts/DynamoDB-Ubuntu.md","hash":"9019ad11801d9f161fe0c4f6ff9e88922a1d8fcb","modified":1486914759000},{"_id":"source/_posts/Install-Nginx-PHP7-MySQL-on-Ubuntu16-04.md","hash":"7f027c7d03fb2a4817453c33af666cc827ac6933","modified":1486914759000},{"_id":"source/_posts/Https-Nginx.md","hash":"7e0a702f266866cce49bb62d89f009b3e017f7ad","modified":1486914759000},{"_id":"source/_posts/Install-Shadowsocks-Server.md","hash":"cbd68a3ca7e4883aa9e539965fa5d7199bf8717a","modified":1486914759000},{"_id":"source/_posts/Linux-common-shells.md","hash":"1bfce7fb9cda7867e1b7a12df1914307337e1c79","modified":1486914759000},{"_id":"source/_posts/PHP-Matters-Needing-Attention.md","hash":"a4c5429d09b9d77b4225fdb08dc0e36465cee521","modified":1486914759000},{"_id":"source/_posts/Siege.md","hash":"bf763e6a201109b926669e3dfff5ff1b7202475d","modified":1486914759000},{"_id":"source/_posts/PHPFPM-Process-Manager.md","hash":"232074b0711f3fff01407a1322103b19692e4c3d","modified":1486914759000},{"_id":"source/_posts/Software-PPA-Sources.md","hash":"50c6b1a434ec03dcfbd5d4afdc42817831d81a1b","modified":1486914759000},{"_id":"source/_posts/Use-Mina-Deploy-Yii2.md","hash":"05ee050b5e4934e24134e6538036fd8f12ac3c68","modified":1486914759000},{"_id":"source/about/index.md","hash":"00f238fc1b27426876ab10f19e7de08924cdd702","modified":1486914759000},{"_id":"source/_posts/gem-note.md","hash":"405c7a2059e052399acdf9c3549c06bc87bc60c1","modified":1486914759000},{"_id":"source/_posts/Ubuntu-Swap.md","hash":"5805c455e3cbb06fa1cee19e3e7a8ecafca71d9d","modified":1486914759000},{"_id":"themes/maupassant/languages/de-DE.yml","hash":"5d3556a885e355a8c2da65ef3e7b3ee36a628bfa","modified":1486914759000},{"_id":"themes/maupassant/languages/en.yml","hash":"e13ab1a2d2f1edbe67b4c035fd4667cb6a31db8e","modified":1486914759000},{"_id":"themes/maupassant/languages/es-ES.yml","hash":"58e1d04bcd1834fa9d2960e18e027abbbccbedc9","modified":1486914759000},{"_id":"themes/maupassant/languages/fr-FR.yml","hash":"b47906ec0abf867fb3e3360bc046b7afb68aee25","modified":1486914759000},{"_id":"themes/maupassant/languages/zh-CN.yml","hash":"ebacfa5d0c14d603e0d505757adb24c0bbe5dd13","modified":1486914759000},{"_id":"themes/maupassant/languages/zh-TW.yml","hash":"56b65995c60e99dcebbf00168447fd225d28e5b2","modified":1486914759000},{"_id":"themes/maupassant/languages/ko.yml","hash":"909a33e0befa6978e8e72157c6b415b48551ee31","modified":1486914759000},{"_id":"themes/maupassant/layout/archive.jade","hash":"0050c883b4f202add71c8664d65e6072179e7190","modified":1486914759000},{"_id":"themes/maupassant/layout/base-without-sidebar.jade","hash":"1ad721de96784bf4253316b796db6200148d4152","modified":1486914759000},{"_id":"themes/maupassant/layout/base.jade","hash":"9d8b0ae0ad53e6c173b565b89a06b4f141527ccf","modified":1486914759000},{"_id":"themes/maupassant/layout/index.jade","hash":"7466ce52023ed8a413a6b4461354a9e20e62fc14","modified":1486914759000},{"_id":"themes/maupassant/layout/post.jade","hash":"9cf29fb0daed95935154ce0fa2b154df5a9b11b1","modified":1486914759000},{"_id":"themes/maupassant/layout/single-column.jade","hash":"c35fff4d9b331a41af5bc10f4278ec3d9da503db","modified":1486914759000},{"_id":"themes/maupassant/layout/timeline.jade","hash":"f03d8df63a188543cfe4e85e76194abe081411a1","modified":1486914759000},{"_id":"themes/maupassant/layout/page.jade","hash":"8d70fd3b93f2c9087a9ea7ec538dcc1d413bea01","modified":1486914759000},{"_id":"themes/maupassant/layout/_partial/after_footer.jade","hash":"3dbcc9a9f0d6e55da191d3393c18bbfcfe99fa69","modified":1486914759000},{"_id":"themes/maupassant/layout/_partial/footer.jade","hash":"aa020b794e697e8e9612530c97c6295efde469fe","modified":1486914759000},{"_id":"themes/maupassant/layout/_partial/comments.jade","hash":"6c7f63ba04a4d28323ba31e79a4927f3d3fcc56e","modified":1486914759000},{"_id":"themes/maupassant/layout/_partial/helpers.jade","hash":"acdf9e2d52ee86c831fa15ce1570930c5779bc78","modified":1486914759000},{"_id":"themes/maupassant/layout/_partial/mathjax2.jade","hash":"d6ac5dc4e9c7a1b866f1f92d88988cfb35aded4c","modified":1486914759000},{"_id":"themes/maupassant/layout/_partial/paginator.jade","hash":"53f9cb77448e84a98da5eb688e2e12b173c555bb","modified":1486914759000},{"_id":"themes/maupassant/layout/_partial/post_nav.jade","hash":"a2d698c84bb6da08195fe870dbd7215f65388d3f","modified":1486914759000},{"_id":"themes/maupassant/layout/_partial/totop.jade","hash":"8225bbc3cdb9648bc2e6872e5c616a9a1e4def4f","modified":1486914759000},{"_id":"themes/maupassant/layout/_partial/mathjax.jade","hash":"b54b56faff9e47ab3ca3cdd55056c73e60776f3c","modified":1486914759000},{"_id":"themes/maupassant/layout/_partial/tag.jade","hash":"0f0e6770e9d5dd8040e330d71bbbfadd2df36a28","modified":1486914759000},{"_id":"themes/maupassant/layout/_widget/category.jade","hash":"7c6aed762934ca51aa2669b886254da24b77bc14","modified":1486914759000},{"_id":"themes/maupassant/layout/_widget/links.jade","hash":"f57a0c76d243882b2b77330132bdb43bc648948b","modified":1486914759000},{"_id":"themes/maupassant/layout/_widget/recent_comments.jade","hash":"e119c5afa85abc60d139e2da99b0bfcd7a6530f8","modified":1486914759000},{"_id":"themes/maupassant/layout/_widget/search.jade","hash":"193546282908e499813534f86d27ef6e0a1357b3","modified":1486914759000},{"_id":"themes/maupassant/layout/_widget/tag.jade","hash":"132f049ce677d0e38f50073174c4ee4b825d4a06","modified":1486914759000},{"_id":"themes/maupassant/layout/_widget/recent_posts.jade","hash":"19431336d724d2118e46da43683bce9063176541","modified":1486914759000},{"_id":"themes/maupassant/source/fancybox/blank.gif","hash":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1486914759000},{"_id":"themes/maupassant/source/css/style.scss","hash":"c47599b6e132da40f8e47e37c1db61b2a9955d70","modified":1486914759000},{"_id":"themes/maupassant/source/fancybox/fancybox_loading.gif","hash":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1486914759000},{"_id":"themes/maupassant/source/fancybox/fancybox_loading@2x.gif","hash":"273b123496a42ba45c3416adb027cd99745058b0","modified":1486914759000},{"_id":"themes/maupassant/source/css/jquery.fancybox.css","hash":"f42f761157f26244673eb2f4a9215c70956f80dc","modified":1486914759000},{"_id":"themes/maupassant/source/fancybox/fancybox_sprite.png","hash":"17df19f97628e77be09c352bf27425faea248251","modified":1486914759000},{"_id":"themes/maupassant/source/fancybox/fancybox_overlay.png","hash":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1486914759000},{"_id":"themes/maupassant/source/fancybox/fancybox_sprite@2x.png","hash":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1486914759000},{"_id":"themes/maupassant/source/js/fancybox.js","hash":"13c4781570339f4fba76a3d7f202e442817dd605","modified":1486914759000},{"_id":"themes/maupassant/source/js/search.js","hash":"53db2eb255dd40a412ed62ea7332ca5a22f7816f","modified":1486914759000},{"_id":"themes/maupassant/source/js/codeblock-resizer.js","hash":"5d0b786d60bf225d9eabcc9cece2719ff4d9b6cd","modified":1486914759000},{"_id":"themes/maupassant/source/js/smartresize.js","hash":"3ef157fd877167e3290f42c67a624ea375a46c24","modified":1486914759000},{"_id":"themes/maupassant/source/js/totop.js","hash":"7dbf8fcf582a4fb6eb9b2c60d6de9f9c2091ec4c","modified":1486914759000},{"_id":"themes/maupassant/source/js/share.js","hash":"f49776e0baa2b913ddc7a20db24b3edd469c8343","modified":1486914759000},{"_id":"source/.DS_Store","hash":"41c5e55d38872b32f104a41e2836b8375f13f0f9","modified":1487406796000},{"_id":"source/_posts/Install-And-Deploy-AirFlow.md","hash":"ce0f7e4dbdd684dd94a1021c47745736fec0b942","modified":1487407591000},{"_id":"source/_posts/Mac-OSX-Basic-SoftWare.md","hash":"85b76ccbac5c31bcfa13ec72d806f1cd04bfe8e0","modified":1487407248000},{"_id":"source/_posts/Raiils-Cache-Simple.md","hash":"c3b0533a954d68e0e485858f6e766e0ce127555c","modified":1487407113000},{"_id":"source/_posts/Use-Brew-Install-Rbenv.md","hash":"7aa28306e0477b40560f105b3d5695bc31507a8d","modified":1487407421000},{"_id":"public/baidusitemap.xml","hash":"a6720a84747afc257b7a4db3b33df0703ddde057","modified":1487408153295},{"_id":"public/atom.xml","hash":"87fb9069aecf20090471eaf51bee22ac16290fee","modified":1487408153315},{"_id":"public/search.xml","hash":"ed1aea6c1de80394fefc0919dae74188b86be4c0","modified":1487408153316},{"_id":"public/sitemap.xml","hash":"16198b9e83e6846a035b3016f0b223f826214ef2","modified":1487408153316},{"_id":"public/about/index.html","hash":"ff39c519ecf66c077934073303e644d6d50ca66e","modified":1487408153331},{"_id":"public/2017-01-19/Install-And-Deploy-AirFlow.html","hash":"bf8a20d436a98351628cbec3ab48e0016f01abde","modified":1487408153331},{"_id":"public/2016-12-26/Use-Brew-Install-Rbenv.html","hash":"927405fcc13950abe9c2205d4cc3028dd2c5d6c1","modified":1487408153331},{"_id":"public/2016-12-26/Mac-OSX-Basic-SoftWare.html","hash":"d9ceed7bc5fd386b754b7bb89ba96205cada5d9a","modified":1487408153332},{"_id":"public/2016-11-18/Raiils-Cache-Simple.html","hash":"656da7664b93b6266ad3d178c5b82c1a6816d4b1","modified":1487408153332},{"_id":"public/2016-11-16/DynamoDB-Ubuntu.html","hash":"8e24072e9bc9e0ee0436d512810fa0bd2f6a8d4a","modified":1487408153332},{"_id":"public/2016-10-25/Create-Yii2-Project.html","hash":"cdfe5cd3f00cca8aa3a4c7b9235067ce1547e0b8","modified":1487408153333},{"_id":"public/2016-10-24/Siege.html","hash":"dbd5e7f6b2cc249e637b4503a0a9094ee4afc79b","modified":1487408153333},{"_id":"public/2016-10-21/Ubuntu-Swap.html","hash":"f7112939b054f0452bc535135e46a831970e90fb","modified":1487408153333},{"_id":"public/2016-10-12/gem-note.html","hash":"c6ef3fcdbc87bf86be80b92041d0d9edc23c6d93","modified":1487408153333},{"_id":"public/2016-09-30/Install-Nginx-PHP7-MySQL-on-Ubuntu16-04.html","hash":"3023b665411a86bef08f77cc17a9261e8dc4cf4c","modified":1487408153333},{"_id":"public/2016-09-30/Software-PPA-Sources.html","hash":"b2c4e1b2558572050aeefbd1bf9a3e254e550ce4","modified":1487408153334},{"_id":"public/archives/index.html","hash":"7c608534f52e3534973546fc024bea1490352924","modified":1487408153334},{"_id":"public/archives/page/2/index.html","hash":"b9d8905734e135765475ac7080bd76ec08494de7","modified":1487408153334},{"_id":"public/archives/2016/index.html","hash":"76c93aacc02adda94cd48be441d4b0f50782bf2b","modified":1487408153334},{"_id":"public/archives/2016/page/2/index.html","hash":"001fdf69db32b6298c0c46b4124185171c11d7f9","modified":1487408153334},{"_id":"public/archives/2016/09/index.html","hash":"03f8af08645a03962db5c29345dd2c8851369521","modified":1487408153334},{"_id":"public/archives/2016/10/index.html","hash":"25fe86d50b3097d6ace8369a807f2a7f1a17ff1b","modified":1487408153334},{"_id":"public/archives/2016/11/index.html","hash":"1aa9b1a188f6a9f42a61b9b180912273a4c8d0d0","modified":1487408153334},{"_id":"public/archives/2016/12/index.html","hash":"bef1e7eb9a23e819dfdeb617d9a9a9a7b5a36136","modified":1487408153334},{"_id":"public/archives/2017/index.html","hash":"e2dd18ea032f14925cca6120e6c3a4776c1c9d89","modified":1487408153334},{"_id":"public/archives/2017/01/index.html","hash":"e2dd18ea032f14925cca6120e6c3a4776c1c9d89","modified":1487408153334},{"_id":"public/categories/Develop/index.html","hash":"e442798e18a2e901aad8da556b729443275a0bda","modified":1487408153335},{"_id":"public/categories/Software/index.html","hash":"a4ac740938c2444c8f1d19864dc8e98961c8526a","modified":1487408153335},{"_id":"public/categories/Server/index.html","hash":"27f65182e658a569b82e2dac7564fd8923d48cc7","modified":1487408153335},{"_id":"public/categories/Linux/index.html","hash":"eac549a6372eff0a108d739da874b704d8bb142a","modified":1487408153335},{"_id":"public/categories/PHP/index.html","hash":"cf54cf6d79aee84426350d972f31e74fc39e37df","modified":1487408153335},{"_id":"public/categories/Rails/index.html","hash":"164b88f9c9408d55ec0b0cd32788a2b69c00b344","modified":1487408153335},{"_id":"public/index.html","hash":"ae0d0229b0c0f336017afb4310394cc07666f2d1","modified":1487408153335},{"_id":"public/page/2/index.html","hash":"0d59368740bfd80a80dfbd2a5637f22dcc0ae363","modified":1487408153335},{"_id":"public/tags/PHP/index.html","hash":"ce238a8cf2a607f2954eedfd139684b1abbd3217","modified":1487408153335},{"_id":"public/tags/Yii2/index.html","hash":"bda517333531d6fc33f952ab82e024faa90cd07a","modified":1487408153335},{"_id":"public/tags/DynamoDB/index.html","hash":"5596075be66bdd199be618e5cfa4217eb5c64130","modified":1487408153335},{"_id":"public/tags/Software/index.html","hash":"2475200caa1158c66d9010dd88b5d3b19a85ab7b","modified":1487408153335},{"_id":"public/tags/Server/index.html","hash":"b38c87e8cc31551990cd4b283e01bd24a83aa370","modified":1487408153335},{"_id":"public/tags/Ubuntu/index.html","hash":"96f6c4fe1c67f26b9044382936109bc9e14d6216","modified":1487408153335},{"_id":"public/tags/Nginx/index.html","hash":"15bf50f84c09a5629a60db1897711268522e3dfa","modified":1487408153336},{"_id":"public/tags/HTTPS/index.html","hash":"2268194940b7773c105c259a9292c243ea7e68c0","modified":1487408153336},{"_id":"public/tags/Shadowsocks/index.html","hash":"0817b2379af4f5bacaa4a56550432905d785fd27","modified":1487408153336},{"_id":"public/tags/Linux/index.html","hash":"eac549a6372eff0a108d739da874b704d8bb142a","modified":1487408153336},{"_id":"public/tags/Shell/index.html","hash":"0f2d545ea43c5b8c9f62831a5449b9d33ad382f2","modified":1487408153336},{"_id":"public/tags/Tips/index.html","hash":"4657630161a057f4ec3ea671dfd77ecfbe687d18","modified":1487408153336},{"_id":"public/tags/Siege/index.html","hash":"2518951cc1e97cd3a72da16b8e23541da26f2b8b","modified":1487408153336},{"_id":"public/tags/PPA/index.html","hash":"73da9d4041084aece2d5cc2605c9effa9746c8eb","modified":1487408153336},{"_id":"public/tags/Sources/index.html","hash":"64b9ae556232b2a629bc86179d579c369b5bc7f9","modified":1487408153336},{"_id":"public/tags/Process-Manager/index.html","hash":"b574bd1a3f9b7e6be5deb0a39c5e2c1b60076b99","modified":1487408153336},{"_id":"public/tags/Mina/index.html","hash":"6c008f004f21b705394594e019986079948d1257","modified":1487408153337},{"_id":"public/tags/Deploy/index.html","hash":"5a2c61beded3681433e6c31b0aa64b6b43c7b036","modified":1487408153337},{"_id":"public/tags/GEM/index.html","hash":"a2f650914dc197f6c8395ff33608801306fe7fa9","modified":1487408153337},{"_id":"public/tags/Ruby/index.html","hash":"0b419f70b51f0e3575be8d0dd429ded647588f8f","modified":1487408153337},{"_id":"public/tags/Swap/index.html","hash":"d56053aa8253a810a44f1062d57c4513343d7b10","modified":1487408153337},{"_id":"public/tags/Cache/index.html","hash":"120e03250556a919c611d34fbc868e93bf864648","modified":1487408153337},{"_id":"public/tags/Rails/index.html","hash":"164b88f9c9408d55ec0b0cd32788a2b69c00b344","modified":1487408153337},{"_id":"public/tags/OSX/index.html","hash":"3207c2ce4f87be19e256445153555565750e5816","modified":1487408153337},{"_id":"public/tags/brew/index.html","hash":"e3b727cd86a898b806c316577ce5c911efeb189c","modified":1487408153337},{"_id":"public/tags/rbenv/index.html","hash":"2c36778ce4f5bc7e883f5fdc500c44849cb14cff","modified":1487408153337},{"_id":"public/tags/ruby/index.html","hash":"c39b49194f7c10230001b8f02c5565279c1dfef4","modified":1487408153337},{"_id":"public/tags/AirFlow/index.html","hash":"e01beb38ccaaa562cf5d97f1a4cf5c40c86a33d8","modified":1487408153337},{"_id":"public/tags/Supervisord/index.html","hash":"8b072f412260fcc452f91ad5c1e29d379cbc838c","modified":1487408153337},{"_id":"public/2016-11-08/Install-Shadowsocks-Server.html","hash":"2a02ef0ca474514699f57a2494ccbcde33dc2ad7","modified":1487408153337},{"_id":"public/2016-10-25/Use-Mina-Deploy-Yii2.html","hash":"4451dd8fc8dc762c3c36361704f8854cc28cba00","modified":1487408153337},{"_id":"public/2016-10-20/PHP-Matters-Needing-Attention.html","hash":"c9a5e1d85ac88333f21552a147d6269bd0dd71e6","modified":1487408153337},{"_id":"public/2016-10-11/Https-Nginx.html","hash":"1e48904ac79f0f83b8eb597649ccff56b535d963","modified":1487408153337},{"_id":"public/2016-10-10/PHPFPM-Process-Manager.html","hash":"844aeeab2e1a72bca67484f05613c45e611e860e","modified":1487408153337},{"_id":"public/2016-09-23/Linux-common-shells.html","hash":"e4a6ec6a099ce8272699e29905b30d326cfa789f","modified":1487408153337},{"_id":"public/CNAME","hash":"1dd2871f1d1edbb369ff272d10431cc029f1286f","modified":1487408153343},{"_id":"public/favicon.ico","hash":"b9e93fdd6b61eeed5f19b23a3c86e122f08c70bf","modified":1487408153343},{"_id":"public/apple-touch-icon.png","hash":"bcc42f6158418aaf3efc04c68e4eac2dec7aaf97","modified":1487408153343},{"_id":"public/robots.txt","hash":"fe301ff6ce278429b113a06a558a244807e642a0","modified":1487408153343},{"_id":"public/fancybox/blank.gif","hash":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1487408153343},{"_id":"public/fancybox/fancybox_loading.gif","hash":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1487408153343},{"_id":"public/fancybox/fancybox_loading@2x.gif","hash":"273b123496a42ba45c3416adb027cd99745058b0","modified":1487408153343},{"_id":"public/fancybox/fancybox_sprite.png","hash":"17df19f97628e77be09c352bf27425faea248251","modified":1487408153343},{"_id":"public/fancybox/fancybox_overlay.png","hash":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1487408153343},{"_id":"public/fancybox/fancybox_sprite@2x.png","hash":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1487408153343},{"_id":"public/css/jquery.fancybox.css","hash":"f42f761157f26244673eb2f4a9215c70956f80dc","modified":1487408153384},{"_id":"public/js/fancybox.js","hash":"13c4781570339f4fba76a3d7f202e442817dd605","modified":1487408153384},{"_id":"public/js/codeblock-resizer.js","hash":"5d0b786d60bf225d9eabcc9cece2719ff4d9b6cd","modified":1487408153384},{"_id":"public/js/search.js","hash":"53db2eb255dd40a412ed62ea7332ca5a22f7816f","modified":1487408153384},{"_id":"public/js/smartresize.js","hash":"3ef157fd877167e3290f42c67a624ea375a46c24","modified":1487408153384},{"_id":"public/js/totop.js","hash":"7dbf8fcf582a4fb6eb9b2c60d6de9f9c2091ec4c","modified":1487408153384},{"_id":"public/js/share.js","hash":"f49776e0baa2b913ddc7a20db24b3edd469c8343","modified":1487408153384},{"_id":"public/css/style.css","hash":"5bb4cff4637798bfb54c80319d32b22b1db7e1a6","modified":1487408153384}],"Category":[{"name":"Develop","_id":"ciz9wvzfh0003g38kpy5e5d0t"},{"name":"Software","_id":"ciz9wvzfo0008g38krflj0kmw"},{"name":"Server","_id":"ciz9wvzfv000dg38kle20bjea"},{"name":"Linux","_id":"ciz9wvzge000wg38kkbopxt1r"},{"name":"PHP","_id":"ciz9wvzgg0012g38k6gzg79ua"},{"name":"Rails","_id":"cizazoflb00011z8k0vkimwet"},{"name":"SOft","_id":"cizaztsk000091z8k0kssj4ld"}],"Data":[],"Page":[{"title":"About","date":"2016-09-23T09:17:38.000Z","_content":"\n<i class='fa fa-user'></i> NickName: [RobbsLuo](http://www.robbs.win \"Robbs Luo\")\n<i class='fa fa-envelope'></i> Email: [hongsheng.luo@foxmail.com](mailto:hongsheng.luo@foxmail.com \"Email\")\n<i class='fa fa-github'></i> Github: [@RobbsLuo](https://github.com/RobbsLuo \"Github\")\n","source":"about/index.md","raw":"---\ntitle: About\ndate: 2016-09-23 17:17:38\n---\n\n<i class='fa fa-user'></i> NickName: [RobbsLuo](http://www.robbs.win \"Robbs Luo\")\n<i class='fa fa-envelope'></i> Email: [hongsheng.luo@foxmail.com](mailto:hongsheng.luo@foxmail.com \"Email\")\n<i class='fa fa-github'></i> Github: [@RobbsLuo](https://github.com/RobbsLuo \"Github\")\n","updated":"2017-02-12T15:52:39.000Z","path":"about/index.html","comments":1,"layout":"page","_id":"ciz9wvzfc0001g38kph12yv61","content":"<p><i class=\"fa fa-user\"></i> NickName: <a href=\"http://www.robbs.win\" title=\"Robbs Luo\">RobbsLuo</a><br><i class=\"fa fa-envelope\"></i> Email: <a href=\"mailto:hongsheng.luo@foxmail.com\" title=\"Email\" target=\"_blank\" rel=\"external\">hongsheng.luo@foxmail.com</a><br><i class=\"fa fa-github\"></i> Github: <a href=\"https://github.com/RobbsLuo\" title=\"Github\" target=\"_blank\" rel=\"external\">@RobbsLuo</a></p>\n","excerpt":"","more":"<p><i class='fa fa-user'></i> NickName: <a href=\"http://www.robbs.win\" title=\"Robbs Luo\">RobbsLuo</a><br><i class='fa fa-envelope'></i> Email: <a href=\"mailto:hongsheng.luo@foxmail.com\" title=\"Email\">hongsheng.luo@foxmail.com</a><br><i class='fa fa-github'></i> Github: <a href=\"https://github.com/RobbsLuo\" title=\"Github\">@RobbsLuo</a></p>\n"}],"Post":[{"title":"创建 Yii2 项目","date":"2016-10-25T14:07:50.000Z","description":"简单的讲解如何创建 Yii2 项目，和其中需要注意的地方。","_content":"## 前言\n### Yii\n  [Yii](http://www.yiiframework.com/) 是一个高性能的，适用于开发 WEB2.0 应用的 PHP 框架。\n  Yii 自带了丰富的功能 ，包括 MVC，DAO/ActiveRecord，I18N/L10N，缓存，身份验证和基于角色的访问控制，脚手架，测试等，可显著缩短开发时间。\n## 创建\n### 前期准备\n  * [PHP运行环境](/2016-09-30/Install-Nginx-PHP7-MySQL-on-Ubuntu16-04.html)\n  * Composer 环境\n    - Mac OS X\n      \n          ```bash\n         brew install composer\n          ```\n    - Ubuntu\n      \n      ```bash\n        # 下载\n        curl -sS https://getcomposer.org/installer | php -d detect_unicode=Off \n        # 全局\n        mv composer.phar /usr/local/bin/composer \n        # 权限\n        chmod a+x /usr/local/bin/composer\n        # 更新\n        composer self-update\n      ```\n### 安装\n1. #### Composer 安装\n     安装composer-asset-plugin插件\n      ```bash\n      # 切换国内镜像(http://pkg.phpcomposer.com/)\n      composer config -g repo.packagist composer https://packagist.phpcomposer.com\n      \n      composer global require \"fxp/composer-asset-plugin:^1.2.0\"\n      ```\n      安装基础版\n      ```bash\n      composer create-project yiisoft/yii2-app-basic xxx\n      ```\n      安装高级版\n      ```bash\n      composer create-project yiisoft/yii2-app-advanced xxx\n      ```\n2. #### 下载安装\n      [基础班](https://github.com/yiisoft/yii2/releases/download/2.0.10/yii-basic-app-2.0.10.tgz)\n      [高级版](https://github.com/yiisoft/yii2/releases/download/2.0.10/yii-advanced-app-2.0.10.tgz)\n\n## Tips\n  ```bash\n  The zip extension and unzip command are both missing, skipping.\n  ```\n  解决方案\n  ```bash\n  apt-get install php7.0-zip\n  ```\n  ---\n  ```bash\n  codeception/base 2.2.3 requires phpunit/phpunit >4.8.20 <5.5 -> satisfiable by phpunit/phpunit\n  phpunit/phpunit 5.6.2 requires ext-dom * -> the requested PHP extension dom is missing from your system.\n  ```\n  解决方案\n  ```bash\n  apt-get install php7.0-xml\n  ```","source":"_posts/Create-Yii2-Project.md","raw":"---\ntitle: 创建 Yii2 项目\ndate: 2016-10-25 22:07:50\ntags:\n  - PHP\n  - Yii2\ncategories:\n  -  Develop\ndescription: 简单的讲解如何创建 Yii2 项目，和其中需要注意的地方。\n---\n## 前言\n### Yii\n  [Yii](http://www.yiiframework.com/) 是一个高性能的，适用于开发 WEB2.0 应用的 PHP 框架。\n  Yii 自带了丰富的功能 ，包括 MVC，DAO/ActiveRecord，I18N/L10N，缓存，身份验证和基于角色的访问控制，脚手架，测试等，可显著缩短开发时间。\n## 创建\n### 前期准备\n  * [PHP运行环境](/2016-09-30/Install-Nginx-PHP7-MySQL-on-Ubuntu16-04.html)\n  * Composer 环境\n    - Mac OS X\n      \n          ```bash\n         brew install composer\n          ```\n    - Ubuntu\n      \n      ```bash\n        # 下载\n        curl -sS https://getcomposer.org/installer | php -d detect_unicode=Off \n        # 全局\n        mv composer.phar /usr/local/bin/composer \n        # 权限\n        chmod a+x /usr/local/bin/composer\n        # 更新\n        composer self-update\n      ```\n### 安装\n1. #### Composer 安装\n     安装composer-asset-plugin插件\n      ```bash\n      # 切换国内镜像(http://pkg.phpcomposer.com/)\n      composer config -g repo.packagist composer https://packagist.phpcomposer.com\n      \n      composer global require \"fxp/composer-asset-plugin:^1.2.0\"\n      ```\n      安装基础版\n      ```bash\n      composer create-project yiisoft/yii2-app-basic xxx\n      ```\n      安装高级版\n      ```bash\n      composer create-project yiisoft/yii2-app-advanced xxx\n      ```\n2. #### 下载安装\n      [基础班](https://github.com/yiisoft/yii2/releases/download/2.0.10/yii-basic-app-2.0.10.tgz)\n      [高级版](https://github.com/yiisoft/yii2/releases/download/2.0.10/yii-advanced-app-2.0.10.tgz)\n\n## Tips\n  ```bash\n  The zip extension and unzip command are both missing, skipping.\n  ```\n  解决方案\n  ```bash\n  apt-get install php7.0-zip\n  ```\n  ---\n  ```bash\n  codeception/base 2.2.3 requires phpunit/phpunit >4.8.20 <5.5 -> satisfiable by phpunit/phpunit\n  phpunit/phpunit 5.6.2 requires ext-dom * -> the requested PHP extension dom is missing from your system.\n  ```\n  解决方案\n  ```bash\n  apt-get install php7.0-xml\n  ```","slug":"Create-Yii2-Project","published":1,"updated":"2017-02-12T15:52:39.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciz9wvzf70000g38kivdwpe7i","content":"<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><h3 id=\"Yii\"><a href=\"#Yii\" class=\"headerlink\" title=\"Yii\"></a>Yii</h3><p>  <a href=\"http://www.yiiframework.com/\" target=\"_blank\" rel=\"external\">Yii</a> 是一个高性能的，适用于开发 WEB2.0 应用的 PHP 框架。<br>  Yii 自带了丰富的功能 ，包括 MVC，DAO/ActiveRecord，I18N/L10N，缓存，身份验证和基于角色的访问控制，脚手架，测试等，可显著缩短开发时间。</p>\n<h2 id=\"创建\"><a href=\"#创建\" class=\"headerlink\" title=\"创建\"></a>创建</h2><h3 id=\"前期准备\"><a href=\"#前期准备\" class=\"headerlink\" title=\"前期准备\"></a>前期准备</h3><ul>\n<li><a href=\"/2016-09-30/Install-Nginx-PHP7-MySQL-on-Ubuntu16-04.html\">PHP运行环境</a></li>\n<li><p>Composer 环境</p>\n<ul>\n<li><p>Mac OS X</p>\n<pre><code><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">brew install composer</div></pre></td></tr></table></figure>\n</code></pre></li>\n<li><p>Ubuntu</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\"># 下载</span></div><div class=\"line\">curl <span class=\"_\">-s</span>S https://getcomposer.org/installer | php <span class=\"_\">-d</span> detect_unicode=Off </div><div class=\"line\"><span class=\"comment\"># 全局</span></div><div class=\"line\">mv composer.phar /usr/<span class=\"built_in\">local</span>/bin/composer </div><div class=\"line\"><span class=\"comment\"># 权限</span></div><div class=\"line\">chmod a+x /usr/<span class=\"built_in\">local</span>/bin/composer</div><div class=\"line\"><span class=\"comment\"># 更新</span></div><div class=\"line\">composer self-update</div></pre></td></tr></table></figure>\n</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h3><ol>\n<li><h4 id=\"Composer-安装\"><a href=\"#Composer-安装\" class=\"headerlink\" title=\"Composer 安装\"></a>Composer 安装</h4><p>  安装composer-asset-plugin插件</p>\n   <figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\"># 切换国内镜像(http://pkg.phpcomposer.com/)</span></div><div class=\"line\">composer config -g repo.packagist composer https://packagist.phpcomposer.com</div><div class=\"line\"></div><div class=\"line\">composer global require <span class=\"string\">\"fxp/composer-asset-plugin:^1.2.0\"</span></div></pre></td></tr></table></figure>\n<p>   安装基础版</p>\n   <figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">composer create-project yiisoft/yii2-app-basic xxx</div></pre></td></tr></table></figure>\n<p>   安装高级版</p>\n   <figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">composer create-project yiisoft/yii2-app-advanced xxx</div></pre></td></tr></table></figure>\n</li>\n<li><h4 id=\"下载安装\"><a href=\"#下载安装\" class=\"headerlink\" title=\"下载安装\"></a>下载安装</h4><p>   <a href=\"https://github.com/yiisoft/yii2/releases/download/2.0.10/yii-basic-app-2.0.10.tgz\" target=\"_blank\" rel=\"external\">基础班</a><br>   <a href=\"https://github.com/yiisoft/yii2/releases/download/2.0.10/yii-advanced-app-2.0.10.tgz\" target=\"_blank\" rel=\"external\">高级版</a></p>\n</li>\n</ol>\n<h2 id=\"Tips\"><a href=\"#Tips\" class=\"headerlink\" title=\"Tips\"></a>Tips</h2>  <figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">The zip extension and unzip <span class=\"built_in\">command</span> are both missing, skipping.</div></pre></td></tr></table></figure>\n<p>  解决方案<br>  <figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">apt-get install php7.0-zip</div></pre></td></tr></table></figure></p>\n<hr>\n  <figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">codeception/base 2.2.3 requires phpunit/phpunit &gt;4.8.20 &lt;5.5 -&gt; satisfiable by phpunit/phpunit</div><div class=\"line\">phpunit/phpunit 5.6.2 requires ext-dom * -&gt; the requested PHP extension dom is missing from your system.</div></pre></td></tr></table></figure>\n<p>  解决方案<br>  <figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">apt-get install php7.0-xml</div></pre></td></tr></table></figure></p>\n","excerpt":"","more":"<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><h3 id=\"Yii\"><a href=\"#Yii\" class=\"headerlink\" title=\"Yii\"></a>Yii</h3><p>  <a href=\"http://www.yiiframework.com/\">Yii</a> 是一个高性能的，适用于开发 WEB2.0 应用的 PHP 框架。<br>  Yii 自带了丰富的功能 ，包括 MVC，DAO/ActiveRecord，I18N/L10N，缓存，身份验证和基于角色的访问控制，脚手架，测试等，可显著缩短开发时间。</p>\n<h2 id=\"创建\"><a href=\"#创建\" class=\"headerlink\" title=\"创建\"></a>创建</h2><h3 id=\"前期准备\"><a href=\"#前期准备\" class=\"headerlink\" title=\"前期准备\"></a>前期准备</h3><ul>\n<li><a href=\"/2016-09-30/Install-Nginx-PHP7-MySQL-on-Ubuntu16-04.html\">PHP运行环境</a></li>\n<li><p>Composer 环境</p>\n<ul>\n<li><p>Mac OS X</p>\n<pre><code><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">brew install composer</div></pre></td></tr></table></figure>\n</code></pre></li>\n<li><p>Ubuntu</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\"># 下载</span></div><div class=\"line\">curl <span class=\"_\">-s</span>S https://getcomposer.org/installer | php <span class=\"_\">-d</span> detect_unicode=Off </div><div class=\"line\"><span class=\"comment\"># 全局</span></div><div class=\"line\">mv composer.phar /usr/<span class=\"built_in\">local</span>/bin/composer </div><div class=\"line\"><span class=\"comment\"># 权限</span></div><div class=\"line\">chmod a+x /usr/<span class=\"built_in\">local</span>/bin/composer</div><div class=\"line\"><span class=\"comment\"># 更新</span></div><div class=\"line\">composer self-update</div></pre></td></tr></table></figure>\n</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h3><ol>\n<li><h4 id=\"Composer-安装\"><a href=\"#Composer-安装\" class=\"headerlink\" title=\"Composer 安装\"></a>Composer 安装</h4><p>  安装composer-asset-plugin插件</p>\n   <figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\"># 切换国内镜像(http://pkg.phpcomposer.com/)</span></div><div class=\"line\">composer config -g repo.packagist composer https://packagist.phpcomposer.com</div><div class=\"line\"></div><div class=\"line\">composer global require <span class=\"string\">\"fxp/composer-asset-plugin:^1.2.0\"</span></div></pre></td></tr></table></figure>\n<p>   安装基础版</p>\n   <figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">composer create-project yiisoft/yii2-app-basic xxx</div></pre></td></tr></table></figure>\n<p>   安装高级版</p>\n   <figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">composer create-project yiisoft/yii2-app-advanced xxx</div></pre></td></tr></table></figure>\n</li>\n<li><h4 id=\"下载安装\"><a href=\"#下载安装\" class=\"headerlink\" title=\"下载安装\"></a>下载安装</h4><p>   <a href=\"https://github.com/yiisoft/yii2/releases/download/2.0.10/yii-basic-app-2.0.10.tgz\">基础班</a><br>   <a href=\"https://github.com/yiisoft/yii2/releases/download/2.0.10/yii-advanced-app-2.0.10.tgz\">高级版</a></p>\n</li>\n</ol>\n<h2 id=\"Tips\"><a href=\"#Tips\" class=\"headerlink\" title=\"Tips\"></a>Tips</h2>  <figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">The zip extension and unzip <span class=\"built_in\">command</span> are both missing, skipping.</div></pre></td></tr></table></figure>\n<p>  解决方案<br>  <figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">apt-get install php7.0-zip</div></pre></td></tr></table></figure></p>\n<hr>\n  <figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">codeception/base 2.2.3 requires phpunit/phpunit &gt;4.8.20 &lt;5.5 -&gt; satisfiable by phpunit/phpunit</div><div class=\"line\">phpunit/phpunit 5.6.2 requires ext-dom * -&gt; the requested PHP extension dom is missing from your system.</div></pre></td></tr></table></figure>\n<p>  解决方案<br>  <figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">apt-get install php7.0-xml</div></pre></td></tr></table></figure></p>\n"},{"title":"Ubuntu 上安装使用 DynamoDB","date":"2016-11-16T02:28:46.000Z","description":"记录在Ubuntu 上安装 DynamoDB","_content":"\n## 安装\n1. #### Java SDK\n   ```bash\n    aptitude install openjdk-8-jdk\n   ```\n\n2. ####   安装解压软件\n   ```bash    \n    # 安装解压软件\n    aptitude install unzip\n   ```\n\n3. #### 下载安装 DynamoDB\n   ```bash\n    # 下载压缩包\n    wget http://dynamodb-local.s3-website-us-west-2.amazonaws.com/dynamodb_local_latest.zip \n    \n    # 解压\n    unzip ./dynamodb_local_latest.zip \n    \n    # 启动\n    java -Djava.library.path=./DynamoDBLocal_lib -jar DynamoDBLocal.jar -sharedDb\n    \n    # 查看帮助\n    java -Djava.library.path=./DynamoDBLocal_lib -jar DynamoDBLocal.jar -help\n   ```\n\n4. #### javascript shell\n   [http://127.0.0.1:8000/shell/](http://127.0.0.1:8000/shell/)\n","source":"_posts/DynamoDB-Ubuntu.md","raw":"---\ntitle: Ubuntu 上安装使用 DynamoDB\ndate: 2016-11-16 10:28:46\ntags:\n  - DynamoDB\n  - Software\ncategories:\n  -  Software\ndescription: 记录在Ubuntu 上安装 DynamoDB\n---\n\n## 安装\n1. #### Java SDK\n   ```bash\n    aptitude install openjdk-8-jdk\n   ```\n\n2. ####   安装解压软件\n   ```bash    \n    # 安装解压软件\n    aptitude install unzip\n   ```\n\n3. #### 下载安装 DynamoDB\n   ```bash\n    # 下载压缩包\n    wget http://dynamodb-local.s3-website-us-west-2.amazonaws.com/dynamodb_local_latest.zip \n    \n    # 解压\n    unzip ./dynamodb_local_latest.zip \n    \n    # 启动\n    java -Djava.library.path=./DynamoDBLocal_lib -jar DynamoDBLocal.jar -sharedDb\n    \n    # 查看帮助\n    java -Djava.library.path=./DynamoDBLocal_lib -jar DynamoDBLocal.jar -help\n   ```\n\n4. #### javascript shell\n   [http://127.0.0.1:8000/shell/](http://127.0.0.1:8000/shell/)\n","slug":"DynamoDB-Ubuntu","published":1,"updated":"2017-02-12T15:52:39.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciz9wvzfe0002g38kim7vnszd","content":"<h2 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h2><ol>\n<li><h4 id=\"Java-SDK\"><a href=\"#Java-SDK\" class=\"headerlink\" title=\"Java SDK\"></a>Java SDK</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">aptitude install openjdk-8-jdk</div></pre></td></tr></table></figure>\n</li>\n<li><h4 id=\"安装解压软件\"><a href=\"#安装解压软件\" class=\"headerlink\" title=\"安装解压软件\"></a>安装解压软件</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\"># 安装解压软件</span></div><div class=\"line\">aptitude install unzip</div></pre></td></tr></table></figure>\n</li>\n<li><h4 id=\"下载安装-DynamoDB\"><a href=\"#下载安装-DynamoDB\" class=\"headerlink\" title=\"下载安装 DynamoDB\"></a>下载安装 DynamoDB</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\"># 下载压缩包</span></div><div class=\"line\">wget http://dynamodb-local.s3-website-us-west-2.amazonaws.com/dynamodb_local_latest.zip </div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># 解压</span></div><div class=\"line\">unzip ./dynamodb_local_latest.zip </div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># 启动</span></div><div class=\"line\">java -Djava.library.path=./DynamoDBLocal_lib -jar DynamoDBLocal.jar -sharedDb</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># 查看帮助</span></div><div class=\"line\">java -Djava.library.path=./DynamoDBLocal_lib -jar DynamoDBLocal.jar -help</div></pre></td></tr></table></figure>\n</li>\n<li><h4 id=\"javascript-shell\"><a href=\"#javascript-shell\" class=\"headerlink\" title=\"javascript shell\"></a>javascript shell</h4><p><a href=\"http://127.0.0.1:8000/shell/\" target=\"_blank\" rel=\"external\">http://127.0.0.1:8000/shell/</a></p>\n</li>\n</ol>\n","excerpt":"","more":"<h2 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h2><ol>\n<li><h4 id=\"Java-SDK\"><a href=\"#Java-SDK\" class=\"headerlink\" title=\"Java SDK\"></a>Java SDK</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">aptitude install openjdk-8-jdk</div></pre></td></tr></table></figure>\n</li>\n<li><h4 id=\"安装解压软件\"><a href=\"#安装解压软件\" class=\"headerlink\" title=\"安装解压软件\"></a>安装解压软件</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\"># 安装解压软件</span></div><div class=\"line\">aptitude install unzip</div></pre></td></tr></table></figure>\n</li>\n<li><h4 id=\"下载安装-DynamoDB\"><a href=\"#下载安装-DynamoDB\" class=\"headerlink\" title=\"下载安装 DynamoDB\"></a>下载安装 DynamoDB</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\"># 下载压缩包</span></div><div class=\"line\">wget http://dynamodb-local.s3-website-us-west-2.amazonaws.com/dynamodb_local_latest.zip </div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># 解压</span></div><div class=\"line\">unzip ./dynamodb_local_latest.zip </div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># 启动</span></div><div class=\"line\">java -Djava.library.path=./DynamoDBLocal_lib -jar DynamoDBLocal.jar -sharedDb</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># 查看帮助</span></div><div class=\"line\">java -Djava.library.path=./DynamoDBLocal_lib -jar DynamoDBLocal.jar -help</div></pre></td></tr></table></figure>\n</li>\n<li><h4 id=\"javascript-shell\"><a href=\"#javascript-shell\" class=\"headerlink\" title=\"javascript shell\"></a>javascript shell</h4><p><a href=\"http://127.0.0.1:8000/shell/\">http://127.0.0.1:8000/shell/</a></p>\n</li>\n</ol>\n"},{"title":"Ubuntu16.04 安装Nginx、PHP7、MySQL5.7","date":"2016-09-30T04:04:51.000Z","description":"如何在Ubuntu16.04上采用PPA的形式安装Nginx、PHP7、MySQL5.7","_content":"\n## 前置工作\n安装前先添加相应的 [PPA](/2016-09-30/Software-PPA-Sources.html \"常用的软件 PPA 源\") 源。\n## 安装\n### Nginx\n```bash\naptitude install nginx -y\n```\n### MySQL\n```bash\naptitude install mysql-server-5.7 -y\n```\n### PHP7.0\n```bash\naptitude install php7.0 php7.0-mysql php7.0-mcrypt php7.0-mbstring php7.0-fpm php7.0-cli php7.0-xml php7.0-zip -y\naptitude install composer\n```\n\n## 配置\n### PHP\n```bash\n### vim /etc/php/7.0/fpm/pool.d/www.conf\n### 修改 Unix socket To TCP socket\nlisten = 127.0.0.1:9000\n```\n### Nginx\n```bash\n### vim /etc/nginx/sites-available/default\n\nroot /var/www/html;\n# Add index.php to the list if you are using PHP\nindex index.php index.html index.htm;\nserver_name _;\nlocation ~ \\.php$ {\n        include snippets/fastcgi-php.conf;\n        # With php7.0-cgi alone:\n        fastcgi_pass 127.0.0.1:9000;\n        # With php7.0-fpm:\n        # fastcgi_pass unix:/var/run/php7.0-fpm.sock;\n}\n```\n\n## 其他\n### 相关命令\n```bash\nservice php7.0-fpm {start|stop|status|restart|reload|force-reload}\nservice mysql {start|stop|restart|reload|force-reload|status}\nservice nginx {start|stop|restart|reload|force-reload|status|configtest}\n```","source":"_posts/Install-Nginx-PHP7-MySQL-on-Ubuntu16-04.md","raw":"---\ntitle: Ubuntu16.04 安装Nginx、PHP7、MySQL5.7\ndate: 2016-09-30 12:04:51\ntags:\n  - Server\n  - Ubuntu\n  -  Nginx\ncategories:\n  - Server\ndescription:  如何在Ubuntu16.04上采用PPA的形式安装Nginx、PHP7、MySQL5.7\n---\n\n## 前置工作\n安装前先添加相应的 [PPA](/2016-09-30/Software-PPA-Sources.html \"常用的软件 PPA 源\") 源。\n## 安装\n### Nginx\n```bash\naptitude install nginx -y\n```\n### MySQL\n```bash\naptitude install mysql-server-5.7 -y\n```\n### PHP7.0\n```bash\naptitude install php7.0 php7.0-mysql php7.0-mcrypt php7.0-mbstring php7.0-fpm php7.0-cli php7.0-xml php7.0-zip -y\naptitude install composer\n```\n\n## 配置\n### PHP\n```bash\n### vim /etc/php/7.0/fpm/pool.d/www.conf\n### 修改 Unix socket To TCP socket\nlisten = 127.0.0.1:9000\n```\n### Nginx\n```bash\n### vim /etc/nginx/sites-available/default\n\nroot /var/www/html;\n# Add index.php to the list if you are using PHP\nindex index.php index.html index.htm;\nserver_name _;\nlocation ~ \\.php$ {\n        include snippets/fastcgi-php.conf;\n        # With php7.0-cgi alone:\n        fastcgi_pass 127.0.0.1:9000;\n        # With php7.0-fpm:\n        # fastcgi_pass unix:/var/run/php7.0-fpm.sock;\n}\n```\n\n## 其他\n### 相关命令\n```bash\nservice php7.0-fpm {start|stop|status|restart|reload|force-reload}\nservice mysql {start|stop|restart|reload|force-reload|status}\nservice nginx {start|stop|restart|reload|force-reload|status|configtest}\n```","slug":"Install-Nginx-PHP7-MySQL-on-Ubuntu16-04","published":1,"updated":"2017-02-12T15:52:39.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciz9wvzfj0005g38koirscdwp","content":"<h2 id=\"前置工作\"><a href=\"#前置工作\" class=\"headerlink\" title=\"前置工作\"></a>前置工作</h2><p>安装前先添加相应的 <a href=\"/2016-09-30/Software-PPA-Sources.html\" title=\"常用的软件 PPA 源\">PPA</a> 源。</p>\n<h2 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h2><h3 id=\"Nginx\"><a href=\"#Nginx\" class=\"headerlink\" title=\"Nginx\"></a>Nginx</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">aptitude install nginx -y</div></pre></td></tr></table></figure>\n<h3 id=\"MySQL\"><a href=\"#MySQL\" class=\"headerlink\" title=\"MySQL\"></a>MySQL</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">aptitude install mysql-server-5.7 -y</div></pre></td></tr></table></figure>\n<h3 id=\"PHP7-0\"><a href=\"#PHP7-0\" class=\"headerlink\" title=\"PHP7.0\"></a>PHP7.0</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">aptitude install php7.0 php7.0-mysql php7.0-mcrypt php7.0-mbstring php7.0-fpm php7.0-cli php7.0-xml php7.0-zip -y</div><div class=\"line\">aptitude install composer</div></pre></td></tr></table></figure>\n<h2 id=\"配置\"><a href=\"#配置\" class=\"headerlink\" title=\"配置\"></a>配置</h2><h3 id=\"PHP\"><a href=\"#PHP\" class=\"headerlink\" title=\"PHP\"></a>PHP</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">### vim /etc/php/7.0/fpm/pool.d/www.conf</span></div><div class=\"line\"><span class=\"comment\">### 修改 Unix socket To TCP socket</span></div><div class=\"line\">listen = 127.0.0.1:9000</div></pre></td></tr></table></figure>\n<h3 id=\"Nginx-1\"><a href=\"#Nginx-1\" class=\"headerlink\" title=\"Nginx\"></a>Nginx</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">### vim /etc/nginx/sites-available/default</span></div><div class=\"line\"></div><div class=\"line\">root /var/www/html;</div><div class=\"line\"><span class=\"comment\"># Add index.php to the list if you are using PHP</span></div><div class=\"line\">index index.php index.html index.htm;</div><div class=\"line\">server_name _;</div><div class=\"line\">location ~ \\.php$ &#123;</div><div class=\"line\">        include snippets/fastcgi-php.conf;</div><div class=\"line\">        <span class=\"comment\"># With php7.0-cgi alone:</span></div><div class=\"line\">        fastcgi_pass 127.0.0.1:9000;</div><div class=\"line\">        <span class=\"comment\"># With php7.0-fpm:</span></div><div class=\"line\">        <span class=\"comment\"># fastcgi_pass unix:/var/run/php7.0-fpm.sock;</span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h2 id=\"其他\"><a href=\"#其他\" class=\"headerlink\" title=\"其他\"></a>其他</h2><h3 id=\"相关命令\"><a href=\"#相关命令\" class=\"headerlink\" title=\"相关命令\"></a>相关命令</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">service php7.0-fpm &#123;start|stop|status|restart|reload|force-reload&#125;</div><div class=\"line\">service mysql &#123;start|stop|restart|reload|force-reload|status&#125;</div><div class=\"line\">service nginx &#123;start|stop|restart|reload|force-reload|status|configtest&#125;</div></pre></td></tr></table></figure>","excerpt":"","more":"<h2 id=\"前置工作\"><a href=\"#前置工作\" class=\"headerlink\" title=\"前置工作\"></a>前置工作</h2><p>安装前先添加相应的 <a href=\"/2016-09-30/Software-PPA-Sources.html\" title=\"常用的软件 PPA 源\">PPA</a> 源。</p>\n<h2 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h2><h3 id=\"Nginx\"><a href=\"#Nginx\" class=\"headerlink\" title=\"Nginx\"></a>Nginx</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">aptitude install nginx -y</div></pre></td></tr></table></figure>\n<h3 id=\"MySQL\"><a href=\"#MySQL\" class=\"headerlink\" title=\"MySQL\"></a>MySQL</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">aptitude install mysql-server-5.7 -y</div></pre></td></tr></table></figure>\n<h3 id=\"PHP7-0\"><a href=\"#PHP7-0\" class=\"headerlink\" title=\"PHP7.0\"></a>PHP7.0</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">aptitude install php7.0 php7.0-mysql php7.0-mcrypt php7.0-mbstring php7.0-fpm php7.0-cli php7.0-xml php7.0-zip -y</div><div class=\"line\">aptitude install composer</div></pre></td></tr></table></figure>\n<h2 id=\"配置\"><a href=\"#配置\" class=\"headerlink\" title=\"配置\"></a>配置</h2><h3 id=\"PHP\"><a href=\"#PHP\" class=\"headerlink\" title=\"PHP\"></a>PHP</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">### vim /etc/php/7.0/fpm/pool.d/www.conf</span></div><div class=\"line\"><span class=\"comment\">### 修改 Unix socket To TCP socket</span></div><div class=\"line\">listen = 127.0.0.1:9000</div></pre></td></tr></table></figure>\n<h3 id=\"Nginx-1\"><a href=\"#Nginx-1\" class=\"headerlink\" title=\"Nginx\"></a>Nginx</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">### vim /etc/nginx/sites-available/default</span></div><div class=\"line\"></div><div class=\"line\">root /var/www/html;</div><div class=\"line\"><span class=\"comment\"># Add index.php to the list if you are using PHP</span></div><div class=\"line\">index index.php index.html index.htm;</div><div class=\"line\">server_name _;</div><div class=\"line\">location ~ \\.php$ &#123;</div><div class=\"line\">        include snippets/fastcgi-php.conf;</div><div class=\"line\">        <span class=\"comment\"># With php7.0-cgi alone:</span></div><div class=\"line\">        fastcgi_pass 127.0.0.1:9000;</div><div class=\"line\">        <span class=\"comment\"># With php7.0-fpm:</span></div><div class=\"line\">        <span class=\"comment\"># fastcgi_pass unix:/var/run/php7.0-fpm.sock;</span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h2 id=\"其他\"><a href=\"#其他\" class=\"headerlink\" title=\"其他\"></a>其他</h2><h3 id=\"相关命令\"><a href=\"#相关命令\" class=\"headerlink\" title=\"相关命令\"></a>相关命令</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">service php7.0-fpm &#123;start|stop|status|restart|reload|force-reload&#125;</div><div class=\"line\">service mysql &#123;start|stop|restart|reload|force-reload|status&#125;</div><div class=\"line\">service nginx &#123;start|stop|restart|reload|force-reload|status|configtest&#125;</div></pre></td></tr></table></figure>"},{"title":"采用Let's Encrypt 证书在Nginx上实现 HTTPS","date":"2016-10-11T03:09:50.000Z","description":"简单介绍怎么采用Let's Encrypt 推荐的工具Certbot在Nginx上实现Https","_content":"## 前言\n\n### 什么是HTTPS\n  HTTPS（全称：Hyper Text Transfer Protocol over Secure Socket Layer），是以安全为目标的HTTP通道，简单讲是HTTP的安全版。即HTTP下加入SSL层，HTTPS的安全基础是SSL，因此加密的详细内容就需要SSL。\n  \n### 为什么使用HTTPS\n  我们大致也明白了HTTPS其实就是一个经过加密后的HTTP，具有更高的安全性。\n  \n### 证书选择\n目前市面上比较成熟的HTTPS 证书提供商：\n- 做证书起家的[VeriSign](http://www.verisign.com/ \"VeriSign\")\n- 老牌的 [StartSSL](https://www.startssl.com/ \"StartSSL\")\n- 新星 [Let’s Encrypt](https://letsencrypt.org/ \"Let’s Encrypt\")\n- 国内的 [沃通](https://www.wosign.com/ \"沃通\")\n- ......\n \n本文将使用Let's Encrypt证书，因为它免费、快速、可自动化续签......\n\n## 实践\n### 需要工具\n   - Ubuntu16.04的服务器 \n   - 域名\n \n### 安装\n  根据Let’s Encrypt上官方推荐我们将采用自动化工具[Certbot](https://certbot.eff.org/ 'Certbot')，并安装推荐教程直接操作。\n\n1.  安装Certbot   \n```bash\nsudo apt-get install letsencrypt\n```\n2. 申请证书\n```bash\nletsencrypt certonly --agree-tos --email xx@xx.com --webroot -w /var/www/example -d example.com -d www.example.com -w /var/www/thing -d thing.is -d m.thing.is\n# --email 后面替换成自己的Email用来接受通知\n# -d 填写需要Https访问的域名，可多个\n```\n  命令运行完以后会在`/etc/letsencrypt/live/example.com/`目录下生成一下文件\n  - cert.pem  服务器证书文件\n  - chain.pem\n  - fullchain.pem =  cert.pem + chain.pem  `Nginx配置文件中的 ssl_certificate`\n  - privkey.pem `Nginx 配置文件中的 ssl_certificate_key`\n3. 配置Nginx\n  ```bash\n  vim /etc/nginx/sites-available/default\n  ```\n  ```bash\nserver {\n    listen 80;\n    # listen [::]:80;\n    server_name example.com;\n\n    # Redirect all HTTP requests to HTTPS with a 301 Moved Permanently response.\n    return 301 https://$host$request_uri;\n}\n\nserver {\n    # SSL configuration\n    #\n    listen 443 ssl default_server;\n    listen [::]:443 ssl default_server;\n    server_name example.com;\n\n    location / {\n        root   /var/www/html;\n        index  index.html index.htm;\n    }\n    #error_page  404              /404.html;\n\n    # redirect server error pages to the static page /50x.html\n    #\n    error_page   500 502 503 504  /50x.html;\n    location = /50x.html {\n        root   /usr/share/nginx/html;\n    }\n\n    # certs sent to the client in SERVER HELLO are concatenated in ssl_certificate\n    ssl_certificate /etc/letsencrypt/live/example.com/fullchain.pem;\n    ssl_certificate_key /etc/letsencrypt/live/example.com/privkey.pem;\n    ssl_session_timeout 1d;\n    ssl_session_cache shared:SSL:50m;\n    ssl_session_tickets off;\n\n    # Diffie-Hellman parameter for DHE ciphersuites, recommended 2048 bits\n    # ssl_dhparam /etc/ssl/certs/dhparam.pem;\n\n    # intermediate configuration. tweak to your needs.\n    ssl_protocols TLSv1 TLSv1.1 TLSv1.2;\n    ssl_ciphers 'ECDHE-ECDSA-CHACHA20-POLY1305:ECDHE-RSA-CHACHA20-POLY1305:ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384:DHE-RSA-AES128-GCM-SHA256:DHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-AES128-SHA256:ECDHE-RSA-AES128-SHA256:ECDHE-ECDSA-AES128-SHA:ECDHE-RSA-AES256-SHA384:ECDHE-RSA-AES128-SHA:ECDHE-ECDSA-AES256-SHA384:ECDHE-ECDSA-AES256-SHA:ECDHE-RSA-AES256-SHA:DHE-RSA-AES128-SHA256:DHE-RSA-AES128-SHA:DHE-RSA-AES256-SHA256:DHE-RSA-AES256-SHA:ECDHE-ECDSA-DES-CBC3-SHA:ECDHE-RSA-DES-CBC3-SHA:EDH-RSA-DES-CBC3-SHA:AES128-GCM-SHA256:AES256-GCM-SHA384:AES128-SHA256:AES256-SHA256:AES128-SHA:AES256-SHA:DES-CBC3-SHA:!DSS';\n    ssl_prefer_server_ciphers on;\n\n    # HSTS (ngx_http_headers_module is required) (15768000 seconds = 6 months)\n    add_header Strict-Transport-Security max-age=15768000;\n\n    # OCSP Stapling ---\n    # fetch OCSP records from URL in ssl_certificate and cache them\n    ssl_stapling on;\n    ssl_stapling_verify on;\n\n    ## verify chain of trust of OCSP response using Root CA and Intermediate certs\n    # ssl_trusted_certificate /etc/letsencrypt/live/walfud.com/root_ca_cert_plus_intermediates;\n\n    # resolver 8.8.8.8 8.8.4.4 valid=300s;\n    # resolver_timeout 5s;\n    # pass the PHP scripts to FastCGI server listening on 127.0.0.1:9000\n    #\n    location ~ \\.php$ {\n        include snippets/fastcgi-php.conf;\n        # With php7.0-cgi alone:  \n        fastcgi_pass 127.0.0.1:9000;\n        # With php7.0-fpm:\n        # fastcgi_pass unix:/var/run/php7.0-fpm.sock;\n    }\n}\n```\n4. 重启Nginx\n  ```bash\n  service nginx reload\n  ```\n5. 自动续签\n    Let’s Encrypt 证书的有效期是 90 天，为了保证证书的有效性，我们需要及时的去续签(renew) 证书。这里我们采用`cron`来进行定期的续签。`letsencrypt renew`只会在证书过期的时候才会刷新证书，如果证书没有过期将不会执行任何命令。\n  ```bash\n  crontab -e \n  ```\n  ```bash\n  # 每天夜里凌晨 0 点续签:\n  * 0 * * * letsencrypt renew\n\n  # 重启 nginx 以使证书生效\n  * 1 * * * service nginx reload\n  ```\n\n\n","source":"_posts/Https-Nginx.md","raw":"---\ntitle:   采用Let's Encrypt 证书在Nginx上实现 HTTPS\ndate: 2016-10-11 11:09:50\ntags:\n  - Ubuntu\n  - HTTPS\n  - Nginx\n  - Server\ncategories:\n  - Server\ndescription:  简单介绍怎么采用Let's Encrypt 推荐的工具Certbot在Nginx上实现Https\n---\n## 前言\n\n### 什么是HTTPS\n  HTTPS（全称：Hyper Text Transfer Protocol over Secure Socket Layer），是以安全为目标的HTTP通道，简单讲是HTTP的安全版。即HTTP下加入SSL层，HTTPS的安全基础是SSL，因此加密的详细内容就需要SSL。\n  \n### 为什么使用HTTPS\n  我们大致也明白了HTTPS其实就是一个经过加密后的HTTP，具有更高的安全性。\n  \n### 证书选择\n目前市面上比较成熟的HTTPS 证书提供商：\n- 做证书起家的[VeriSign](http://www.verisign.com/ \"VeriSign\")\n- 老牌的 [StartSSL](https://www.startssl.com/ \"StartSSL\")\n- 新星 [Let’s Encrypt](https://letsencrypt.org/ \"Let’s Encrypt\")\n- 国内的 [沃通](https://www.wosign.com/ \"沃通\")\n- ......\n \n本文将使用Let's Encrypt证书，因为它免费、快速、可自动化续签......\n\n## 实践\n### 需要工具\n   - Ubuntu16.04的服务器 \n   - 域名\n \n### 安装\n  根据Let’s Encrypt上官方推荐我们将采用自动化工具[Certbot](https://certbot.eff.org/ 'Certbot')，并安装推荐教程直接操作。\n\n1.  安装Certbot   \n```bash\nsudo apt-get install letsencrypt\n```\n2. 申请证书\n```bash\nletsencrypt certonly --agree-tos --email xx@xx.com --webroot -w /var/www/example -d example.com -d www.example.com -w /var/www/thing -d thing.is -d m.thing.is\n# --email 后面替换成自己的Email用来接受通知\n# -d 填写需要Https访问的域名，可多个\n```\n  命令运行完以后会在`/etc/letsencrypt/live/example.com/`目录下生成一下文件\n  - cert.pem  服务器证书文件\n  - chain.pem\n  - fullchain.pem =  cert.pem + chain.pem  `Nginx配置文件中的 ssl_certificate`\n  - privkey.pem `Nginx 配置文件中的 ssl_certificate_key`\n3. 配置Nginx\n  ```bash\n  vim /etc/nginx/sites-available/default\n  ```\n  ```bash\nserver {\n    listen 80;\n    # listen [::]:80;\n    server_name example.com;\n\n    # Redirect all HTTP requests to HTTPS with a 301 Moved Permanently response.\n    return 301 https://$host$request_uri;\n}\n\nserver {\n    # SSL configuration\n    #\n    listen 443 ssl default_server;\n    listen [::]:443 ssl default_server;\n    server_name example.com;\n\n    location / {\n        root   /var/www/html;\n        index  index.html index.htm;\n    }\n    #error_page  404              /404.html;\n\n    # redirect server error pages to the static page /50x.html\n    #\n    error_page   500 502 503 504  /50x.html;\n    location = /50x.html {\n        root   /usr/share/nginx/html;\n    }\n\n    # certs sent to the client in SERVER HELLO are concatenated in ssl_certificate\n    ssl_certificate /etc/letsencrypt/live/example.com/fullchain.pem;\n    ssl_certificate_key /etc/letsencrypt/live/example.com/privkey.pem;\n    ssl_session_timeout 1d;\n    ssl_session_cache shared:SSL:50m;\n    ssl_session_tickets off;\n\n    # Diffie-Hellman parameter for DHE ciphersuites, recommended 2048 bits\n    # ssl_dhparam /etc/ssl/certs/dhparam.pem;\n\n    # intermediate configuration. tweak to your needs.\n    ssl_protocols TLSv1 TLSv1.1 TLSv1.2;\n    ssl_ciphers 'ECDHE-ECDSA-CHACHA20-POLY1305:ECDHE-RSA-CHACHA20-POLY1305:ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384:DHE-RSA-AES128-GCM-SHA256:DHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-AES128-SHA256:ECDHE-RSA-AES128-SHA256:ECDHE-ECDSA-AES128-SHA:ECDHE-RSA-AES256-SHA384:ECDHE-RSA-AES128-SHA:ECDHE-ECDSA-AES256-SHA384:ECDHE-ECDSA-AES256-SHA:ECDHE-RSA-AES256-SHA:DHE-RSA-AES128-SHA256:DHE-RSA-AES128-SHA:DHE-RSA-AES256-SHA256:DHE-RSA-AES256-SHA:ECDHE-ECDSA-DES-CBC3-SHA:ECDHE-RSA-DES-CBC3-SHA:EDH-RSA-DES-CBC3-SHA:AES128-GCM-SHA256:AES256-GCM-SHA384:AES128-SHA256:AES256-SHA256:AES128-SHA:AES256-SHA:DES-CBC3-SHA:!DSS';\n    ssl_prefer_server_ciphers on;\n\n    # HSTS (ngx_http_headers_module is required) (15768000 seconds = 6 months)\n    add_header Strict-Transport-Security max-age=15768000;\n\n    # OCSP Stapling ---\n    # fetch OCSP records from URL in ssl_certificate and cache them\n    ssl_stapling on;\n    ssl_stapling_verify on;\n\n    ## verify chain of trust of OCSP response using Root CA and Intermediate certs\n    # ssl_trusted_certificate /etc/letsencrypt/live/walfud.com/root_ca_cert_plus_intermediates;\n\n    # resolver 8.8.8.8 8.8.4.4 valid=300s;\n    # resolver_timeout 5s;\n    # pass the PHP scripts to FastCGI server listening on 127.0.0.1:9000\n    #\n    location ~ \\.php$ {\n        include snippets/fastcgi-php.conf;\n        # With php7.0-cgi alone:  \n        fastcgi_pass 127.0.0.1:9000;\n        # With php7.0-fpm:\n        # fastcgi_pass unix:/var/run/php7.0-fpm.sock;\n    }\n}\n```\n4. 重启Nginx\n  ```bash\n  service nginx reload\n  ```\n5. 自动续签\n    Let’s Encrypt 证书的有效期是 90 天，为了保证证书的有效性，我们需要及时的去续签(renew) 证书。这里我们采用`cron`来进行定期的续签。`letsencrypt renew`只会在证书过期的时候才会刷新证书，如果证书没有过期将不会执行任何命令。\n  ```bash\n  crontab -e \n  ```\n  ```bash\n  # 每天夜里凌晨 0 点续签:\n  * 0 * * * letsencrypt renew\n\n  # 重启 nginx 以使证书生效\n  * 1 * * * service nginx reload\n  ```\n\n\n","slug":"Https-Nginx","published":1,"updated":"2017-02-12T15:52:39.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciz9wvzfm0006g38kj93ss2hh","content":"<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><h3 id=\"什么是HTTPS\"><a href=\"#什么是HTTPS\" class=\"headerlink\" title=\"什么是HTTPS\"></a>什么是HTTPS</h3><p>  HTTPS（全称：Hyper Text Transfer Protocol over Secure Socket Layer），是以安全为目标的HTTP通道，简单讲是HTTP的安全版。即HTTP下加入SSL层，HTTPS的安全基础是SSL，因此加密的详细内容就需要SSL。</p>\n<h3 id=\"为什么使用HTTPS\"><a href=\"#为什么使用HTTPS\" class=\"headerlink\" title=\"为什么使用HTTPS\"></a>为什么使用HTTPS</h3><p>  我们大致也明白了HTTPS其实就是一个经过加密后的HTTP，具有更高的安全性。</p>\n<h3 id=\"证书选择\"><a href=\"#证书选择\" class=\"headerlink\" title=\"证书选择\"></a>证书选择</h3><p>目前市面上比较成熟的HTTPS 证书提供商：</p>\n<ul>\n<li>做证书起家的<a href=\"http://www.verisign.com/\" title=\"VeriSign\" target=\"_blank\" rel=\"external\">VeriSign</a></li>\n<li>老牌的 <a href=\"https://www.startssl.com/\" title=\"StartSSL\" target=\"_blank\" rel=\"external\">StartSSL</a></li>\n<li>新星 <a href=\"https://letsencrypt.org/\" title=\"Let’s Encrypt\" target=\"_blank\" rel=\"external\">Let’s Encrypt</a></li>\n<li>国内的 <a href=\"https://www.wosign.com/\" title=\"沃通\" target=\"_blank\" rel=\"external\">沃通</a></li>\n<li>……</li>\n</ul>\n<p>本文将使用Let’s Encrypt证书，因为它免费、快速、可自动化续签……</p>\n<h2 id=\"实践\"><a href=\"#实践\" class=\"headerlink\" title=\"实践\"></a>实践</h2><h3 id=\"需要工具\"><a href=\"#需要工具\" class=\"headerlink\" title=\"需要工具\"></a>需要工具</h3><ul>\n<li>Ubuntu16.04的服务器 </li>\n<li>域名</li>\n</ul>\n<h3 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h3><p>  根据Let’s Encrypt上官方推荐我们将采用自动化工具<a href=\"https://certbot.eff.org/\" title=\"Certbot\" target=\"_blank\" rel=\"external\">Certbot</a>，并安装推荐教程直接操作。</p>\n<ol>\n<li><p>安装Certbot   </p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">sudo apt-get install letsencrypt</div></pre></td></tr></table></figure>\n</li>\n<li><p>申请证书</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">letsencrypt certonly --agree-tos --email xx@xx.com --webroot -w /var/www/example <span class=\"_\">-d</span> example.com <span class=\"_\">-d</span> www.example.com -w /var/www/thing <span class=\"_\">-d</span> thing.is <span class=\"_\">-d</span> m.thing.is</div><div class=\"line\"><span class=\"comment\"># --email 后面替换成自己的Email用来接受通知</span></div><div class=\"line\"><span class=\"comment\"># -d 填写需要Https访问的域名，可多个</span></div></pre></td></tr></table></figure>\n<p>命令运行完以后会在<code>/etc/letsencrypt/live/example.com/</code>目录下生成一下文件</p>\n<ul>\n<li>cert.pem  服务器证书文件</li>\n<li>chain.pem</li>\n<li>fullchain.pem =  cert.pem + chain.pem  <code>Nginx配置文件中的 ssl_certificate</code></li>\n<li>privkey.pem <code>Nginx 配置文件中的 ssl_certificate_key</code></li>\n</ul>\n</li>\n<li><p>配置Nginx</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">vim /etc/nginx/sites-available/default</div></pre></td></tr></table></figure>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div></pre></td><td class=\"code\"><pre><div class=\"line\">server &#123;</div><div class=\"line\">    listen 80;</div><div class=\"line\">    <span class=\"comment\"># listen [::]:80;</span></div><div class=\"line\">    server_name example.com;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\"># Redirect all HTTP requests to HTTPS with a 301 Moved Permanently response.</span></div><div class=\"line\">    <span class=\"built_in\">return</span> 301 https://<span class=\"variable\">$host</span><span class=\"variable\">$request_uri</span>;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">server &#123;</div><div class=\"line\">    <span class=\"comment\"># SSL configuration</span></div><div class=\"line\">    <span class=\"comment\">#</span></div><div class=\"line\">    listen 443 ssl default_server;</div><div class=\"line\">    listen [::]:443 ssl default_server;</div><div class=\"line\">    server_name example.com;</div><div class=\"line\"></div><div class=\"line\">    location / &#123;</div><div class=\"line\">        root   /var/www/html;</div><div class=\"line\">        index  index.html index.htm;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"comment\">#error_page  404              /404.html;</span></div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\"># redirect server error pages to the static page /50x.html</span></div><div class=\"line\">    <span class=\"comment\">#</span></div><div class=\"line\">    error_page   500 502 503 504  /50x.html;</div><div class=\"line\">    location = /50x.html &#123;</div><div class=\"line\">        root   /usr/share/nginx/html;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\"># certs sent to the client in SERVER HELLO are concatenated in ssl_certificate</span></div><div class=\"line\">    ssl_certificate /etc/letsencrypt/live/example.com/fullchain.pem;</div><div class=\"line\">    ssl_certificate_key /etc/letsencrypt/live/example.com/privkey.pem;</div><div class=\"line\">    ssl_session_timeout 1d;</div><div class=\"line\">    ssl_session_cache shared:SSL:50m;</div><div class=\"line\">    ssl_session_tickets off;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\"># Diffie-Hellman parameter for DHE ciphersuites, recommended 2048 bits</span></div><div class=\"line\">    <span class=\"comment\"># ssl_dhparam /etc/ssl/certs/dhparam.pem;</span></div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\"># intermediate configuration. tweak to your needs.</span></div><div class=\"line\">    ssl_protocols TLSv1 TLSv1.1 TLSv1.2;</div><div class=\"line\">    ssl_ciphers <span class=\"string\">'ECDHE-ECDSA-CHACHA20-POLY1305:ECDHE-RSA-CHACHA20-POLY1305:ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384:DHE-RSA-AES128-GCM-SHA256:DHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-AES128-SHA256:ECDHE-RSA-AES128-SHA256:ECDHE-ECDSA-AES128-SHA:ECDHE-RSA-AES256-SHA384:ECDHE-RSA-AES128-SHA:ECDHE-ECDSA-AES256-SHA384:ECDHE-ECDSA-AES256-SHA:ECDHE-RSA-AES256-SHA:DHE-RSA-AES128-SHA256:DHE-RSA-AES128-SHA:DHE-RSA-AES256-SHA256:DHE-RSA-AES256-SHA:ECDHE-ECDSA-DES-CBC3-SHA:ECDHE-RSA-DES-CBC3-SHA:EDH-RSA-DES-CBC3-SHA:AES128-GCM-SHA256:AES256-GCM-SHA384:AES128-SHA256:AES256-SHA256:AES128-SHA:AES256-SHA:DES-CBC3-SHA:!DSS'</span>;</div><div class=\"line\">    ssl_prefer_server_ciphers on;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\"># HSTS (ngx_http_headers_module is required) (15768000 seconds = 6 months)</span></div><div class=\"line\">    add_header Strict-Transport-Security max-age=15768000;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\"># OCSP Stapling ---</span></div><div class=\"line\">    <span class=\"comment\"># fetch OCSP records from URL in ssl_certificate and cache them</span></div><div class=\"line\">    ssl_stapling on;</div><div class=\"line\">    ssl_stapling_verify on;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">## verify chain of trust of OCSP response using Root CA and Intermediate certs</span></div><div class=\"line\">    <span class=\"comment\"># ssl_trusted_certificate /etc/letsencrypt/live/walfud.com/root_ca_cert_plus_intermediates;</span></div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\"># resolver 8.8.8.8 8.8.4.4 valid=300s;</span></div><div class=\"line\">    <span class=\"comment\"># resolver_timeout 5s;</span></div><div class=\"line\">    <span class=\"comment\"># pass the PHP scripts to FastCGI server listening on 127.0.0.1:9000</span></div><div class=\"line\">    <span class=\"comment\">#</span></div><div class=\"line\">    location ~ \\.php$ &#123;</div><div class=\"line\">        include snippets/fastcgi-php.conf;</div><div class=\"line\">        <span class=\"comment\"># With php7.0-cgi alone:  </span></div><div class=\"line\">        fastcgi_pass 127.0.0.1:9000;</div><div class=\"line\">        <span class=\"comment\"># With php7.0-fpm:</span></div><div class=\"line\">        <span class=\"comment\"># fastcgi_pass unix:/var/run/php7.0-fpm.sock;</span></div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n</li>\n<li><p>重启Nginx</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">service nginx reload</div></pre></td></tr></table></figure>\n</li>\n<li><p>自动续签<br> Let’s Encrypt 证书的有效期是 90 天，为了保证证书的有效性，我们需要及时的去续签(renew) 证书。这里我们采用<code>cron</code>来进行定期的续签。<code>letsencrypt renew</code>只会在证书过期的时候才会刷新证书，如果证书没有过期将不会执行任何命令。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">crontab <span class=\"_\">-e</span></div></pre></td></tr></table></figure>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\"># 每天夜里凌晨 0 点续签:</span></div><div class=\"line\">* 0 * * * letsencrypt renew</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># 重启 nginx 以使证书生效</span></div><div class=\"line\">* 1 * * * service nginx reload</div></pre></td></tr></table></figure>\n</li>\n</ol>\n","excerpt":"","more":"<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><h3 id=\"什么是HTTPS\"><a href=\"#什么是HTTPS\" class=\"headerlink\" title=\"什么是HTTPS\"></a>什么是HTTPS</h3><p>  HTTPS（全称：Hyper Text Transfer Protocol over Secure Socket Layer），是以安全为目标的HTTP通道，简单讲是HTTP的安全版。即HTTP下加入SSL层，HTTPS的安全基础是SSL，因此加密的详细内容就需要SSL。</p>\n<h3 id=\"为什么使用HTTPS\"><a href=\"#为什么使用HTTPS\" class=\"headerlink\" title=\"为什么使用HTTPS\"></a>为什么使用HTTPS</h3><p>  我们大致也明白了HTTPS其实就是一个经过加密后的HTTP，具有更高的安全性。</p>\n<h3 id=\"证书选择\"><a href=\"#证书选择\" class=\"headerlink\" title=\"证书选择\"></a>证书选择</h3><p>目前市面上比较成熟的HTTPS 证书提供商：</p>\n<ul>\n<li>做证书起家的<a href=\"http://www.verisign.com/\" title=\"VeriSign\">VeriSign</a></li>\n<li>老牌的 <a href=\"https://www.startssl.com/\" title=\"StartSSL\">StartSSL</a></li>\n<li>新星 <a href=\"https://letsencrypt.org/\" title=\"Let’s Encrypt\">Let’s Encrypt</a></li>\n<li>国内的 <a href=\"https://www.wosign.com/\" title=\"沃通\">沃通</a></li>\n<li>……</li>\n</ul>\n<p>本文将使用Let’s Encrypt证书，因为它免费、快速、可自动化续签……</p>\n<h2 id=\"实践\"><a href=\"#实践\" class=\"headerlink\" title=\"实践\"></a>实践</h2><h3 id=\"需要工具\"><a href=\"#需要工具\" class=\"headerlink\" title=\"需要工具\"></a>需要工具</h3><ul>\n<li>Ubuntu16.04的服务器 </li>\n<li>域名</li>\n</ul>\n<h3 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h3><p>  根据Let’s Encrypt上官方推荐我们将采用自动化工具<a href=\"https://certbot.eff.org/\" title=\"Certbot\">Certbot</a>，并安装推荐教程直接操作。</p>\n<ol>\n<li><p>安装Certbot   </p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">sudo apt-get install letsencrypt</div></pre></td></tr></table></figure>\n</li>\n<li><p>申请证书</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">letsencrypt certonly --agree-tos --email xx@xx.com --webroot -w /var/www/example <span class=\"_\">-d</span> example.com <span class=\"_\">-d</span> www.example.com -w /var/www/thing <span class=\"_\">-d</span> thing.is <span class=\"_\">-d</span> m.thing.is</div><div class=\"line\"><span class=\"comment\"># --email 后面替换成自己的Email用来接受通知</span></div><div class=\"line\"><span class=\"comment\"># -d 填写需要Https访问的域名，可多个</span></div></pre></td></tr></table></figure>\n<p>命令运行完以后会在<code>/etc/letsencrypt/live/example.com/</code>目录下生成一下文件</p>\n<ul>\n<li>cert.pem  服务器证书文件</li>\n<li>chain.pem</li>\n<li>fullchain.pem =  cert.pem + chain.pem  <code>Nginx配置文件中的 ssl_certificate</code></li>\n<li>privkey.pem <code>Nginx 配置文件中的 ssl_certificate_key</code></li>\n</ul>\n</li>\n<li><p>配置Nginx</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">vim /etc/nginx/sites-available/default</div></pre></td></tr></table></figure>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div></pre></td><td class=\"code\"><pre><div class=\"line\">server &#123;</div><div class=\"line\">    listen 80;</div><div class=\"line\">    <span class=\"comment\"># listen [::]:80;</span></div><div class=\"line\">    server_name example.com;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\"># Redirect all HTTP requests to HTTPS with a 301 Moved Permanently response.</span></div><div class=\"line\">    <span class=\"built_in\">return</span> 301 https://<span class=\"variable\">$host</span><span class=\"variable\">$request_uri</span>;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">server &#123;</div><div class=\"line\">    <span class=\"comment\"># SSL configuration</span></div><div class=\"line\">    <span class=\"comment\">#</span></div><div class=\"line\">    listen 443 ssl default_server;</div><div class=\"line\">    listen [::]:443 ssl default_server;</div><div class=\"line\">    server_name example.com;</div><div class=\"line\"></div><div class=\"line\">    location / &#123;</div><div class=\"line\">        root   /var/www/html;</div><div class=\"line\">        index  index.html index.htm;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"comment\">#error_page  404              /404.html;</span></div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\"># redirect server error pages to the static page /50x.html</span></div><div class=\"line\">    <span class=\"comment\">#</span></div><div class=\"line\">    error_page   500 502 503 504  /50x.html;</div><div class=\"line\">    location = /50x.html &#123;</div><div class=\"line\">        root   /usr/share/nginx/html;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\"># certs sent to the client in SERVER HELLO are concatenated in ssl_certificate</span></div><div class=\"line\">    ssl_certificate /etc/letsencrypt/live/example.com/fullchain.pem;</div><div class=\"line\">    ssl_certificate_key /etc/letsencrypt/live/example.com/privkey.pem;</div><div class=\"line\">    ssl_session_timeout 1d;</div><div class=\"line\">    ssl_session_cache shared:SSL:50m;</div><div class=\"line\">    ssl_session_tickets off;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\"># Diffie-Hellman parameter for DHE ciphersuites, recommended 2048 bits</span></div><div class=\"line\">    <span class=\"comment\"># ssl_dhparam /etc/ssl/certs/dhparam.pem;</span></div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\"># intermediate configuration. tweak to your needs.</span></div><div class=\"line\">    ssl_protocols TLSv1 TLSv1.1 TLSv1.2;</div><div class=\"line\">    ssl_ciphers <span class=\"string\">'ECDHE-ECDSA-CHACHA20-POLY1305:ECDHE-RSA-CHACHA20-POLY1305:ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384:DHE-RSA-AES128-GCM-SHA256:DHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-AES128-SHA256:ECDHE-RSA-AES128-SHA256:ECDHE-ECDSA-AES128-SHA:ECDHE-RSA-AES256-SHA384:ECDHE-RSA-AES128-SHA:ECDHE-ECDSA-AES256-SHA384:ECDHE-ECDSA-AES256-SHA:ECDHE-RSA-AES256-SHA:DHE-RSA-AES128-SHA256:DHE-RSA-AES128-SHA:DHE-RSA-AES256-SHA256:DHE-RSA-AES256-SHA:ECDHE-ECDSA-DES-CBC3-SHA:ECDHE-RSA-DES-CBC3-SHA:EDH-RSA-DES-CBC3-SHA:AES128-GCM-SHA256:AES256-GCM-SHA384:AES128-SHA256:AES256-SHA256:AES128-SHA:AES256-SHA:DES-CBC3-SHA:!DSS'</span>;</div><div class=\"line\">    ssl_prefer_server_ciphers on;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\"># HSTS (ngx_http_headers_module is required) (15768000 seconds = 6 months)</span></div><div class=\"line\">    add_header Strict-Transport-Security max-age=15768000;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\"># OCSP Stapling ---</span></div><div class=\"line\">    <span class=\"comment\"># fetch OCSP records from URL in ssl_certificate and cache them</span></div><div class=\"line\">    ssl_stapling on;</div><div class=\"line\">    ssl_stapling_verify on;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">## verify chain of trust of OCSP response using Root CA and Intermediate certs</span></div><div class=\"line\">    <span class=\"comment\"># ssl_trusted_certificate /etc/letsencrypt/live/walfud.com/root_ca_cert_plus_intermediates;</span></div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\"># resolver 8.8.8.8 8.8.4.4 valid=300s;</span></div><div class=\"line\">    <span class=\"comment\"># resolver_timeout 5s;</span></div><div class=\"line\">    <span class=\"comment\"># pass the PHP scripts to FastCGI server listening on 127.0.0.1:9000</span></div><div class=\"line\">    <span class=\"comment\">#</span></div><div class=\"line\">    location ~ \\.php$ &#123;</div><div class=\"line\">        include snippets/fastcgi-php.conf;</div><div class=\"line\">        <span class=\"comment\"># With php7.0-cgi alone:  </span></div><div class=\"line\">        fastcgi_pass 127.0.0.1:9000;</div><div class=\"line\">        <span class=\"comment\"># With php7.0-fpm:</span></div><div class=\"line\">        <span class=\"comment\"># fastcgi_pass unix:/var/run/php7.0-fpm.sock;</span></div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n</li>\n<li><p>重启Nginx</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">service nginx reload</div></pre></td></tr></table></figure>\n</li>\n<li><p>自动续签<br> Let’s Encrypt 证书的有效期是 90 天，为了保证证书的有效性，我们需要及时的去续签(renew) 证书。这里我们采用<code>cron</code>来进行定期的续签。<code>letsencrypt renew</code>只会在证书过期的时候才会刷新证书，如果证书没有过期将不会执行任何命令。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">crontab <span class=\"_\">-e</span></div></pre></td></tr></table></figure>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\"># 每天夜里凌晨 0 点续签:</span></div><div class=\"line\">* 0 * * * letsencrypt renew</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># 重启 nginx 以使证书生效</span></div><div class=\"line\">* 1 * * * service nginx reload</div></pre></td></tr></table></figure>\n</li>\n</ol>\n"},{"title":"安装 Shadowsocks 服务器端","date":"2016-11-08T02:23:20.000Z","description":"如何在服务器上安装并配置 Shadowsocks 。","_content":"## 前言\n随着国内『墙』的越来越『高』，掌握一门方便、快捷、便宜的『飞檐走壁』技巧成为了刚需。下面我们介绍一款轻量、多平台、安装配置十分简单的开源软件 [Shadowsocks](https://github.com/shadowsocks/shadowsocks \"Shadowsocks\") 。\n\n## 安装\n### 准备工作\n* VPS 一台\n    可以使用 [digitalocean](https://www.digitalocean.com) 的 SFO 机房\n* Python 环境\n\n### 服务器安装\n 1. #### pip 安装法\n     * 安装 pip\n       ```bash\n       apt-get install python-pip\n       ```\n     * 安装 shadowsocks\n          ```bash\n          pip install shadowsocks\n          ```\n          \n### 配置\n  ```bash\n  vim /etc/shadowsocks.json\n  ```\n  加入以下内容\n  ```bash\n  {\n      \"server\": \"my_server_ip\",               # 服务器IP\n      \"server_port\": 8000,                    # 开启端口\n      \"local_address\": \"x.x.x.x\",             # 服务器本地地址\n      \"local_port\": 1080,                     # 服务器本地端口\n      \"password\": \"mypassword\",               # 连接密码\n      \"timeout\": 300,                         # 连接超时时间\n      \"method\": \"rc4-md5\"\n      \"fast_open\": true                       # 是否开启TCP_FASTOPEN，需要系统开启支持\n      \"workers\": 5                            # 进程数\n  }\n  ```\n  \n  ### 系统优化\n  确认系统内核是 3.7.1 以上\n   ```bash\n   uname -r\n   \n   # 4.4.0-45-generic\n   ```\n1. #### 系统文件描述符的最大限数\n   * Shadowsocks 每次启动前\n     ```bash\n     ulimit -SHn 51200\n     ```\n   * 系统启动时生效\n     ```bash\n     vim /etc/security/limits.conf\n     # 添加\n     * soft nofile 51200\n     * hard nofile 51200\n     # 第一列 是用户或者用户组\n     # 第二列 hard: 硬限制，soft: 软件限制，一般来说 soft 要比 hard 小，超过 soft 报警，hard 是底线\n     # 第三列 nofile 打开文件数\n     ```\n     ```bash\n     vim  /etc/pam.d/common-session\n     #添加一行\n     session required pam_limits.so\n     ```\n     ```bash\n     vim /etc/profile\n     # 在文件末尾加入\n     ulimit -SHn 51200\n     ```\n2. ####  调整内核参数\n     ```bash\n     vim /etc/sysctl.conf\n\n     # 添加配置\n\n     fs.file-max = 51200                            # max open files\n\n      net.core.rmem_max = 67108864                  # max read buffer\n      net.core.wmem_max = 67108864                  # max write buffer\n      net.core.netdev_max_backlog = 250000          # max processor input queue\n      net.core.somaxconn = 4096                     # max backlog\n\n      net.ipv4.tcp_syncookies = 1                   # resist SYN flood attacks\n      net.ipv4.tcp_tw_reuse = 1                     # reuse timewait sockets when safe\n      net.ipv4.tcp_tw_recycle = 0                   # turn off fast timewait sockets recycling\n      net.ipv4.tcp_fin_timeout = 30                 # short FIN timeout\n      net.ipv4.tcp_keepalive_time = 1200            # short keepalive time\n      net.ipv4.ip_local_port_range = 10000 65000    # outbound port range\n      net.ipv4.tcp_max_syn_backlog = 8192           # max SYN backlog\n      net.ipv4.tcp_max_tw_buckets = 5000            # max timewait sockets held by system simultaneously\n      net.ipv4.tcp_rmem = 4096 87380 67108864       # TCP receive buffer\n      net.ipv4.tcp_wmem = 4096 65536 67108864       # TCP write buffer\n      net.ipv4.tcp_mtu_probing = 1                  # turn on path MTU discovery\n\n      net.ipv4.tcp_fastopen = 3                     # enable TCP_FASTOPEN \n\n      net.ipv4.tcp_congestion_control = hybla\n\n\n      #使配置生效\n      sysctl -p\n     ```\n   * TCP_FASTOPEN\n     服务端和客户端Linux内核版本必须新于 3.7.1\n     ```bash\n     # 查看是否生效\n     sysctl net.ipv4.tcp_fastopen\n     \n     # net.ipv4.tcp_fastopen = 3\n     ```\n   * TCP拥塞控制算法\n     Linux 中提供了多套TCP拥塞控制算法。\n     1. reno是最基本的拥塞控制算法，也是TCP协议的实验原型。\n     2. bic适用于rtt较高但丢包极为罕见的情况，比如北美和欧洲之间的线路，这是2.6.8到2.6.18之间的Linux内核的默认算法。\n     3. cubic是修改版的bic，适用环境比bic广泛一点，它是2.6.19之后的linux内核的默认算法\n     4. hybla适用于高延时、高丢包率的网络，比如卫星链路——同样适用于中美之间的链路。\n     \n     ```bash\n     # 查看系统支持的算法\n     sysctl net.ipv4.tcp_available_congestion_control\n     \n     # net.ipv4.tcp_available_congestion_control = hybla cubic reno\n     ```\n### 启动\n * 直接启动\n ```bash\n ssserver -p 8000 -k password -m rc4-md5 -d {start | stop}\n ```\n * 配置文件启动\n ```bash\n ssserver -c /etc/shadowsocks.json -d {start | stop}\n ```\n ## 小结\n 采用 digitalocean 的 SFO2 机房 300+ms 延迟的情况下，能够很流畅的查看Youtube的 1080P （湖南电信）","source":"_posts/Install-Shadowsocks-Server.md","raw":"---\ntitle: 安装 Shadowsocks 服务器端\ndate: 2016-11-08 10:23:20\ntags:\n  - Server\n  - Shadowsocks\ncategories:\n  - Server\ndescription: 如何在服务器上安装并配置 Shadowsocks 。\n---\n## 前言\n随着国内『墙』的越来越『高』，掌握一门方便、快捷、便宜的『飞檐走壁』技巧成为了刚需。下面我们介绍一款轻量、多平台、安装配置十分简单的开源软件 [Shadowsocks](https://github.com/shadowsocks/shadowsocks \"Shadowsocks\") 。\n\n## 安装\n### 准备工作\n* VPS 一台\n    可以使用 [digitalocean](https://www.digitalocean.com) 的 SFO 机房\n* Python 环境\n\n### 服务器安装\n 1. #### pip 安装法\n     * 安装 pip\n       ```bash\n       apt-get install python-pip\n       ```\n     * 安装 shadowsocks\n          ```bash\n          pip install shadowsocks\n          ```\n          \n### 配置\n  ```bash\n  vim /etc/shadowsocks.json\n  ```\n  加入以下内容\n  ```bash\n  {\n      \"server\": \"my_server_ip\",               # 服务器IP\n      \"server_port\": 8000,                    # 开启端口\n      \"local_address\": \"x.x.x.x\",             # 服务器本地地址\n      \"local_port\": 1080,                     # 服务器本地端口\n      \"password\": \"mypassword\",               # 连接密码\n      \"timeout\": 300,                         # 连接超时时间\n      \"method\": \"rc4-md5\"\n      \"fast_open\": true                       # 是否开启TCP_FASTOPEN，需要系统开启支持\n      \"workers\": 5                            # 进程数\n  }\n  ```\n  \n  ### 系统优化\n  确认系统内核是 3.7.1 以上\n   ```bash\n   uname -r\n   \n   # 4.4.0-45-generic\n   ```\n1. #### 系统文件描述符的最大限数\n   * Shadowsocks 每次启动前\n     ```bash\n     ulimit -SHn 51200\n     ```\n   * 系统启动时生效\n     ```bash\n     vim /etc/security/limits.conf\n     # 添加\n     * soft nofile 51200\n     * hard nofile 51200\n     # 第一列 是用户或者用户组\n     # 第二列 hard: 硬限制，soft: 软件限制，一般来说 soft 要比 hard 小，超过 soft 报警，hard 是底线\n     # 第三列 nofile 打开文件数\n     ```\n     ```bash\n     vim  /etc/pam.d/common-session\n     #添加一行\n     session required pam_limits.so\n     ```\n     ```bash\n     vim /etc/profile\n     # 在文件末尾加入\n     ulimit -SHn 51200\n     ```\n2. ####  调整内核参数\n     ```bash\n     vim /etc/sysctl.conf\n\n     # 添加配置\n\n     fs.file-max = 51200                            # max open files\n\n      net.core.rmem_max = 67108864                  # max read buffer\n      net.core.wmem_max = 67108864                  # max write buffer\n      net.core.netdev_max_backlog = 250000          # max processor input queue\n      net.core.somaxconn = 4096                     # max backlog\n\n      net.ipv4.tcp_syncookies = 1                   # resist SYN flood attacks\n      net.ipv4.tcp_tw_reuse = 1                     # reuse timewait sockets when safe\n      net.ipv4.tcp_tw_recycle = 0                   # turn off fast timewait sockets recycling\n      net.ipv4.tcp_fin_timeout = 30                 # short FIN timeout\n      net.ipv4.tcp_keepalive_time = 1200            # short keepalive time\n      net.ipv4.ip_local_port_range = 10000 65000    # outbound port range\n      net.ipv4.tcp_max_syn_backlog = 8192           # max SYN backlog\n      net.ipv4.tcp_max_tw_buckets = 5000            # max timewait sockets held by system simultaneously\n      net.ipv4.tcp_rmem = 4096 87380 67108864       # TCP receive buffer\n      net.ipv4.tcp_wmem = 4096 65536 67108864       # TCP write buffer\n      net.ipv4.tcp_mtu_probing = 1                  # turn on path MTU discovery\n\n      net.ipv4.tcp_fastopen = 3                     # enable TCP_FASTOPEN \n\n      net.ipv4.tcp_congestion_control = hybla\n\n\n      #使配置生效\n      sysctl -p\n     ```\n   * TCP_FASTOPEN\n     服务端和客户端Linux内核版本必须新于 3.7.1\n     ```bash\n     # 查看是否生效\n     sysctl net.ipv4.tcp_fastopen\n     \n     # net.ipv4.tcp_fastopen = 3\n     ```\n   * TCP拥塞控制算法\n     Linux 中提供了多套TCP拥塞控制算法。\n     1. reno是最基本的拥塞控制算法，也是TCP协议的实验原型。\n     2. bic适用于rtt较高但丢包极为罕见的情况，比如北美和欧洲之间的线路，这是2.6.8到2.6.18之间的Linux内核的默认算法。\n     3. cubic是修改版的bic，适用环境比bic广泛一点，它是2.6.19之后的linux内核的默认算法\n     4. hybla适用于高延时、高丢包率的网络，比如卫星链路——同样适用于中美之间的链路。\n     \n     ```bash\n     # 查看系统支持的算法\n     sysctl net.ipv4.tcp_available_congestion_control\n     \n     # net.ipv4.tcp_available_congestion_control = hybla cubic reno\n     ```\n### 启动\n * 直接启动\n ```bash\n ssserver -p 8000 -k password -m rc4-md5 -d {start | stop}\n ```\n * 配置文件启动\n ```bash\n ssserver -c /etc/shadowsocks.json -d {start | stop}\n ```\n ## 小结\n 采用 digitalocean 的 SFO2 机房 300+ms 延迟的情况下，能够很流畅的查看Youtube的 1080P （湖南电信）","slug":"Install-Shadowsocks-Server","published":1,"updated":"2017-02-12T15:52:39.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciz9wvzfn0007g38kus0ljk39","content":"<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>随着国内『墙』的越来越『高』，掌握一门方便、快捷、便宜的『飞檐走壁』技巧成为了刚需。下面我们介绍一款轻量、多平台、安装配置十分简单的开源软件 <a href=\"https://github.com/shadowsocks/shadowsocks\" title=\"Shadowsocks\" target=\"_blank\" rel=\"external\">Shadowsocks</a> 。</p>\n<h2 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h2><h3 id=\"准备工作\"><a href=\"#准备工作\" class=\"headerlink\" title=\"准备工作\"></a>准备工作</h3><ul>\n<li>VPS 一台<br>  可以使用 <a href=\"https://www.digitalocean.com\" target=\"_blank\" rel=\"external\">digitalocean</a> 的 SFO 机房</li>\n<li>Python 环境</li>\n</ul>\n<h3 id=\"服务器安装\"><a href=\"#服务器安装\" class=\"headerlink\" title=\"服务器安装\"></a>服务器安装</h3><ol>\n<li><h4 id=\"pip-安装法\"><a href=\"#pip-安装法\" class=\"headerlink\" title=\"pip 安装法\"></a>pip 安装法</h4><ul>\n<li><p>安装 pip</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">apt-get install python-pip</div></pre></td></tr></table></figure>\n</li>\n<li><p>安装 shadowsocks</p>\n   <figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">pip install shadowsocks</div></pre></td></tr></table></figure>\n</li>\n</ul>\n</li>\n</ol>\n<h3 id=\"配置\"><a href=\"#配置\" class=\"headerlink\" title=\"配置\"></a>配置</h3>  <figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">vim /etc/shadowsocks.json</div></pre></td></tr></table></figure>\n<p>  加入以下内容<br>  <figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\">&#123;</div><div class=\"line\">    <span class=\"string\">\"server\"</span>: <span class=\"string\">\"my_server_ip\"</span>,               <span class=\"comment\"># 服务器IP</span></div><div class=\"line\">    <span class=\"string\">\"server_port\"</span>: 8000,                    <span class=\"comment\"># 开启端口</span></div><div class=\"line\">    <span class=\"string\">\"local_address\"</span>: <span class=\"string\">\"x.x.x.x\"</span>,             <span class=\"comment\"># 服务器本地地址</span></div><div class=\"line\">    <span class=\"string\">\"local_port\"</span>: 1080,                     <span class=\"comment\"># 服务器本地端口</span></div><div class=\"line\">    <span class=\"string\">\"password\"</span>: <span class=\"string\">\"mypassword\"</span>,               <span class=\"comment\"># 连接密码</span></div><div class=\"line\">    <span class=\"string\">\"timeout\"</span>: 300,                         <span class=\"comment\"># 连接超时时间</span></div><div class=\"line\">    <span class=\"string\">\"method\"</span>: <span class=\"string\">\"rc4-md5\"</span></div><div class=\"line\">    <span class=\"string\">\"fast_open\"</span>: <span class=\"literal\">true</span>                       <span class=\"comment\"># 是否开启TCP_FASTOPEN，需要系统开启支持</span></div><div class=\"line\">    <span class=\"string\">\"workers\"</span>: 5                            <span class=\"comment\"># 进程数</span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<h3 id=\"系统优化\"><a href=\"#系统优化\" class=\"headerlink\" title=\"系统优化\"></a>系统优化</h3><p>  确认系统内核是 3.7.1 以上<br>   <figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">uname -r</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># 4.4.0-45-generic</span></div></pre></td></tr></table></figure></p>\n<ol>\n<li><h4 id=\"系统文件描述符的最大限数\"><a href=\"#系统文件描述符的最大限数\" class=\"headerlink\" title=\"系统文件描述符的最大限数\"></a>系统文件描述符的最大限数</h4><ul>\n<li><p>Shadowsocks 每次启动前</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"built_in\">ulimit</span> -SHn 51200</div></pre></td></tr></table></figure>\n</li>\n<li><p>系统启动时生效</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">vim /etc/security/limits.conf</div><div class=\"line\"><span class=\"comment\"># 添加</span></div><div class=\"line\">* soft nofile 51200</div><div class=\"line\">* hard nofile 51200</div><div class=\"line\"><span class=\"comment\"># 第一列 是用户或者用户组</span></div><div class=\"line\"><span class=\"comment\"># 第二列 hard: 硬限制，soft: 软件限制，一般来说 soft 要比 hard 小，超过 soft 报警，hard 是底线</span></div><div class=\"line\"><span class=\"comment\"># 第三列 nofile 打开文件数</span></div></pre></td></tr></table></figure>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">vim  /etc/pam.d/common-session</div><div class=\"line\"><span class=\"comment\">#添加一行</span></div><div class=\"line\">session required pam_limits.so</div></pre></td></tr></table></figure>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">vim /etc/profile</div><div class=\"line\"><span class=\"comment\"># 在文件末尾加入</span></div><div class=\"line\"><span class=\"built_in\">ulimit</span> -SHn 51200</div></pre></td></tr></table></figure>\n</li>\n</ul>\n</li>\n<li><h4 id=\"调整内核参数\"><a href=\"#调整内核参数\" class=\"headerlink\" title=\"调整内核参数\"></a>调整内核参数</h4>  <figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div></pre></td><td class=\"code\"><pre><div class=\"line\">vim /etc/sysctl.conf</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># 添加配置</span></div><div class=\"line\"></div><div class=\"line\">fs.file-max = 51200                            <span class=\"comment\"># max open files</span></div><div class=\"line\"></div><div class=\"line\"> net.core.rmem_max = 67108864                  <span class=\"comment\"># max read buffer</span></div><div class=\"line\"> net.core.wmem_max = 67108864                  <span class=\"comment\"># max write buffer</span></div><div class=\"line\"> net.core.netdev_max_backlog = 250000          <span class=\"comment\"># max processor input queue</span></div><div class=\"line\"> net.core.somaxconn = 4096                     <span class=\"comment\"># max backlog</span></div><div class=\"line\"></div><div class=\"line\"> net.ipv4.tcp_syncookies = 1                   <span class=\"comment\"># resist SYN flood attacks</span></div><div class=\"line\"> net.ipv4.tcp_tw_reuse = 1                     <span class=\"comment\"># reuse timewait sockets when safe</span></div><div class=\"line\"> net.ipv4.tcp_tw_recycle = 0                   <span class=\"comment\"># turn off fast timewait sockets recycling</span></div><div class=\"line\"> net.ipv4.tcp_fin_timeout = 30                 <span class=\"comment\"># short FIN timeout</span></div><div class=\"line\"> net.ipv4.tcp_keepalive_time = 1200            <span class=\"comment\"># short keepalive time</span></div><div class=\"line\"> net.ipv4.ip_local_port_range = 10000 65000    <span class=\"comment\"># outbound port range</span></div><div class=\"line\"> net.ipv4.tcp_max_syn_backlog = 8192           <span class=\"comment\"># max SYN backlog</span></div><div class=\"line\"> net.ipv4.tcp_max_tw_buckets = 5000            <span class=\"comment\"># max timewait sockets held by system simultaneously</span></div><div class=\"line\"> net.ipv4.tcp_rmem = 4096 87380 67108864       <span class=\"comment\"># TCP receive buffer</span></div><div class=\"line\"> net.ipv4.tcp_wmem = 4096 65536 67108864       <span class=\"comment\"># TCP write buffer</span></div><div class=\"line\"> net.ipv4.tcp_mtu_probing = 1                  <span class=\"comment\"># turn on path MTU discovery</span></div><div class=\"line\"></div><div class=\"line\"> net.ipv4.tcp_fastopen = 3                     <span class=\"comment\"># enable TCP_FASTOPEN </span></div><div class=\"line\"></div><div class=\"line\"> net.ipv4.tcp_congestion_control = hybla</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"> <span class=\"comment\">#使配置生效</span></div><div class=\"line\"> sysctl -p</div></pre></td></tr></table></figure>\n<ul>\n<li><p>TCP_FASTOPEN<br>服务端和客户端Linux内核版本必须新于 3.7.1</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\"># 查看是否生效</span></div><div class=\"line\">sysctl net.ipv4.tcp_fastopen</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># net.ipv4.tcp_fastopen = 3</span></div></pre></td></tr></table></figure>\n</li>\n<li><p>TCP拥塞控制算法<br>Linux 中提供了多套TCP拥塞控制算法。</p>\n<ol>\n<li>reno是最基本的拥塞控制算法，也是TCP协议的实验原型。</li>\n<li>bic适用于rtt较高但丢包极为罕见的情况，比如北美和欧洲之间的线路，这是2.6.8到2.6.18之间的Linux内核的默认算法。</li>\n<li>cubic是修改版的bic，适用环境比bic广泛一点，它是2.6.19之后的linux内核的默认算法</li>\n<li>hybla适用于高延时、高丢包率的网络，比如卫星链路——同样适用于中美之间的链路。</li>\n</ol>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\"># 查看系统支持的算法</span></div><div class=\"line\">sysctl net.ipv4.tcp_available_congestion_control</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># net.ipv4.tcp_available_congestion_control = hybla cubic reno</span></div></pre></td></tr></table></figure>\n</li>\n</ul>\n</li>\n</ol>\n<h3 id=\"启动\"><a href=\"#启动\" class=\"headerlink\" title=\"启动\"></a>启动</h3><ul>\n<li><p>直接启动</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">ssserver -p 8000 -k password -m rc4-md5 <span class=\"_\">-d</span> &#123;start | stop&#125;</div></pre></td></tr></table></figure>\n</li>\n<li><p>配置文件启动</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">ssserver -c /etc/shadowsocks.json <span class=\"_\">-d</span> &#123;start | stop&#125;</div></pre></td></tr></table></figure>\n<h2 id=\"小结\"><a href=\"#小结\" class=\"headerlink\" title=\"小结\"></a>小结</h2><p>采用 digitalocean 的 SFO2 机房 300+ms 延迟的情况下，能够很流畅的查看Youtube的 1080P （湖南电信）</p>\n</li>\n</ul>\n","excerpt":"","more":"<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>随着国内『墙』的越来越『高』，掌握一门方便、快捷、便宜的『飞檐走壁』技巧成为了刚需。下面我们介绍一款轻量、多平台、安装配置十分简单的开源软件 <a href=\"https://github.com/shadowsocks/shadowsocks\" title=\"Shadowsocks\">Shadowsocks</a> 。</p>\n<h2 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h2><h3 id=\"准备工作\"><a href=\"#准备工作\" class=\"headerlink\" title=\"准备工作\"></a>准备工作</h3><ul>\n<li>VPS 一台<br>  可以使用 <a href=\"https://www.digitalocean.com\">digitalocean</a> 的 SFO 机房</li>\n<li>Python 环境</li>\n</ul>\n<h3 id=\"服务器安装\"><a href=\"#服务器安装\" class=\"headerlink\" title=\"服务器安装\"></a>服务器安装</h3><ol>\n<li><h4 id=\"pip-安装法\"><a href=\"#pip-安装法\" class=\"headerlink\" title=\"pip 安装法\"></a>pip 安装法</h4><ul>\n<li><p>安装 pip</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">apt-get install python-pip</div></pre></td></tr></table></figure>\n</li>\n<li><p>安装 shadowsocks</p>\n   <figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">pip install shadowsocks</div></pre></td></tr></table></figure>\n</li>\n</ul>\n</li>\n</ol>\n<h3 id=\"配置\"><a href=\"#配置\" class=\"headerlink\" title=\"配置\"></a>配置</h3>  <figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">vim /etc/shadowsocks.json</div></pre></td></tr></table></figure>\n<p>  加入以下内容<br>  <figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\">&#123;</div><div class=\"line\">    <span class=\"string\">\"server\"</span>: <span class=\"string\">\"my_server_ip\"</span>,               <span class=\"comment\"># 服务器IP</span></div><div class=\"line\">    <span class=\"string\">\"server_port\"</span>: 8000,                    <span class=\"comment\"># 开启端口</span></div><div class=\"line\">    <span class=\"string\">\"local_address\"</span>: <span class=\"string\">\"x.x.x.x\"</span>,             <span class=\"comment\"># 服务器本地地址</span></div><div class=\"line\">    <span class=\"string\">\"local_port\"</span>: 1080,                     <span class=\"comment\"># 服务器本地端口</span></div><div class=\"line\">    <span class=\"string\">\"password\"</span>: <span class=\"string\">\"mypassword\"</span>,               <span class=\"comment\"># 连接密码</span></div><div class=\"line\">    <span class=\"string\">\"timeout\"</span>: 300,                         <span class=\"comment\"># 连接超时时间</span></div><div class=\"line\">    <span class=\"string\">\"method\"</span>: <span class=\"string\">\"rc4-md5\"</span></div><div class=\"line\">    <span class=\"string\">\"fast_open\"</span>: <span class=\"literal\">true</span>                       <span class=\"comment\"># 是否开启TCP_FASTOPEN，需要系统开启支持</span></div><div class=\"line\">    <span class=\"string\">\"workers\"</span>: 5                            <span class=\"comment\"># 进程数</span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<h3 id=\"系统优化\"><a href=\"#系统优化\" class=\"headerlink\" title=\"系统优化\"></a>系统优化</h3><p>  确认系统内核是 3.7.1 以上<br>   <figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">uname -r</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># 4.4.0-45-generic</span></div></pre></td></tr></table></figure></p>\n<ol>\n<li><h4 id=\"系统文件描述符的最大限数\"><a href=\"#系统文件描述符的最大限数\" class=\"headerlink\" title=\"系统文件描述符的最大限数\"></a>系统文件描述符的最大限数</h4><ul>\n<li><p>Shadowsocks 每次启动前</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"built_in\">ulimit</span> -SHn 51200</div></pre></td></tr></table></figure>\n</li>\n<li><p>系统启动时生效</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">vim /etc/security/limits.conf</div><div class=\"line\"><span class=\"comment\"># 添加</span></div><div class=\"line\">* soft nofile 51200</div><div class=\"line\">* hard nofile 51200</div><div class=\"line\"><span class=\"comment\"># 第一列 是用户或者用户组</span></div><div class=\"line\"><span class=\"comment\"># 第二列 hard: 硬限制，soft: 软件限制，一般来说 soft 要比 hard 小，超过 soft 报警，hard 是底线</span></div><div class=\"line\"><span class=\"comment\"># 第三列 nofile 打开文件数</span></div></pre></td></tr></table></figure>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">vim  /etc/pam.d/common-session</div><div class=\"line\"><span class=\"comment\">#添加一行</span></div><div class=\"line\">session required pam_limits.so</div></pre></td></tr></table></figure>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">vim /etc/profile</div><div class=\"line\"><span class=\"comment\"># 在文件末尾加入</span></div><div class=\"line\"><span class=\"built_in\">ulimit</span> -SHn 51200</div></pre></td></tr></table></figure>\n</li>\n</ul>\n</li>\n<li><h4 id=\"调整内核参数\"><a href=\"#调整内核参数\" class=\"headerlink\" title=\"调整内核参数\"></a>调整内核参数</h4>  <figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div></pre></td><td class=\"code\"><pre><div class=\"line\">vim /etc/sysctl.conf</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># 添加配置</span></div><div class=\"line\"></div><div class=\"line\">fs.file-max = 51200                            <span class=\"comment\"># max open files</span></div><div class=\"line\"></div><div class=\"line\"> net.core.rmem_max = 67108864                  <span class=\"comment\"># max read buffer</span></div><div class=\"line\"> net.core.wmem_max = 67108864                  <span class=\"comment\"># max write buffer</span></div><div class=\"line\"> net.core.netdev_max_backlog = 250000          <span class=\"comment\"># max processor input queue</span></div><div class=\"line\"> net.core.somaxconn = 4096                     <span class=\"comment\"># max backlog</span></div><div class=\"line\"></div><div class=\"line\"> net.ipv4.tcp_syncookies = 1                   <span class=\"comment\"># resist SYN flood attacks</span></div><div class=\"line\"> net.ipv4.tcp_tw_reuse = 1                     <span class=\"comment\"># reuse timewait sockets when safe</span></div><div class=\"line\"> net.ipv4.tcp_tw_recycle = 0                   <span class=\"comment\"># turn off fast timewait sockets recycling</span></div><div class=\"line\"> net.ipv4.tcp_fin_timeout = 30                 <span class=\"comment\"># short FIN timeout</span></div><div class=\"line\"> net.ipv4.tcp_keepalive_time = 1200            <span class=\"comment\"># short keepalive time</span></div><div class=\"line\"> net.ipv4.ip_local_port_range = 10000 65000    <span class=\"comment\"># outbound port range</span></div><div class=\"line\"> net.ipv4.tcp_max_syn_backlog = 8192           <span class=\"comment\"># max SYN backlog</span></div><div class=\"line\"> net.ipv4.tcp_max_tw_buckets = 5000            <span class=\"comment\"># max timewait sockets held by system simultaneously</span></div><div class=\"line\"> net.ipv4.tcp_rmem = 4096 87380 67108864       <span class=\"comment\"># TCP receive buffer</span></div><div class=\"line\"> net.ipv4.tcp_wmem = 4096 65536 67108864       <span class=\"comment\"># TCP write buffer</span></div><div class=\"line\"> net.ipv4.tcp_mtu_probing = 1                  <span class=\"comment\"># turn on path MTU discovery</span></div><div class=\"line\"></div><div class=\"line\"> net.ipv4.tcp_fastopen = 3                     <span class=\"comment\"># enable TCP_FASTOPEN </span></div><div class=\"line\"></div><div class=\"line\"> net.ipv4.tcp_congestion_control = hybla</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"> <span class=\"comment\">#使配置生效</span></div><div class=\"line\"> sysctl -p</div></pre></td></tr></table></figure>\n<ul>\n<li><p>TCP_FASTOPEN<br>服务端和客户端Linux内核版本必须新于 3.7.1</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\"># 查看是否生效</span></div><div class=\"line\">sysctl net.ipv4.tcp_fastopen</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># net.ipv4.tcp_fastopen = 3</span></div></pre></td></tr></table></figure>\n</li>\n<li><p>TCP拥塞控制算法<br>Linux 中提供了多套TCP拥塞控制算法。</p>\n<ol>\n<li>reno是最基本的拥塞控制算法，也是TCP协议的实验原型。</li>\n<li>bic适用于rtt较高但丢包极为罕见的情况，比如北美和欧洲之间的线路，这是2.6.8到2.6.18之间的Linux内核的默认算法。</li>\n<li>cubic是修改版的bic，适用环境比bic广泛一点，它是2.6.19之后的linux内核的默认算法</li>\n<li>hybla适用于高延时、高丢包率的网络，比如卫星链路——同样适用于中美之间的链路。</li>\n</ol>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\"># 查看系统支持的算法</span></div><div class=\"line\">sysctl net.ipv4.tcp_available_congestion_control</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># net.ipv4.tcp_available_congestion_control = hybla cubic reno</span></div></pre></td></tr></table></figure>\n</li>\n</ul>\n</li>\n</ol>\n<h3 id=\"启动\"><a href=\"#启动\" class=\"headerlink\" title=\"启动\"></a>启动</h3><ul>\n<li><p>直接启动</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">ssserver -p 8000 -k password -m rc4-md5 <span class=\"_\">-d</span> &#123;start | stop&#125;</div></pre></td></tr></table></figure>\n</li>\n<li><p>配置文件启动</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">ssserver -c /etc/shadowsocks.json <span class=\"_\">-d</span> &#123;start | stop&#125;</div></pre></td></tr></table></figure>\n<h2 id=\"小结\"><a href=\"#小结\" class=\"headerlink\" title=\"小结\"></a>小结</h2><p>采用 digitalocean 的 SFO2 机房 300+ms 延迟的情况下，能够很流畅的查看Youtube的 1080P （湖南电信）</p>\n</li>\n</ul>\n"},{"title":"Linux 常用命令","date":"2016-09-23T11:14:35.000Z","description":["整理了一些自己比较常用的命令，后期将持续更新。"],"_content":"## 前言\n整理了一些自己比较常用的命令，后期将持续更新。\n## 详解\n### 文件命令\n``` bash\n$ ls                 ## 查看目录下的子节点（文件夹和文件）信息  -a:显示隐藏文件  -l:列表显示\n$ pwd                ## 查看当前所在的工作目录的全路径\n$ cd dir             ## 打开目录 - 前一个工作目录 ~ 当前用户目录\n$ rm                 ## 删除文件  -r  删除目录 -f 强制删除文件\n$ cp file1 file2     ## 复制  -r  赋值目录，没有就创建\n$ ln -s file link    ## 创建file的符号连接link\n$ touch file         ## 创建文件\n$ mkdir dir          ## 创建目录\n$ more file          ## 查看file内容\n$ tail -f file       ## 从后10行开始查看file\n$ chmod octal file   ## 更改file权限  777 755\n$ chown              ## 更改文件所有者\n$ Ctrl + W           ## 删除当前行中的字\n$ Ctrl + U           ## 删除整行\n```\n### 进程管理\n```bash\n$ ps            ## 现实当前的活动进程\n$ top           ## 显示所有正在运行的进程\n$ kill pid      ## 杀掉进程 pid\n$ killall proc  ## 杀掉所有名位为 proc 的进程\n$ Ctrl + C      ## 停止当前命令\n$ Ctrl + \\      ## 停止当前命令，当 Ctrl + C 不好用的时候\n$ Ctrl + Z      ## 停止当前命令，并使用 fg 恢复\n$ Ctrl + D      ## 注销当前会话，与 exit 相似\n$ !!            ## 重复上次的命令\n$ fg            ## 将进程转到前台\n$ bg pid        ## 将进程转到前台\n```\n### SSH\n```bash\n$ ssh user@host         ## 以user去登录host   -p 端口 -i key文件 -vvv Debug模式mkdir\n$ ssh-copy-id user@host ## 将密钥添加到host实现无密码登录\n```\n### 系统信息\n```bash\n$ date                   ## 显示当前日期和时间\n$ ntpdate ntp.ubuntu.com ## 与Ubuntu NTP server同步时间\n$ cal                    ## 显示当月日历\n$ uptime                 ## 显示系统从开机到现在所运行的时间\n$ getent passwd          ## 所有用户列表\n$ w                      ## 显示登录的用户\n$ whoami                 ## 查看当前用户名\n$ finger user            ## 显示user相关信息\n$ uname -a               ## 显示内核信息\n$ cat /proc/cpuinfo      ## 显示cpu信息\n$ cat /proc/meminfo      ## 显示内存信息\n$ man command            ## 显示command 的说明手册\n$ df                     ## 显示磁盘占用\n$ du                     ## 显示目录空间占用\n$ free                   ## 显示内存及交换区占用情况\n```\n### 网络\n```bash\n$ ping host                      ## ping host 并输出结果\n$ nmap host                      ## 扫描网络寻找开放的端口\n$ whois domain                   ## 获取 domain 的 whois 信息\n$ dig domain                     ## 获取 domain 的 DNS 信息\n$ dig -x domain                  ## 逆向查询 host\n$ wget file                      ## 下载file\n$ wget -c file                   ## 断点续传\n$ curl -I http://www.q.com       ## 获取HTTP头信息\n```\n### 安装\n```bash\n$ ./configure\n$ make\n$ make install\n```\n### 搜索\n```bash\n$ grep\n$ find\n```\n","source":"_posts/Linux-common-shells.md","raw":"---\ntitle: Linux 常用命令\ndate: 2016-09-23 19:14:35\ntags:\n  - Linux\n  - Shell\ncategories:\n  - Linux\ndescription:\n  - 整理了一些自己比较常用的命令，后期将持续更新。\n---\n## 前言\n整理了一些自己比较常用的命令，后期将持续更新。\n## 详解\n### 文件命令\n``` bash\n$ ls                 ## 查看目录下的子节点（文件夹和文件）信息  -a:显示隐藏文件  -l:列表显示\n$ pwd                ## 查看当前所在的工作目录的全路径\n$ cd dir             ## 打开目录 - 前一个工作目录 ~ 当前用户目录\n$ rm                 ## 删除文件  -r  删除目录 -f 强制删除文件\n$ cp file1 file2     ## 复制  -r  赋值目录，没有就创建\n$ ln -s file link    ## 创建file的符号连接link\n$ touch file         ## 创建文件\n$ mkdir dir          ## 创建目录\n$ more file          ## 查看file内容\n$ tail -f file       ## 从后10行开始查看file\n$ chmod octal file   ## 更改file权限  777 755\n$ chown              ## 更改文件所有者\n$ Ctrl + W           ## 删除当前行中的字\n$ Ctrl + U           ## 删除整行\n```\n### 进程管理\n```bash\n$ ps            ## 现实当前的活动进程\n$ top           ## 显示所有正在运行的进程\n$ kill pid      ## 杀掉进程 pid\n$ killall proc  ## 杀掉所有名位为 proc 的进程\n$ Ctrl + C      ## 停止当前命令\n$ Ctrl + \\      ## 停止当前命令，当 Ctrl + C 不好用的时候\n$ Ctrl + Z      ## 停止当前命令，并使用 fg 恢复\n$ Ctrl + D      ## 注销当前会话，与 exit 相似\n$ !!            ## 重复上次的命令\n$ fg            ## 将进程转到前台\n$ bg pid        ## 将进程转到前台\n```\n### SSH\n```bash\n$ ssh user@host         ## 以user去登录host   -p 端口 -i key文件 -vvv Debug模式mkdir\n$ ssh-copy-id user@host ## 将密钥添加到host实现无密码登录\n```\n### 系统信息\n```bash\n$ date                   ## 显示当前日期和时间\n$ ntpdate ntp.ubuntu.com ## 与Ubuntu NTP server同步时间\n$ cal                    ## 显示当月日历\n$ uptime                 ## 显示系统从开机到现在所运行的时间\n$ getent passwd          ## 所有用户列表\n$ w                      ## 显示登录的用户\n$ whoami                 ## 查看当前用户名\n$ finger user            ## 显示user相关信息\n$ uname -a               ## 显示内核信息\n$ cat /proc/cpuinfo      ## 显示cpu信息\n$ cat /proc/meminfo      ## 显示内存信息\n$ man command            ## 显示command 的说明手册\n$ df                     ## 显示磁盘占用\n$ du                     ## 显示目录空间占用\n$ free                   ## 显示内存及交换区占用情况\n```\n### 网络\n```bash\n$ ping host                      ## ping host 并输出结果\n$ nmap host                      ## 扫描网络寻找开放的端口\n$ whois domain                   ## 获取 domain 的 whois 信息\n$ dig domain                     ## 获取 domain 的 DNS 信息\n$ dig -x domain                  ## 逆向查询 host\n$ wget file                      ## 下载file\n$ wget -c file                   ## 断点续传\n$ curl -I http://www.q.com       ## 获取HTTP头信息\n```\n### 安装\n```bash\n$ ./configure\n$ make\n$ make install\n```\n### 搜索\n```bash\n$ grep\n$ find\n```\n","slug":"Linux-common-shells","published":1,"updated":"2017-02-12T15:52:39.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciz9wvzfp000ag38k5t18h5s9","content":"<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>整理了一些自己比较常用的命令，后期将持续更新。</p>\n<h2 id=\"详解\"><a href=\"#详解\" class=\"headerlink\" title=\"详解\"></a>详解</h2><h3 id=\"文件命令\"><a href=\"#文件命令\" class=\"headerlink\" title=\"文件命令\"></a>文件命令</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ ls                 <span class=\"comment\">## 查看目录下的子节点（文件夹和文件）信息  -a:显示隐藏文件  -l:列表显示</span></div><div class=\"line\">$ <span class=\"built_in\">pwd</span>                <span class=\"comment\">## 查看当前所在的工作目录的全路径</span></div><div class=\"line\">$ <span class=\"built_in\">cd</span> dir             <span class=\"comment\">## 打开目录 - 前一个工作目录 ~ 当前用户目录</span></div><div class=\"line\">$ rm                 <span class=\"comment\">## 删除文件  -r  删除目录 -f 强制删除文件</span></div><div class=\"line\">$ cp file1 file2     <span class=\"comment\">## 复制  -r  赋值目录，没有就创建</span></div><div class=\"line\">$ ln <span class=\"_\">-s</span> file link    <span class=\"comment\">## 创建file的符号连接link</span></div><div class=\"line\">$ touch file         <span class=\"comment\">## 创建文件</span></div><div class=\"line\">$ mkdir dir          <span class=\"comment\">## 创建目录</span></div><div class=\"line\">$ more file          <span class=\"comment\">## 查看file内容</span></div><div class=\"line\">$ tail <span class=\"_\">-f</span> file       <span class=\"comment\">## 从后10行开始查看file</span></div><div class=\"line\">$ chmod octal file   <span class=\"comment\">## 更改file权限  777 755</span></div><div class=\"line\">$ chown              <span class=\"comment\">## 更改文件所有者</span></div><div class=\"line\">$ Ctrl + W           <span class=\"comment\">## 删除当前行中的字</span></div><div class=\"line\">$ Ctrl + U           <span class=\"comment\">## 删除整行</span></div></pre></td></tr></table></figure>\n<h3 id=\"进程管理\"><a href=\"#进程管理\" class=\"headerlink\" title=\"进程管理\"></a>进程管理</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ ps            <span class=\"comment\">## 现实当前的活动进程</span></div><div class=\"line\">$ top           <span class=\"comment\">## 显示所有正在运行的进程</span></div><div class=\"line\">$ <span class=\"built_in\">kill</span> pid      <span class=\"comment\">## 杀掉进程 pid</span></div><div class=\"line\">$ killall proc  <span class=\"comment\">## 杀掉所有名位为 proc 的进程</span></div><div class=\"line\">$ Ctrl + C      <span class=\"comment\">## 停止当前命令</span></div><div class=\"line\">$ Ctrl + \\      <span class=\"comment\">## 停止当前命令，当 Ctrl + C 不好用的时候</span></div><div class=\"line\">$ Ctrl + Z      <span class=\"comment\">## 停止当前命令，并使用 fg 恢复</span></div><div class=\"line\">$ Ctrl + D      <span class=\"comment\">## 注销当前会话，与 exit 相似</span></div><div class=\"line\">$ !!            <span class=\"comment\">## 重复上次的命令</span></div><div class=\"line\">$ <span class=\"built_in\">fg</span>            <span class=\"comment\">## 将进程转到前台</span></div><div class=\"line\">$ <span class=\"built_in\">bg</span> pid        <span class=\"comment\">## 将进程转到前台</span></div></pre></td></tr></table></figure>\n<h3 id=\"SSH\"><a href=\"#SSH\" class=\"headerlink\" title=\"SSH\"></a>SSH</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ ssh user@host         <span class=\"comment\">## 以user去登录host   -p 端口 -i key文件 -vvv Debug模式mkdir</span></div><div class=\"line\">$ ssh-copy-id user@host <span class=\"comment\">## 将密钥添加到host实现无密码登录</span></div></pre></td></tr></table></figure>\n<h3 id=\"系统信息\"><a href=\"#系统信息\" class=\"headerlink\" title=\"系统信息\"></a>系统信息</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ date                   <span class=\"comment\">## 显示当前日期和时间</span></div><div class=\"line\">$ ntpdate ntp.ubuntu.com <span class=\"comment\">## 与Ubuntu NTP server同步时间</span></div><div class=\"line\">$ cal                    <span class=\"comment\">## 显示当月日历</span></div><div class=\"line\">$ uptime                 <span class=\"comment\">## 显示系统从开机到现在所运行的时间</span></div><div class=\"line\">$ getent passwd          <span class=\"comment\">## 所有用户列表</span></div><div class=\"line\">$ w                      <span class=\"comment\">## 显示登录的用户</span></div><div class=\"line\">$ whoami                 <span class=\"comment\">## 查看当前用户名</span></div><div class=\"line\">$ finger user            <span class=\"comment\">## 显示user相关信息</span></div><div class=\"line\">$ uname <span class=\"_\">-a</span>               <span class=\"comment\">## 显示内核信息</span></div><div class=\"line\">$ cat /proc/cpuinfo      <span class=\"comment\">## 显示cpu信息</span></div><div class=\"line\">$ cat /proc/meminfo      <span class=\"comment\">## 显示内存信息</span></div><div class=\"line\">$ man <span class=\"built_in\">command</span>            <span class=\"comment\">## 显示command 的说明手册</span></div><div class=\"line\">$ df                     <span class=\"comment\">## 显示磁盘占用</span></div><div class=\"line\">$ du                     <span class=\"comment\">## 显示目录空间占用</span></div><div class=\"line\">$ free                   <span class=\"comment\">## 显示内存及交换区占用情况</span></div></pre></td></tr></table></figure>\n<h3 id=\"网络\"><a href=\"#网络\" class=\"headerlink\" title=\"网络\"></a>网络</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ ping host                      <span class=\"comment\">## ping host 并输出结果</span></div><div class=\"line\">$ nmap host                      <span class=\"comment\">## 扫描网络寻找开放的端口</span></div><div class=\"line\">$ whois domain                   <span class=\"comment\">## 获取 domain 的 whois 信息</span></div><div class=\"line\">$ dig domain                     <span class=\"comment\">## 获取 domain 的 DNS 信息</span></div><div class=\"line\">$ dig -x domain                  <span class=\"comment\">## 逆向查询 host</span></div><div class=\"line\">$ wget file                      <span class=\"comment\">## 下载file</span></div><div class=\"line\">$ wget -c file                   <span class=\"comment\">## 断点续传</span></div><div class=\"line\">$ curl -I http://www.q.com       <span class=\"comment\">## 获取HTTP头信息</span></div></pre></td></tr></table></figure>\n<h3 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ ./configure</div><div class=\"line\">$ make</div><div class=\"line\">$ make install</div></pre></td></tr></table></figure>\n<h3 id=\"搜索\"><a href=\"#搜索\" class=\"headerlink\" title=\"搜索\"></a>搜索</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ grep</div><div class=\"line\">$ find</div></pre></td></tr></table></figure>\n","excerpt":"","more":"<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>整理了一些自己比较常用的命令，后期将持续更新。</p>\n<h2 id=\"详解\"><a href=\"#详解\" class=\"headerlink\" title=\"详解\"></a>详解</h2><h3 id=\"文件命令\"><a href=\"#文件命令\" class=\"headerlink\" title=\"文件命令\"></a>文件命令</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ ls                 <span class=\"comment\">## 查看目录下的子节点（文件夹和文件）信息  -a:显示隐藏文件  -l:列表显示</span></div><div class=\"line\">$ <span class=\"built_in\">pwd</span>                <span class=\"comment\">## 查看当前所在的工作目录的全路径</span></div><div class=\"line\">$ <span class=\"built_in\">cd</span> dir             <span class=\"comment\">## 打开目录 - 前一个工作目录 ~ 当前用户目录</span></div><div class=\"line\">$ rm                 <span class=\"comment\">## 删除文件  -r  删除目录 -f 强制删除文件</span></div><div class=\"line\">$ cp file1 file2     <span class=\"comment\">## 复制  -r  赋值目录，没有就创建</span></div><div class=\"line\">$ ln <span class=\"_\">-s</span> file link    <span class=\"comment\">## 创建file的符号连接link</span></div><div class=\"line\">$ touch file         <span class=\"comment\">## 创建文件</span></div><div class=\"line\">$ mkdir dir          <span class=\"comment\">## 创建目录</span></div><div class=\"line\">$ more file          <span class=\"comment\">## 查看file内容</span></div><div class=\"line\">$ tail <span class=\"_\">-f</span> file       <span class=\"comment\">## 从后10行开始查看file</span></div><div class=\"line\">$ chmod octal file   <span class=\"comment\">## 更改file权限  777 755</span></div><div class=\"line\">$ chown              <span class=\"comment\">## 更改文件所有者</span></div><div class=\"line\">$ Ctrl + W           <span class=\"comment\">## 删除当前行中的字</span></div><div class=\"line\">$ Ctrl + U           <span class=\"comment\">## 删除整行</span></div></pre></td></tr></table></figure>\n<h3 id=\"进程管理\"><a href=\"#进程管理\" class=\"headerlink\" title=\"进程管理\"></a>进程管理</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ ps            <span class=\"comment\">## 现实当前的活动进程</span></div><div class=\"line\">$ top           <span class=\"comment\">## 显示所有正在运行的进程</span></div><div class=\"line\">$ <span class=\"built_in\">kill</span> pid      <span class=\"comment\">## 杀掉进程 pid</span></div><div class=\"line\">$ killall proc  <span class=\"comment\">## 杀掉所有名位为 proc 的进程</span></div><div class=\"line\">$ Ctrl + C      <span class=\"comment\">## 停止当前命令</span></div><div class=\"line\">$ Ctrl + \\      <span class=\"comment\">## 停止当前命令，当 Ctrl + C 不好用的时候</span></div><div class=\"line\">$ Ctrl + Z      <span class=\"comment\">## 停止当前命令，并使用 fg 恢复</span></div><div class=\"line\">$ Ctrl + D      <span class=\"comment\">## 注销当前会话，与 exit 相似</span></div><div class=\"line\">$ !!            <span class=\"comment\">## 重复上次的命令</span></div><div class=\"line\">$ <span class=\"built_in\">fg</span>            <span class=\"comment\">## 将进程转到前台</span></div><div class=\"line\">$ <span class=\"built_in\">bg</span> pid        <span class=\"comment\">## 将进程转到前台</span></div></pre></td></tr></table></figure>\n<h3 id=\"SSH\"><a href=\"#SSH\" class=\"headerlink\" title=\"SSH\"></a>SSH</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ ssh user@host         <span class=\"comment\">## 以user去登录host   -p 端口 -i key文件 -vvv Debug模式mkdir</span></div><div class=\"line\">$ ssh-copy-id user@host <span class=\"comment\">## 将密钥添加到host实现无密码登录</span></div></pre></td></tr></table></figure>\n<h3 id=\"系统信息\"><a href=\"#系统信息\" class=\"headerlink\" title=\"系统信息\"></a>系统信息</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ date                   <span class=\"comment\">## 显示当前日期和时间</span></div><div class=\"line\">$ ntpdate ntp.ubuntu.com <span class=\"comment\">## 与Ubuntu NTP server同步时间</span></div><div class=\"line\">$ cal                    <span class=\"comment\">## 显示当月日历</span></div><div class=\"line\">$ uptime                 <span class=\"comment\">## 显示系统从开机到现在所运行的时间</span></div><div class=\"line\">$ getent passwd          <span class=\"comment\">## 所有用户列表</span></div><div class=\"line\">$ w                      <span class=\"comment\">## 显示登录的用户</span></div><div class=\"line\">$ whoami                 <span class=\"comment\">## 查看当前用户名</span></div><div class=\"line\">$ finger user            <span class=\"comment\">## 显示user相关信息</span></div><div class=\"line\">$ uname <span class=\"_\">-a</span>               <span class=\"comment\">## 显示内核信息</span></div><div class=\"line\">$ cat /proc/cpuinfo      <span class=\"comment\">## 显示cpu信息</span></div><div class=\"line\">$ cat /proc/meminfo      <span class=\"comment\">## 显示内存信息</span></div><div class=\"line\">$ man <span class=\"built_in\">command</span>            <span class=\"comment\">## 显示command 的说明手册</span></div><div class=\"line\">$ df                     <span class=\"comment\">## 显示磁盘占用</span></div><div class=\"line\">$ du                     <span class=\"comment\">## 显示目录空间占用</span></div><div class=\"line\">$ free                   <span class=\"comment\">## 显示内存及交换区占用情况</span></div></pre></td></tr></table></figure>\n<h3 id=\"网络\"><a href=\"#网络\" class=\"headerlink\" title=\"网络\"></a>网络</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ ping host                      <span class=\"comment\">## ping host 并输出结果</span></div><div class=\"line\">$ nmap host                      <span class=\"comment\">## 扫描网络寻找开放的端口</span></div><div class=\"line\">$ whois domain                   <span class=\"comment\">## 获取 domain 的 whois 信息</span></div><div class=\"line\">$ dig domain                     <span class=\"comment\">## 获取 domain 的 DNS 信息</span></div><div class=\"line\">$ dig -x domain                  <span class=\"comment\">## 逆向查询 host</span></div><div class=\"line\">$ wget file                      <span class=\"comment\">## 下载file</span></div><div class=\"line\">$ wget -c file                   <span class=\"comment\">## 断点续传</span></div><div class=\"line\">$ curl -I http://www.q.com       <span class=\"comment\">## 获取HTTP头信息</span></div></pre></td></tr></table></figure>\n<h3 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ ./configure</div><div class=\"line\">$ make</div><div class=\"line\">$ make install</div></pre></td></tr></table></figure>\n<h3 id=\"搜索\"><a href=\"#搜索\" class=\"headerlink\" title=\"搜索\"></a>搜索</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ grep</div><div class=\"line\">$ find</div></pre></td></tr></table></figure>\n"},{"title":"PHP 注意事项","date":"2016-10-20T03:08:57.000Z","description":"整理了一些平时在PHP开发过程中一些需要注意的东西，它们可以在一定程度上使程序运行的更快，更稳定。","_content":"## Tips\n1. #### 尽量静态化\n    如果函数可以静态化，就尽量静态化。\n  区别主要体现是内存的处理上，静态方法在程序开始的时候分配内存，而实例方法在实例化的时候才会分配内存。\n  静态方法可以直接调用，而实例方法要先生成实例，在通过实例调用。\n \n   > 静态方法过多，会占用内存\n    \n1. #### echo VS print\n   echo的性能高于print，因为echo没有返回值，而print返回一个整型\n   > echo 大字符串的时候需要在服务器进行对应的配置 \n   \n1. #### echo 多个字符串\n   echo 多个字符串是采用`,`代替`.`来连接字符串\n  \n1.  #### @ 错误屏蔽\n    用 @ 掩盖错误会降低脚本运行速度，特别是不要在循环中使用@。\n    \n1. #### $row['id'] & $row[id] & $row[1]\n    `'id'`会直接查找key为`'id'`d的值，而没有引号如变量、常量在解析的时候会先判断类型在取值。\n    \n1. #### isset() & empty()\n   isset()是测试变量是否被赋值。\n   empty()是测试变量是否为空，该变量已经赋值。如果变量没被赋值就引用是被允许的,但会有notice提示。\n   > 如果变量被赋予空值 `$t = \"\"; $t = 0; $t = false;`，`empty($t)`返回真，`isset($t)`也返回真。\n   > 如果要注销一个变量采用 `unset($t)` `$t = NULL`\n   \n1. #### 循环前确认最大次数\n    在执行for循环前确认最大字数，不要每次循环的时候都重新计算最大值。\n    ```php\n    //不要这样做\n    for ($i=0;$i<=count($array);$i++){\n    }\n\n    //应该这样做\n    $len = count($array);\n    for ($i=0;$i<=$len;$i++){\n    }\n    ```\n1. #### include() & include_once() & require() & require_once()\n   功能是一致的都是加载文件，`_once`是在加载文件前判断该文件是否已经被加载过了，避免重复加载。\n   主要区别\n   * 错误处理机制\n      * `require()` 如果不存在文件时，会抛出`fatal error`脚本终止运行。\n      * `include()` 如果不存在文件时，会抛出`warning`但脚本继续运行。\n   * 性能\n     * `require()` 文件只处理一次 (实际上，文件内容替换了require()语句)。\n     * `include()` 执行时文件每次都要进行读取和评估。\n     如果有包含这些指令之一的代码和可能执行多次的代码，则使用`require()`效率比较高。\n   * 使用弹性\n     *  `require()` 通常放在脚本的最前面，脚本在执行前，会先载入所指定引入的文件，使它变成脚本的一部份。\n     *  `include()` 通常放在流程控制的处理区段中。脚本在读到文件时，才将它载进来。这种方式，可以把执行时的流程简单化。\n    \n    > 包含文件时使用完整路径，减少解析路径所需的时间。\n    \n1. #### ' ' & \" \"\n    PHP 允许使用单引号和双引号来封装字符串变量。\n    `\" \"` 先读取字符串内容，再查找其中的变量，并进行赋值。\n    \n1. #### 不要随便复制变量\n    把变量复制到另一个变量会增加一倍的内存消耗。\n    \n1. #### if else & switch case\n    switch case好于使用多个if，else if语句，并且代码更加容易阅读和维护。\n    \n1. #### 并不是事必面向对象\n    面向对象往往开销很大，每个方法和对象的调用都会消耗内存。\n    \n1. #### 不要把方法细分得过多\n    每个方法的调用都会消耗内存。\n    \n1. #### 尽量采用的PHP内置函数\n\n1. #### 循环内部不要声明变量，尤其是大变量：对象\n\n1. #### 销毁变量释放内存，特别是大的数组\n\n1. #### 字符串函数代替正则表达式。\n1. #### split比exploade快","source":"_posts/PHP-Matters-Needing-Attention.md","raw":"---\ntitle: PHP 注意事项\ndate: 2016-10-20 11:08:57\ntags:\n  -  PHP\n  -  Tips\ncategories:\n  - PHP\ndescription: 整理了一些平时在PHP开发过程中一些需要注意的东西，它们可以在一定程度上使程序运行的更快，更稳定。\n---\n## Tips\n1. #### 尽量静态化\n    如果函数可以静态化，就尽量静态化。\n  区别主要体现是内存的处理上，静态方法在程序开始的时候分配内存，而实例方法在实例化的时候才会分配内存。\n  静态方法可以直接调用，而实例方法要先生成实例，在通过实例调用。\n \n   > 静态方法过多，会占用内存\n    \n1. #### echo VS print\n   echo的性能高于print，因为echo没有返回值，而print返回一个整型\n   > echo 大字符串的时候需要在服务器进行对应的配置 \n   \n1. #### echo 多个字符串\n   echo 多个字符串是采用`,`代替`.`来连接字符串\n  \n1.  #### @ 错误屏蔽\n    用 @ 掩盖错误会降低脚本运行速度，特别是不要在循环中使用@。\n    \n1. #### $row['id'] & $row[id] & $row[1]\n    `'id'`会直接查找key为`'id'`d的值，而没有引号如变量、常量在解析的时候会先判断类型在取值。\n    \n1. #### isset() & empty()\n   isset()是测试变量是否被赋值。\n   empty()是测试变量是否为空，该变量已经赋值。如果变量没被赋值就引用是被允许的,但会有notice提示。\n   > 如果变量被赋予空值 `$t = \"\"; $t = 0; $t = false;`，`empty($t)`返回真，`isset($t)`也返回真。\n   > 如果要注销一个变量采用 `unset($t)` `$t = NULL`\n   \n1. #### 循环前确认最大次数\n    在执行for循环前确认最大字数，不要每次循环的时候都重新计算最大值。\n    ```php\n    //不要这样做\n    for ($i=0;$i<=count($array);$i++){\n    }\n\n    //应该这样做\n    $len = count($array);\n    for ($i=0;$i<=$len;$i++){\n    }\n    ```\n1. #### include() & include_once() & require() & require_once()\n   功能是一致的都是加载文件，`_once`是在加载文件前判断该文件是否已经被加载过了，避免重复加载。\n   主要区别\n   * 错误处理机制\n      * `require()` 如果不存在文件时，会抛出`fatal error`脚本终止运行。\n      * `include()` 如果不存在文件时，会抛出`warning`但脚本继续运行。\n   * 性能\n     * `require()` 文件只处理一次 (实际上，文件内容替换了require()语句)。\n     * `include()` 执行时文件每次都要进行读取和评估。\n     如果有包含这些指令之一的代码和可能执行多次的代码，则使用`require()`效率比较高。\n   * 使用弹性\n     *  `require()` 通常放在脚本的最前面，脚本在执行前，会先载入所指定引入的文件，使它变成脚本的一部份。\n     *  `include()` 通常放在流程控制的处理区段中。脚本在读到文件时，才将它载进来。这种方式，可以把执行时的流程简单化。\n    \n    > 包含文件时使用完整路径，减少解析路径所需的时间。\n    \n1. #### ' ' & \" \"\n    PHP 允许使用单引号和双引号来封装字符串变量。\n    `\" \"` 先读取字符串内容，再查找其中的变量，并进行赋值。\n    \n1. #### 不要随便复制变量\n    把变量复制到另一个变量会增加一倍的内存消耗。\n    \n1. #### if else & switch case\n    switch case好于使用多个if，else if语句，并且代码更加容易阅读和维护。\n    \n1. #### 并不是事必面向对象\n    面向对象往往开销很大，每个方法和对象的调用都会消耗内存。\n    \n1. #### 不要把方法细分得过多\n    每个方法的调用都会消耗内存。\n    \n1. #### 尽量采用的PHP内置函数\n\n1. #### 循环内部不要声明变量，尤其是大变量：对象\n\n1. #### 销毁变量释放内存，特别是大的数组\n\n1. #### 字符串函数代替正则表达式。\n1. #### split比exploade快","slug":"PHP-Matters-Needing-Attention","published":1,"updated":"2017-02-12T15:52:39.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciz9wvzfu000cg38k19woh5ps","content":"<h2 id=\"Tips\"><a href=\"#Tips\" class=\"headerlink\" title=\"Tips\"></a>Tips</h2><ol>\n<li><h4 id=\"尽量静态化\"><a href=\"#尽量静态化\" class=\"headerlink\" title=\"尽量静态化\"></a>尽量静态化</h4><p> 如果函数可以静态化，就尽量静态化。<br>区别主要体现是内存的处理上，静态方法在程序开始的时候分配内存，而实例方法在实例化的时候才会分配内存。<br>静态方法可以直接调用，而实例方法要先生成实例，在通过实例调用。</p>\n<blockquote>\n<p>静态方法过多，会占用内存</p>\n</blockquote>\n</li>\n<li><h4 id=\"echo-VS-print\"><a href=\"#echo-VS-print\" class=\"headerlink\" title=\"echo VS print\"></a>echo VS print</h4><p>echo的性能高于print，因为echo没有返回值，而print返回一个整型</p>\n<blockquote>\n<p>echo 大字符串的时候需要在服务器进行对应的配置 </p>\n</blockquote>\n</li>\n<li><h4 id=\"echo-多个字符串\"><a href=\"#echo-多个字符串\" class=\"headerlink\" title=\"echo 多个字符串\"></a>echo 多个字符串</h4><p>echo 多个字符串是采用<code>,</code>代替<code>.</code>来连接字符串</p>\n</li>\n<li><h4 id=\"错误屏蔽\"><a href=\"#错误屏蔽\" class=\"headerlink\" title=\"@ 错误屏蔽\"></a>@ 错误屏蔽</h4><p>用 @ 掩盖错误会降低脚本运行速度，特别是不要在循环中使用@。</p>\n</li>\n<li><h4 id=\"row-‘id’-amp-row-id-amp-row-1\"><a href=\"#row-‘id’-amp-row-id-amp-row-1\" class=\"headerlink\" title=\"$row[‘id’] &amp; $row[id] &amp; $row[1]\"></a>$row[‘id’] &amp; $row[id] &amp; $row[1]</h4><p> <code>&#39;id&#39;</code>会直接查找key为<code>&#39;id&#39;</code>d的值，而没有引号如变量、常量在解析的时候会先判断类型在取值。</p>\n</li>\n<li><h4 id=\"isset-amp-empty\"><a href=\"#isset-amp-empty\" class=\"headerlink\" title=\"isset() &amp; empty()\"></a>isset() &amp; empty()</h4><p>isset()是测试变量是否被赋值。<br>empty()是测试变量是否为空，该变量已经赋值。如果变量没被赋值就引用是被允许的,但会有notice提示。</p>\n<blockquote>\n<p>如果变量被赋予空值 <code>$t = &quot;&quot;; $t = 0; $t = false;</code>，<code>empty($t)</code>返回真，<code>isset($t)</code>也返回真。<br>如果要注销一个变量采用 <code>unset($t)</code> <code>$t = NULL</code></p>\n</blockquote>\n</li>\n<li><h4 id=\"循环前确认最大次数\"><a href=\"#循环前确认最大次数\" class=\"headerlink\" title=\"循环前确认最大次数\"></a>循环前确认最大次数</h4><p> 在执行for循环前确认最大字数，不要每次循环的时候都重新计算最大值。</p>\n <figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//不要这样做</span></div><div class=\"line\"><span class=\"keyword\">for</span> ($i=<span class=\"number\">0</span>;$i&lt;=count($array);$i++)&#123;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//应该这样做</span></div><div class=\"line\">$len = count($array);</div><div class=\"line\"><span class=\"keyword\">for</span> ($i=<span class=\"number\">0</span>;$i&lt;=$len;$i++)&#123;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n</li>\n<li><h4 id=\"include-amp-include-once-amp-require-amp-require-once\"><a href=\"#include-amp-include-once-amp-require-amp-require-once\" class=\"headerlink\" title=\"include() &amp; include_once() &amp; require() &amp; require_once()\"></a>include() &amp; include_once() &amp; require() &amp; require_once()</h4><p>功能是一致的都是加载文件，<code>_once</code>是在加载文件前判断该文件是否已经被加载过了，避免重复加载。<br>主要区别</p>\n<ul>\n<li>错误处理机制<ul>\n<li><code>require()</code> 如果不存在文件时，会抛出<code>fatal error</code>脚本终止运行。</li>\n<li><code>include()</code> 如果不存在文件时，会抛出<code>warning</code>但脚本继续运行。</li>\n</ul>\n</li>\n<li>性能<ul>\n<li><code>require()</code> 文件只处理一次 (实际上，文件内容替换了require()语句)。</li>\n<li><code>include()</code> 执行时文件每次都要进行读取和评估。<br>如果有包含这些指令之一的代码和可能执行多次的代码，则使用<code>require()</code>效率比较高。</li>\n</ul>\n</li>\n<li><p>使用弹性</p>\n<ul>\n<li><code>require()</code> 通常放在脚本的最前面，脚本在执行前，会先载入所指定引入的文件，使它变成脚本的一部份。</li>\n<li><code>include()</code> 通常放在流程控制的处理区段中。脚本在读到文件时，才将它载进来。这种方式，可以把执行时的流程简单化。</li>\n</ul>\n<blockquote>\n<p>包含文件时使用完整路径，减少解析路径所需的时间。</p>\n</blockquote>\n</li>\n</ul>\n</li>\n<li><h4 id=\"‘-‘-amp-“-“\"><a href=\"#‘-‘-amp-“-“\" class=\"headerlink\" title=\"‘ ‘ &amp; “ “\"></a>‘ ‘ &amp; “ “</h4><p> PHP 允许使用单引号和双引号来封装字符串变量。<br> <code>&quot; &quot;</code> 先读取字符串内容，再查找其中的变量，并进行赋值。</p>\n</li>\n<li><h4 id=\"不要随便复制变量\"><a href=\"#不要随便复制变量\" class=\"headerlink\" title=\"不要随便复制变量\"></a>不要随便复制变量</h4><p> 把变量复制到另一个变量会增加一倍的内存消耗。</p>\n</li>\n<li><h4 id=\"if-else-amp-switch-case\"><a href=\"#if-else-amp-switch-case\" class=\"headerlink\" title=\"if else &amp; switch case\"></a>if else &amp; switch case</h4><p> switch case好于使用多个if，else if语句，并且代码更加容易阅读和维护。</p>\n</li>\n<li><h4 id=\"并不是事必面向对象\"><a href=\"#并不是事必面向对象\" class=\"headerlink\" title=\"并不是事必面向对象\"></a>并不是事必面向对象</h4><p> 面向对象往往开销很大，每个方法和对象的调用都会消耗内存。</p>\n</li>\n<li><h4 id=\"不要把方法细分得过多\"><a href=\"#不要把方法细分得过多\" class=\"headerlink\" title=\"不要把方法细分得过多\"></a>不要把方法细分得过多</h4><p> 每个方法的调用都会消耗内存。</p>\n</li>\n<li><h4 id=\"尽量采用的PHP内置函数\"><a href=\"#尽量采用的PHP内置函数\" class=\"headerlink\" title=\"尽量采用的PHP内置函数\"></a>尽量采用的PHP内置函数</h4></li>\n<li><h4 id=\"循环内部不要声明变量，尤其是大变量：对象\"><a href=\"#循环内部不要声明变量，尤其是大变量：对象\" class=\"headerlink\" title=\"循环内部不要声明变量，尤其是大变量：对象\"></a>循环内部不要声明变量，尤其是大变量：对象</h4></li>\n<li><h4 id=\"销毁变量释放内存，特别是大的数组\"><a href=\"#销毁变量释放内存，特别是大的数组\" class=\"headerlink\" title=\"销毁变量释放内存，特别是大的数组\"></a>销毁变量释放内存，特别是大的数组</h4></li>\n<li><h4 id=\"字符串函数代替正则表达式。\"><a href=\"#字符串函数代替正则表达式。\" class=\"headerlink\" title=\"字符串函数代替正则表达式。\"></a>字符串函数代替正则表达式。</h4></li>\n<li><h4 id=\"split比exploade快\"><a href=\"#split比exploade快\" class=\"headerlink\" title=\"split比exploade快\"></a>split比exploade快</h4></li>\n</ol>\n","excerpt":"","more":"<h2 id=\"Tips\"><a href=\"#Tips\" class=\"headerlink\" title=\"Tips\"></a>Tips</h2><ol>\n<li><h4 id=\"尽量静态化\"><a href=\"#尽量静态化\" class=\"headerlink\" title=\"尽量静态化\"></a>尽量静态化</h4><p> 如果函数可以静态化，就尽量静态化。<br>区别主要体现是内存的处理上，静态方法在程序开始的时候分配内存，而实例方法在实例化的时候才会分配内存。<br>静态方法可以直接调用，而实例方法要先生成实例，在通过实例调用。</p>\n<blockquote>\n<p>静态方法过多，会占用内存</p>\n</blockquote>\n</li>\n<li><h4 id=\"echo-VS-print\"><a href=\"#echo-VS-print\" class=\"headerlink\" title=\"echo VS print\"></a>echo VS print</h4><p>echo的性能高于print，因为echo没有返回值，而print返回一个整型</p>\n<blockquote>\n<p>echo 大字符串的时候需要在服务器进行对应的配置 </p>\n</blockquote>\n</li>\n<li><h4 id=\"echo-多个字符串\"><a href=\"#echo-多个字符串\" class=\"headerlink\" title=\"echo 多个字符串\"></a>echo 多个字符串</h4><p>echo 多个字符串是采用<code>,</code>代替<code>.</code>来连接字符串</p>\n</li>\n<li><h4 id=\"错误屏蔽\"><a href=\"#错误屏蔽\" class=\"headerlink\" title=\"@ 错误屏蔽\"></a>@ 错误屏蔽</h4><p>用 @ 掩盖错误会降低脚本运行速度，特别是不要在循环中使用@。</p>\n</li>\n<li><h4 id=\"row-‘id’-amp-row-id-amp-row-1\"><a href=\"#row-‘id’-amp-row-id-amp-row-1\" class=\"headerlink\" title=\"$row[‘id’] &amp; $row[id] &amp; $row[1]\"></a>$row[‘id’] &amp; $row[id] &amp; $row[1]</h4><p> <code>&#39;id&#39;</code>会直接查找key为<code>&#39;id&#39;</code>d的值，而没有引号如变量、常量在解析的时候会先判断类型在取值。</p>\n</li>\n<li><h4 id=\"isset-amp-empty\"><a href=\"#isset-amp-empty\" class=\"headerlink\" title=\"isset() &amp; empty()\"></a>isset() &amp; empty()</h4><p>isset()是测试变量是否被赋值。<br>empty()是测试变量是否为空，该变量已经赋值。如果变量没被赋值就引用是被允许的,但会有notice提示。</p>\n<blockquote>\n<p>如果变量被赋予空值 <code>$t = &quot;&quot;; $t = 0; $t = false;</code>，<code>empty($t)</code>返回真，<code>isset($t)</code>也返回真。<br>如果要注销一个变量采用 <code>unset($t)</code> <code>$t = NULL</code></p>\n</blockquote>\n</li>\n<li><h4 id=\"循环前确认最大次数\"><a href=\"#循环前确认最大次数\" class=\"headerlink\" title=\"循环前确认最大次数\"></a>循环前确认最大次数</h4><p> 在执行for循环前确认最大字数，不要每次循环的时候都重新计算最大值。</p>\n <figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//不要这样做</span></div><div class=\"line\"><span class=\"keyword\">for</span> ($i=<span class=\"number\">0</span>;$i&lt;=count($array);$i++)&#123;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//应该这样做</span></div><div class=\"line\">$len = count($array);</div><div class=\"line\"><span class=\"keyword\">for</span> ($i=<span class=\"number\">0</span>;$i&lt;=$len;$i++)&#123;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n</li>\n<li><h4 id=\"include-amp-include-once-amp-require-amp-require-once\"><a href=\"#include-amp-include-once-amp-require-amp-require-once\" class=\"headerlink\" title=\"include() &amp; include_once() &amp; require() &amp; require_once()\"></a>include() &amp; include_once() &amp; require() &amp; require_once()</h4><p>功能是一致的都是加载文件，<code>_once</code>是在加载文件前判断该文件是否已经被加载过了，避免重复加载。<br>主要区别</p>\n<ul>\n<li>错误处理机制<ul>\n<li><code>require()</code> 如果不存在文件时，会抛出<code>fatal error</code>脚本终止运行。</li>\n<li><code>include()</code> 如果不存在文件时，会抛出<code>warning</code>但脚本继续运行。</li>\n</ul>\n</li>\n<li>性能<ul>\n<li><code>require()</code> 文件只处理一次 (实际上，文件内容替换了require()语句)。</li>\n<li><code>include()</code> 执行时文件每次都要进行读取和评估。<br>如果有包含这些指令之一的代码和可能执行多次的代码，则使用<code>require()</code>效率比较高。</li>\n</ul>\n</li>\n<li><p>使用弹性</p>\n<ul>\n<li><code>require()</code> 通常放在脚本的最前面，脚本在执行前，会先载入所指定引入的文件，使它变成脚本的一部份。</li>\n<li><code>include()</code> 通常放在流程控制的处理区段中。脚本在读到文件时，才将它载进来。这种方式，可以把执行时的流程简单化。</li>\n</ul>\n<blockquote>\n<p>包含文件时使用完整路径，减少解析路径所需的时间。</p>\n</blockquote>\n</li>\n</ul>\n</li>\n<li><h4 id=\"‘-‘-amp-“-“\"><a href=\"#‘-‘-amp-“-“\" class=\"headerlink\" title=\"‘ ‘ &amp; “ “\"></a>‘ ‘ &amp; “ “</h4><p> PHP 允许使用单引号和双引号来封装字符串变量。<br> <code>&quot; &quot;</code> 先读取字符串内容，再查找其中的变量，并进行赋值。</p>\n</li>\n<li><h4 id=\"不要随便复制变量\"><a href=\"#不要随便复制变量\" class=\"headerlink\" title=\"不要随便复制变量\"></a>不要随便复制变量</h4><p> 把变量复制到另一个变量会增加一倍的内存消耗。</p>\n</li>\n<li><h4 id=\"if-else-amp-switch-case\"><a href=\"#if-else-amp-switch-case\" class=\"headerlink\" title=\"if else &amp; switch case\"></a>if else &amp; switch case</h4><p> switch case好于使用多个if，else if语句，并且代码更加容易阅读和维护。</p>\n</li>\n<li><h4 id=\"并不是事必面向对象\"><a href=\"#并不是事必面向对象\" class=\"headerlink\" title=\"并不是事必面向对象\"></a>并不是事必面向对象</h4><p> 面向对象往往开销很大，每个方法和对象的调用都会消耗内存。</p>\n</li>\n<li><h4 id=\"不要把方法细分得过多\"><a href=\"#不要把方法细分得过多\" class=\"headerlink\" title=\"不要把方法细分得过多\"></a>不要把方法细分得过多</h4><p> 每个方法的调用都会消耗内存。</p>\n</li>\n<li><h4 id=\"尽量采用的PHP内置函数\"><a href=\"#尽量采用的PHP内置函数\" class=\"headerlink\" title=\"尽量采用的PHP内置函数\"></a>尽量采用的PHP内置函数</h4></li>\n<li><h4 id=\"循环内部不要声明变量，尤其是大变量：对象\"><a href=\"#循环内部不要声明变量，尤其是大变量：对象\" class=\"headerlink\" title=\"循环内部不要声明变量，尤其是大变量：对象\"></a>循环内部不要声明变量，尤其是大变量：对象</h4></li>\n<li><h4 id=\"销毁变量释放内存，特别是大的数组\"><a href=\"#销毁变量释放内存，特别是大的数组\" class=\"headerlink\" title=\"销毁变量释放内存，特别是大的数组\"></a>销毁变量释放内存，特别是大的数组</h4></li>\n<li><h4 id=\"字符串函数代替正则表达式。\"><a href=\"#字符串函数代替正则表达式。\" class=\"headerlink\" title=\"字符串函数代替正则表达式。\"></a>字符串函数代替正则表达式。</h4></li>\n<li><h4 id=\"split比exploade快\"><a href=\"#split比exploade快\" class=\"headerlink\" title=\"split比exploade快\"></a>split比exploade快</h4></li>\n</ol>\n"},{"title":"Siege 简介","date":"2016-10-24T06:46:29.000Z","description":"简单的介绍下压力测试工具 Siege 的参数","_content":"## 前言\n  [Siege](https://github.com/JoeDog/siege 'SIege') 是Linux 下一款压力测试和评测工具，设计用于 WEB 开发这评估应用在压力下的承受能力；可以配置针对一个 WEB 站点进行多用户的并发访问，记录每个用户所有请求过程的响应时间，并在一定数量的并发访问下重复进行。支持多链接，支持 GET 和 POST 请求。\n  \n## 安装\n * Mac OSX\n   ```bash\n    brew install siege\n   ```\n * Ubuntu\n   ```bash\n    aptitude install siege\n   ```\n\n## 参数介绍 \n```bash  \n-c:  模拟有Ｎ个用户在并发访问 \n\n-r:  重复测试运行Ｎ次 \n-t:  持续测试时间   默认为分钟   5s(持续5秒)  5 (持续5分钟)\n# -r和-t一般不同时使用\n\n-f:  任务的URL列表  \n-i:   随机访问-f指定的url.txt中的url列表项，以此模拟真实的访问情况(随机性)  \n\n-b:  进行压力测试，请求无需等待   delay=0\n\n-A:  指定访问的 User-Agent \n-H:  指定访问的 Header\n-T:  指定访问的 Content-Type\n```\n > ` siege -c 200 -r 100 http://www.google.com `\n > `siege  -c 200 -r 100 -f urls.txt`\n > `siege  -c 200 -r 100 -f urls.txt -i `\n > `siege -c 200 -r 100 -f urls.txt -i -b` delay=0，更准确的压力测试，而不是功能测试\n > `siege -H \"Content-Type:application/json\" -c 200 -r 100 -f urls.txt -i -b`\n\n## 结果说明\n \n  ```bash\n  Transactions:\t\t            20 hits            # 总共测试测试\n  Availability:\t\t            100.00 %           # 成功次数比\n  Elapsed time:\t\t            1.52 secs          # 总共耗时\n  Data transferred:\t            0.80 MB            # 总共数据传输\n  Response time:\t\t            0.14 secs          # 响应耗时\n  Transaction rate:\t            13.16 trans/sec    #  每秒处理请求数\n  Throughput:\t\t            0.52 MB/sec        # 吞吐率\n  Concurrency:\t\t            1.82               # 最高并发\n  Successful transactions:            20                 # 成功请求数\n  Failed transactions:                0                  # 失败请求数\n  Longest transaction:                0.51               # 每次传输的最长时间\n  Shortest transaction:               0.05               # 每次传输的最短时间\n```\n\n## Tips\n  > 发送 POST 请求时，URL 格式为：`http://www.xxxx.com/ POST p1=v1&p2=v2`\n\n  >  如果 URL 中含有空格和中文，要先进行编码\n\n","source":"_posts/Siege.md","raw":"---\ntitle: Siege 简介\ndate: 2016-10-24 14:46:29\ntags:\n  -  Server\n  -  Siege\ncategories:\n  -  Software\ndescription: 简单的介绍下压力测试工具 Siege 的参数\n---\n## 前言\n  [Siege](https://github.com/JoeDog/siege 'SIege') 是Linux 下一款压力测试和评测工具，设计用于 WEB 开发这评估应用在压力下的承受能力；可以配置针对一个 WEB 站点进行多用户的并发访问，记录每个用户所有请求过程的响应时间，并在一定数量的并发访问下重复进行。支持多链接，支持 GET 和 POST 请求。\n  \n## 安装\n * Mac OSX\n   ```bash\n    brew install siege\n   ```\n * Ubuntu\n   ```bash\n    aptitude install siege\n   ```\n\n## 参数介绍 \n```bash  \n-c:  模拟有Ｎ个用户在并发访问 \n\n-r:  重复测试运行Ｎ次 \n-t:  持续测试时间   默认为分钟   5s(持续5秒)  5 (持续5分钟)\n# -r和-t一般不同时使用\n\n-f:  任务的URL列表  \n-i:   随机访问-f指定的url.txt中的url列表项，以此模拟真实的访问情况(随机性)  \n\n-b:  进行压力测试，请求无需等待   delay=0\n\n-A:  指定访问的 User-Agent \n-H:  指定访问的 Header\n-T:  指定访问的 Content-Type\n```\n > ` siege -c 200 -r 100 http://www.google.com `\n > `siege  -c 200 -r 100 -f urls.txt`\n > `siege  -c 200 -r 100 -f urls.txt -i `\n > `siege -c 200 -r 100 -f urls.txt -i -b` delay=0，更准确的压力测试，而不是功能测试\n > `siege -H \"Content-Type:application/json\" -c 200 -r 100 -f urls.txt -i -b`\n\n## 结果说明\n \n  ```bash\n  Transactions:\t\t            20 hits            # 总共测试测试\n  Availability:\t\t            100.00 %           # 成功次数比\n  Elapsed time:\t\t            1.52 secs          # 总共耗时\n  Data transferred:\t            0.80 MB            # 总共数据传输\n  Response time:\t\t            0.14 secs          # 响应耗时\n  Transaction rate:\t            13.16 trans/sec    #  每秒处理请求数\n  Throughput:\t\t            0.52 MB/sec        # 吞吐率\n  Concurrency:\t\t            1.82               # 最高并发\n  Successful transactions:            20                 # 成功请求数\n  Failed transactions:                0                  # 失败请求数\n  Longest transaction:                0.51               # 每次传输的最长时间\n  Shortest transaction:               0.05               # 每次传输的最短时间\n```\n\n## Tips\n  > 发送 POST 请求时，URL 格式为：`http://www.xxxx.com/ POST p1=v1&p2=v2`\n\n  >  如果 URL 中含有空格和中文，要先进行编码\n\n","slug":"Siege","published":1,"updated":"2017-02-12T15:52:39.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciz9wvzfw000fg38koiqxcq64","content":"<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>  <a href=\"https://github.com/JoeDog/siege\" title=\"SIege\" target=\"_blank\" rel=\"external\">Siege</a> 是Linux 下一款压力测试和评测工具，设计用于 WEB 开发这评估应用在压力下的承受能力；可以配置针对一个 WEB 站点进行多用户的并发访问，记录每个用户所有请求过程的响应时间，并在一定数量的并发访问下重复进行。支持多链接，支持 GET 和 POST 请求。</p>\n<h2 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h2><ul>\n<li><p>Mac OSX</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">brew install siege</div></pre></td></tr></table></figure>\n</li>\n<li><p>Ubuntu</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">aptitude install siege</div></pre></td></tr></table></figure>\n</li>\n</ul>\n<h2 id=\"参数介绍\"><a href=\"#参数介绍\" class=\"headerlink\" title=\"参数介绍\"></a>参数介绍</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\">-c:  模拟有Ｎ个用户在并发访问 </div><div class=\"line\"></div><div class=\"line\">-r:  重复测试运行Ｎ次 </div><div class=\"line\">-t:  持续测试时间   默认为分钟   5s(持续5秒)  5 (持续5分钟)</div><div class=\"line\"><span class=\"comment\"># -r和-t一般不同时使用</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"_\">-f</span>:  任务的URL列表  </div><div class=\"line\">-i:   随机访问<span class=\"_\">-f</span>指定的url.txt中的url列表项，以此模拟真实的访问情况(随机性)  </div><div class=\"line\"></div><div class=\"line\">-b:  进行压力测试，请求无需等待   delay=0</div><div class=\"line\"></div><div class=\"line\">-A:  指定访问的 User-Agent </div><div class=\"line\">-H:  指定访问的 Header</div><div class=\"line\">-T:  指定访问的 Content-Type</div></pre></td></tr></table></figure>\n<blockquote>\n<p><code>siege -c 200 -r 100 http://www.google.com</code><br><code>siege  -c 200 -r 100 -f urls.txt</code><br><code>siege  -c 200 -r 100 -f urls.txt -i</code><br><code>siege -c 200 -r 100 -f urls.txt -i -b</code> delay=0，更准确的压力测试，而不是功能测试<br><code>siege -H &quot;Content-Type:application/json&quot; -c 200 -r 100 -f urls.txt -i -b</code></p>\n</blockquote>\n<h2 id=\"结果说明\"><a href=\"#结果说明\" class=\"headerlink\" title=\"结果说明\"></a>结果说明</h2>  <figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\">Transactions:\t\t            20 hits            <span class=\"comment\"># 总共测试测试</span></div><div class=\"line\">Availability:\t\t            100.00 %           <span class=\"comment\"># 成功次数比</span></div><div class=\"line\">Elapsed time:\t\t            1.52 secs          <span class=\"comment\"># 总共耗时</span></div><div class=\"line\">Data transferred:\t            0.80 MB            <span class=\"comment\"># 总共数据传输</span></div><div class=\"line\">Response time:\t\t            0.14 secs          <span class=\"comment\"># 响应耗时</span></div><div class=\"line\">Transaction rate:\t            13.16 trans/sec    <span class=\"comment\">#  每秒处理请求数</span></div><div class=\"line\">Throughput:\t\t            0.52 MB/sec        <span class=\"comment\"># 吞吐率</span></div><div class=\"line\">Concurrency:\t\t            1.82               <span class=\"comment\"># 最高并发</span></div><div class=\"line\">Successful transactions:            20                 <span class=\"comment\"># 成功请求数</span></div><div class=\"line\">Failed transactions:                0                  <span class=\"comment\"># 失败请求数</span></div><div class=\"line\">Longest transaction:                0.51               <span class=\"comment\"># 每次传输的最长时间</span></div><div class=\"line\">Shortest transaction:               0.05               <span class=\"comment\"># 每次传输的最短时间</span></div></pre></td></tr></table></figure>\n<h2 id=\"Tips\"><a href=\"#Tips\" class=\"headerlink\" title=\"Tips\"></a>Tips</h2><blockquote>\n<p>发送 POST 请求时，URL 格式为：<code>http://www.xxxx.com/ POST p1=v1&amp;p2=v2</code></p>\n<p> 如果 URL 中含有空格和中文，要先进行编码</p>\n</blockquote>\n","excerpt":"","more":"<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>  <a href=\"https://github.com/JoeDog/siege\" title=\"SIege\">Siege</a> 是Linux 下一款压力测试和评测工具，设计用于 WEB 开发这评估应用在压力下的承受能力；可以配置针对一个 WEB 站点进行多用户的并发访问，记录每个用户所有请求过程的响应时间，并在一定数量的并发访问下重复进行。支持多链接，支持 GET 和 POST 请求。</p>\n<h2 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h2><ul>\n<li><p>Mac OSX</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">brew install siege</div></pre></td></tr></table></figure>\n</li>\n<li><p>Ubuntu</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">aptitude install siege</div></pre></td></tr></table></figure>\n</li>\n</ul>\n<h2 id=\"参数介绍\"><a href=\"#参数介绍\" class=\"headerlink\" title=\"参数介绍\"></a>参数介绍</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\">-c:  模拟有Ｎ个用户在并发访问 </div><div class=\"line\"></div><div class=\"line\">-r:  重复测试运行Ｎ次 </div><div class=\"line\">-t:  持续测试时间   默认为分钟   5s(持续5秒)  5 (持续5分钟)</div><div class=\"line\"><span class=\"comment\"># -r和-t一般不同时使用</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"_\">-f</span>:  任务的URL列表  </div><div class=\"line\">-i:   随机访问<span class=\"_\">-f</span>指定的url.txt中的url列表项，以此模拟真实的访问情况(随机性)  </div><div class=\"line\"></div><div class=\"line\">-b:  进行压力测试，请求无需等待   delay=0</div><div class=\"line\"></div><div class=\"line\">-A:  指定访问的 User-Agent </div><div class=\"line\">-H:  指定访问的 Header</div><div class=\"line\">-T:  指定访问的 Content-Type</div></pre></td></tr></table></figure>\n<blockquote>\n<p><code>siege -c 200 -r 100 http://www.google.com</code><br><code>siege  -c 200 -r 100 -f urls.txt</code><br><code>siege  -c 200 -r 100 -f urls.txt -i</code><br><code>siege -c 200 -r 100 -f urls.txt -i -b</code> delay=0，更准确的压力测试，而不是功能测试<br><code>siege -H &quot;Content-Type:application/json&quot; -c 200 -r 100 -f urls.txt -i -b</code></p>\n</blockquote>\n<h2 id=\"结果说明\"><a href=\"#结果说明\" class=\"headerlink\" title=\"结果说明\"></a>结果说明</h2>  <figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\">Transactions:\t\t            20 hits            <span class=\"comment\"># 总共测试测试</span></div><div class=\"line\">Availability:\t\t            100.00 %           <span class=\"comment\"># 成功次数比</span></div><div class=\"line\">Elapsed time:\t\t            1.52 secs          <span class=\"comment\"># 总共耗时</span></div><div class=\"line\">Data transferred:\t            0.80 MB            <span class=\"comment\"># 总共数据传输</span></div><div class=\"line\">Response time:\t\t            0.14 secs          <span class=\"comment\"># 响应耗时</span></div><div class=\"line\">Transaction rate:\t            13.16 trans/sec    <span class=\"comment\">#  每秒处理请求数</span></div><div class=\"line\">Throughput:\t\t            0.52 MB/sec        <span class=\"comment\"># 吞吐率</span></div><div class=\"line\">Concurrency:\t\t            1.82               <span class=\"comment\"># 最高并发</span></div><div class=\"line\">Successful transactions:            20                 <span class=\"comment\"># 成功请求数</span></div><div class=\"line\">Failed transactions:                0                  <span class=\"comment\"># 失败请求数</span></div><div class=\"line\">Longest transaction:                0.51               <span class=\"comment\"># 每次传输的最长时间</span></div><div class=\"line\">Shortest transaction:               0.05               <span class=\"comment\"># 每次传输的最短时间</span></div></pre></td></tr></table></figure>\n<h2 id=\"Tips\"><a href=\"#Tips\" class=\"headerlink\" title=\"Tips\"></a>Tips</h2><blockquote>\n<p>发送 POST 请求时，URL 格式为：<code>http://www.xxxx.com/ POST p1=v1&amp;p2=v2</code></p>\n<p> 如果 URL 中含有空格和中文，要先进行编码</p>\n</blockquote>\n"},{"title":"常用的软件 PPA 源","date":"2016-09-30T03:40:37.000Z","description":"整理了一些自己比较常用的PPA源做备份使用，后期将持续更新。","_content":"\n## 前言\n\n整理了一些自己比较常用的PPA源做备份使用，后期将持续更新。\n\n## 详情\n### Nginx\n```bash\nadd-apt-repository ppa:nginx/stable\n## /etc/apt/sources.list\ndeb http://ppa.launchpad.net/nginx/stable/ubuntu xenial main \n\napt-add-repository ppa:nginx/development\n## /etc/apt/sources.list\ndeb http://ppa.launchpad.net/nginx/development/ubuntu xenial main \n```\n### MySQL\n```bash\nadd-apt-repository ppa:ondrej/mysql-5.7\n## /etc/apt/sources.list\ndeb http://ppa.launchpad.net/ondrej/mysql-5.7/ubuntu xenial main \n```\n### PHP70\n```bash \nadd-apt-repository ppa:ondrej/php\n## /etc/apt/sources.list\ndeb http://ppa.launchpad.net/ondrej/php/ubuntu xenial main\n```\n### Git\n```bash\nadd-apt-repository ppa:git-core/ppa\n## /etc/apt/sources.list\ndeb http://ppa.launchpad.net/git-core/ppa/ubuntu xenial main \ndeb-src http://ppa.launchpad.net/git-core/ppa/ubuntu xenial main \n```\n\n\n## Tips\n```bash\nUnicodeDecodeError: 'ascii' codec can't decode byte 0xc5 in position 92: ordinal not in range(128)\n```\n解决方案\n```bash\nLC_ALL=C.UTF-8 add-apt-repository xxx\n```\n***\n```bash\nThe program 'add-apt-repository' is currently not installed. You can install it by typing:\napt-get install software-properties-common\n```\n解决方案\n```bash\napt-get install software-properties-common\n```","source":"_posts/Software-PPA-Sources.md","raw":"---\ntitle: 常用的软件 PPA 源\ndate: 2016-09-30 11:40:37\ntags:\n  - Ubuntu\n  - Software\n  - PPA\n  - Sources\ncategories:\n  - Software\ndescription: 整理了一些自己比较常用的PPA源做备份使用，后期将持续更新。\n---\n\n## 前言\n\n整理了一些自己比较常用的PPA源做备份使用，后期将持续更新。\n\n## 详情\n### Nginx\n```bash\nadd-apt-repository ppa:nginx/stable\n## /etc/apt/sources.list\ndeb http://ppa.launchpad.net/nginx/stable/ubuntu xenial main \n\napt-add-repository ppa:nginx/development\n## /etc/apt/sources.list\ndeb http://ppa.launchpad.net/nginx/development/ubuntu xenial main \n```\n### MySQL\n```bash\nadd-apt-repository ppa:ondrej/mysql-5.7\n## /etc/apt/sources.list\ndeb http://ppa.launchpad.net/ondrej/mysql-5.7/ubuntu xenial main \n```\n### PHP70\n```bash \nadd-apt-repository ppa:ondrej/php\n## /etc/apt/sources.list\ndeb http://ppa.launchpad.net/ondrej/php/ubuntu xenial main\n```\n### Git\n```bash\nadd-apt-repository ppa:git-core/ppa\n## /etc/apt/sources.list\ndeb http://ppa.launchpad.net/git-core/ppa/ubuntu xenial main \ndeb-src http://ppa.launchpad.net/git-core/ppa/ubuntu xenial main \n```\n\n\n## Tips\n```bash\nUnicodeDecodeError: 'ascii' codec can't decode byte 0xc5 in position 92: ordinal not in range(128)\n```\n解决方案\n```bash\nLC_ALL=C.UTF-8 add-apt-repository xxx\n```\n***\n```bash\nThe program 'add-apt-repository' is currently not installed. You can install it by typing:\napt-get install software-properties-common\n```\n解决方案\n```bash\napt-get install software-properties-common\n```","slug":"Software-PPA-Sources","published":1,"updated":"2017-02-12T15:52:39.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciz9wvzfy000hg38ke127929w","content":"<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>整理了一些自己比较常用的PPA源做备份使用，后期将持续更新。</p>\n<h2 id=\"详情\"><a href=\"#详情\" class=\"headerlink\" title=\"详情\"></a>详情</h2><h3 id=\"Nginx\"><a href=\"#Nginx\" class=\"headerlink\" title=\"Nginx\"></a>Nginx</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">add-apt-repository ppa:nginx/stable</div><div class=\"line\"><span class=\"comment\">## /etc/apt/sources.list</span></div><div class=\"line\">deb http://ppa.launchpad.net/nginx/stable/ubuntu xenial main </div><div class=\"line\"></div><div class=\"line\">apt-add-repository ppa:nginx/development</div><div class=\"line\"><span class=\"comment\">## /etc/apt/sources.list</span></div><div class=\"line\">deb http://ppa.launchpad.net/nginx/development/ubuntu xenial main</div></pre></td></tr></table></figure>\n<h3 id=\"MySQL\"><a href=\"#MySQL\" class=\"headerlink\" title=\"MySQL\"></a>MySQL</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">add-apt-repository ppa:ondrej/mysql-5.7</div><div class=\"line\"><span class=\"comment\">## /etc/apt/sources.list</span></div><div class=\"line\">deb http://ppa.launchpad.net/ondrej/mysql-5.7/ubuntu xenial main</div></pre></td></tr></table></figure>\n<h3 id=\"PHP70\"><a href=\"#PHP70\" class=\"headerlink\" title=\"PHP70\"></a>PHP70</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">add-apt-repository ppa:ondrej/php</div><div class=\"line\"><span class=\"comment\">## /etc/apt/sources.list</span></div><div class=\"line\">deb http://ppa.launchpad.net/ondrej/php/ubuntu xenial main</div></pre></td></tr></table></figure>\n<h3 id=\"Git\"><a href=\"#Git\" class=\"headerlink\" title=\"Git\"></a>Git</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">add-apt-repository ppa:git-core/ppa</div><div class=\"line\"><span class=\"comment\">## /etc/apt/sources.list</span></div><div class=\"line\">deb http://ppa.launchpad.net/git-core/ppa/ubuntu xenial main </div><div class=\"line\">deb-src http://ppa.launchpad.net/git-core/ppa/ubuntu xenial main</div></pre></td></tr></table></figure>\n<h2 id=\"Tips\"><a href=\"#Tips\" class=\"headerlink\" title=\"Tips\"></a>Tips</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">UnicodeDecodeError: <span class=\"string\">'ascii'</span> codec can<span class=\"string\">'t decode byte 0xc5 in position 92: ordinal not in range(128)</span></div></pre></td></tr></table></figure>\n<p>解决方案<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">LC_ALL=C.UTF-8 add-apt-repository xxx</div></pre></td></tr></table></figure></p>\n<hr>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">The program <span class=\"string\">'add-apt-repository'</span> is currently not installed. You can install it by typing:</div><div class=\"line\">apt-get install software-properties-common</div></pre></td></tr></table></figure>\n<p>解决方案<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">apt-get install software-properties-common</div></pre></td></tr></table></figure></p>\n","excerpt":"","more":"<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>整理了一些自己比较常用的PPA源做备份使用，后期将持续更新。</p>\n<h2 id=\"详情\"><a href=\"#详情\" class=\"headerlink\" title=\"详情\"></a>详情</h2><h3 id=\"Nginx\"><a href=\"#Nginx\" class=\"headerlink\" title=\"Nginx\"></a>Nginx</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">add-apt-repository ppa:nginx/stable</div><div class=\"line\"><span class=\"comment\">## /etc/apt/sources.list</span></div><div class=\"line\">deb http://ppa.launchpad.net/nginx/stable/ubuntu xenial main </div><div class=\"line\"></div><div class=\"line\">apt-add-repository ppa:nginx/development</div><div class=\"line\"><span class=\"comment\">## /etc/apt/sources.list</span></div><div class=\"line\">deb http://ppa.launchpad.net/nginx/development/ubuntu xenial main</div></pre></td></tr></table></figure>\n<h3 id=\"MySQL\"><a href=\"#MySQL\" class=\"headerlink\" title=\"MySQL\"></a>MySQL</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">add-apt-repository ppa:ondrej/mysql-5.7</div><div class=\"line\"><span class=\"comment\">## /etc/apt/sources.list</span></div><div class=\"line\">deb http://ppa.launchpad.net/ondrej/mysql-5.7/ubuntu xenial main</div></pre></td></tr></table></figure>\n<h3 id=\"PHP70\"><a href=\"#PHP70\" class=\"headerlink\" title=\"PHP70\"></a>PHP70</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">add-apt-repository ppa:ondrej/php</div><div class=\"line\"><span class=\"comment\">## /etc/apt/sources.list</span></div><div class=\"line\">deb http://ppa.launchpad.net/ondrej/php/ubuntu xenial main</div></pre></td></tr></table></figure>\n<h3 id=\"Git\"><a href=\"#Git\" class=\"headerlink\" title=\"Git\"></a>Git</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">add-apt-repository ppa:git-core/ppa</div><div class=\"line\"><span class=\"comment\">## /etc/apt/sources.list</span></div><div class=\"line\">deb http://ppa.launchpad.net/git-core/ppa/ubuntu xenial main </div><div class=\"line\">deb-src http://ppa.launchpad.net/git-core/ppa/ubuntu xenial main</div></pre></td></tr></table></figure>\n<h2 id=\"Tips\"><a href=\"#Tips\" class=\"headerlink\" title=\"Tips\"></a>Tips</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">UnicodeDecodeError: <span class=\"string\">'ascii'</span> codec can<span class=\"string\">'t decode byte 0xc5 in position 92: ordinal not in range(128)</span></div></pre></td></tr></table></figure>\n<p>解决方案<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">LC_ALL=C.UTF-8 add-apt-repository xxx</div></pre></td></tr></table></figure></p>\n<hr>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">The program <span class=\"string\">'add-apt-repository'</span> is currently not installed. You can install it by typing:</div><div class=\"line\">apt-get install software-properties-common</div></pre></td></tr></table></figure>\n<p>解决方案<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">apt-get install software-properties-common</div></pre></td></tr></table></figure></p>\n"},{"title":"PHP-FPM 进程管理模式简介","date":"2016-10-10T08:02:10.000Z","description":["在服务器运行时，会出现服务器出现PHP-FPM内存占用过大、PHP-FPM进程数目太多等相关问题导致网站或者服务器访问无法问题，那PHP-FPM的进程管理模式到底是什么样子的，下面我们来大概了解下。"],"_content":"## 前言\n在服务器运行时，会出现服务器出现PHP-FPM内存占用过大、PHP-FPM进程数目太多等相关问题导致网站或者服务器访问无法问题，那PHP-FPM的进程管理模式到底是什么样子的，下面我们来大概了解下。\n## 简介\n通过查看一下配置文件，我们可以发现PHP-FPM具有三种管理模式`{ static | dynamic | ondemand}`\n```bash\nvim /etc/php/7.0/fpm/pool.d/www.conf \n```\n```bash\n; Choose how the process manager will control the number of child processes.\n; Possible Values:\n;   static  - a fixed number (pm.max_children) of child processes;\n;   dynamic - the number of child processes are set dynamically based on the\n;             following directives. With this process management, there will be\n;             always at least 1 children.\n;             pm.max_children      - the maximum number of children that can\n;                                    be alive at the same time.\n;             pm.start_servers     - the number of children created on startup.\n;             pm.min_spare_servers - the minimum number of children in 'idle'\n;                                    state (waiting to process). If the number\n;                                    of 'idle' processes is less than this\n;                                    number then some children will be created.\n;             pm.max_spare_servers - the maximum number of children in 'idle'\n;                                    state (waiting to process). If the number\n;                                    of 'idle' processes is greater than this\n;                                    number then some children will be killed.\n;  ondemand - no children are created at startup. Children will be forked when\n;             new requests will connect. The following parameter are used:\n;             pm.max_children           - the maximum number of children that\n;                                         can be alive at the same time.\n;             pm.process_idle_timeout   - The number of seconds after which\n;                                         an idle process will be killed.\n; Note: This value is mandatory.\n```\n## 详解\n### Static\n`pm = static`\n启动时创建并始终保持一个固定数量的子进程。\n```bash\npm.max_children        # 限定php-fpm的最大进程数\n```\n### Dynamic\n`pm = dynamic  (默认)` \n启动时会创建固定数目`start_servers`的子进程，使用过程中会新建子进程但数目不会超过最大子进程数`max_children`，子进程数目会在`start_servers`和`max_children`之间波动。而闲置的子进程数由`min_spare_servers` 和 `max_spare_servers` 进行控制。\n```bash\npm.max_children        # 限定php-fpm的最大进程数\npm.start_servers       # 起始php-fpm进程数量。\npm.min_spare_servers   # 空闲状态下的最小php-fpm进程数量。\npm.max_spare_servers   # 空闲状态下的最大php-fpm进程数量。（max_spare_servers <= max_children）\n\n#官方建议值\nstart_servers = min_spare_servers + (max_spare_servers - min_spare_servers) / 2\n```\n### Ondemand\n`pm = ondemand ` \n启动时不会创建子进程，当有请求时创建进程，数目不超过`max_children`。当进程空闲时间超过`process_idle_timeout`将被释放\n```bash\npm.max_children           # 限定php-fpm的最大进程数\npm.process_idle_timeout   # 进程闲置多少秒后被释放\n```\n\n## 建议\n - 配置过程中我们可以采用 `内存/30M (单个进程最大内存数)`的数目来设置`max_children`\n - `static` 适用于大内存服务器，因为子进程在创建和释放时都会消耗服务器资源 (时间、内存、CPU...)\n - `dynamic` 适用于小内存服务器，方式灵活，节省内存。\n - `ondemand` 不建议使用在大访问量应用，大量创建和释放进程开销很大\n - 生成环境建议采用 `static` 模式\n\n\n","source":"_posts/PHPFPM-Process-Manager.md","raw":"---\ntitle: PHP-FPM 进程管理模式简介\ndate: 2016-10-10 16:02:10\ntags:\n  - Server\n  - PHP\n  - Process Manager\ncategories:\n  - Server\ndescription: \n  - 在服务器运行时，会出现服务器出现PHP-FPM内存占用过大、PHP-FPM进程数目太多等相关问题导致网站或者服务器访问无法问题，那PHP-FPM的进程管理模式到底是什么样子的，下面我们来大概了解下。\n---\n## 前言\n在服务器运行时，会出现服务器出现PHP-FPM内存占用过大、PHP-FPM进程数目太多等相关问题导致网站或者服务器访问无法问题，那PHP-FPM的进程管理模式到底是什么样子的，下面我们来大概了解下。\n## 简介\n通过查看一下配置文件，我们可以发现PHP-FPM具有三种管理模式`{ static | dynamic | ondemand}`\n```bash\nvim /etc/php/7.0/fpm/pool.d/www.conf \n```\n```bash\n; Choose how the process manager will control the number of child processes.\n; Possible Values:\n;   static  - a fixed number (pm.max_children) of child processes;\n;   dynamic - the number of child processes are set dynamically based on the\n;             following directives. With this process management, there will be\n;             always at least 1 children.\n;             pm.max_children      - the maximum number of children that can\n;                                    be alive at the same time.\n;             pm.start_servers     - the number of children created on startup.\n;             pm.min_spare_servers - the minimum number of children in 'idle'\n;                                    state (waiting to process). If the number\n;                                    of 'idle' processes is less than this\n;                                    number then some children will be created.\n;             pm.max_spare_servers - the maximum number of children in 'idle'\n;                                    state (waiting to process). If the number\n;                                    of 'idle' processes is greater than this\n;                                    number then some children will be killed.\n;  ondemand - no children are created at startup. Children will be forked when\n;             new requests will connect. The following parameter are used:\n;             pm.max_children           - the maximum number of children that\n;                                         can be alive at the same time.\n;             pm.process_idle_timeout   - The number of seconds after which\n;                                         an idle process will be killed.\n; Note: This value is mandatory.\n```\n## 详解\n### Static\n`pm = static`\n启动时创建并始终保持一个固定数量的子进程。\n```bash\npm.max_children        # 限定php-fpm的最大进程数\n```\n### Dynamic\n`pm = dynamic  (默认)` \n启动时会创建固定数目`start_servers`的子进程，使用过程中会新建子进程但数目不会超过最大子进程数`max_children`，子进程数目会在`start_servers`和`max_children`之间波动。而闲置的子进程数由`min_spare_servers` 和 `max_spare_servers` 进行控制。\n```bash\npm.max_children        # 限定php-fpm的最大进程数\npm.start_servers       # 起始php-fpm进程数量。\npm.min_spare_servers   # 空闲状态下的最小php-fpm进程数量。\npm.max_spare_servers   # 空闲状态下的最大php-fpm进程数量。（max_spare_servers <= max_children）\n\n#官方建议值\nstart_servers = min_spare_servers + (max_spare_servers - min_spare_servers) / 2\n```\n### Ondemand\n`pm = ondemand ` \n启动时不会创建子进程，当有请求时创建进程，数目不超过`max_children`。当进程空闲时间超过`process_idle_timeout`将被释放\n```bash\npm.max_children           # 限定php-fpm的最大进程数\npm.process_idle_timeout   # 进程闲置多少秒后被释放\n```\n\n## 建议\n - 配置过程中我们可以采用 `内存/30M (单个进程最大内存数)`的数目来设置`max_children`\n - `static` 适用于大内存服务器，因为子进程在创建和释放时都会消耗服务器资源 (时间、内存、CPU...)\n - `dynamic` 适用于小内存服务器，方式灵活，节省内存。\n - `ondemand` 不建议使用在大访问量应用，大量创建和释放进程开销很大\n - 生成环境建议采用 `static` 模式\n\n\n","slug":"PHPFPM-Process-Manager","published":1,"updated":"2017-02-12T15:52:39.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciz9wvzg2000mg38kehvaip2u","content":"<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>在服务器运行时，会出现服务器出现PHP-FPM内存占用过大、PHP-FPM进程数目太多等相关问题导致网站或者服务器访问无法问题，那PHP-FPM的进程管理模式到底是什么样子的，下面我们来大概了解下。</p>\n<h2 id=\"简介\"><a href=\"#简介\" class=\"headerlink\" title=\"简介\"></a>简介</h2><p>通过查看一下配置文件，我们可以发现PHP-FPM具有三种管理模式<code>{ static | dynamic | ondemand}</code><br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">vim /etc/php/7.0/fpm/pool.d/www.conf</div></pre></td></tr></table></figure></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div></pre></td><td class=\"code\"><pre><div class=\"line\">; Choose how the process manager will control the number of child processes.</div><div class=\"line\">; Possible Values:</div><div class=\"line\">;   static  - a fixed number (pm.max_children) of child processes;</div><div class=\"line\">;   dynamic - the number of child processes are <span class=\"built_in\">set</span> dynamically based on the</div><div class=\"line\">;             following directives. With this process management, there will be</div><div class=\"line\">;             always at least 1 children.</div><div class=\"line\">;             pm.max_children      - the maximum number of children that can</div><div class=\"line\">;                                    be alive at the same time.</div><div class=\"line\">;             pm.start_servers     - the number of children created on startup.</div><div class=\"line\">;             pm.min_spare_servers - the minimum number of children <span class=\"keyword\">in</span> <span class=\"string\">'idle'</span></div><div class=\"line\">;                                    state (waiting to process). If the number</div><div class=\"line\">;                                    of <span class=\"string\">'idle'</span> processes is less than this</div><div class=\"line\">;                                    number <span class=\"keyword\">then</span> some children will be created.</div><div class=\"line\">;             pm.max_spare_servers - the maximum number of children <span class=\"keyword\">in</span> <span class=\"string\">'idle'</span></div><div class=\"line\">;                                    state (waiting to process). If the number</div><div class=\"line\">;                                    of <span class=\"string\">'idle'</span> processes is greater than this</div><div class=\"line\">;                                    number <span class=\"keyword\">then</span> some children will be killed.</div><div class=\"line\">;  ondemand - no children are created at startup. Children will be forked when</div><div class=\"line\">;             new requests will connect. The following parameter are used:</div><div class=\"line\">;             pm.max_children           - the maximum number of children that</div><div class=\"line\">;                                         can be alive at the same time.</div><div class=\"line\">;             pm.process_idle_timeout   - The number of seconds after <span class=\"built_in\">which</span></div><div class=\"line\">;                                         an idle process will be killed.</div><div class=\"line\">; Note: This value is mandatory.</div></pre></td></tr></table></figure>\n<h2 id=\"详解\"><a href=\"#详解\" class=\"headerlink\" title=\"详解\"></a>详解</h2><h3 id=\"Static\"><a href=\"#Static\" class=\"headerlink\" title=\"Static\"></a>Static</h3><p><code>pm = static</code><br>启动时创建并始终保持一个固定数量的子进程。<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">pm.max_children        <span class=\"comment\"># 限定php-fpm的最大进程数</span></div></pre></td></tr></table></figure></p>\n<h3 id=\"Dynamic\"><a href=\"#Dynamic\" class=\"headerlink\" title=\"Dynamic\"></a>Dynamic</h3><p><code>pm = dynamic  (默认)</code><br>启动时会创建固定数目<code>start_servers</code>的子进程，使用过程中会新建子进程但数目不会超过最大子进程数<code>max_children</code>，子进程数目会在<code>start_servers</code>和<code>max_children</code>之间波动。而闲置的子进程数由<code>min_spare_servers</code> 和 <code>max_spare_servers</code> 进行控制。<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">pm.max_children        <span class=\"comment\"># 限定php-fpm的最大进程数</span></div><div class=\"line\">pm.start_servers       <span class=\"comment\"># 起始php-fpm进程数量。</span></div><div class=\"line\">pm.min_spare_servers   <span class=\"comment\"># 空闲状态下的最小php-fpm进程数量。</span></div><div class=\"line\">pm.max_spare_servers   <span class=\"comment\"># 空闲状态下的最大php-fpm进程数量。（max_spare_servers &lt;= max_children）</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">#官方建议值</span></div><div class=\"line\">start_servers = min_spare_servers + (max_spare_servers - min_spare_servers) / 2</div></pre></td></tr></table></figure></p>\n<h3 id=\"Ondemand\"><a href=\"#Ondemand\" class=\"headerlink\" title=\"Ondemand\"></a>Ondemand</h3><p><code>pm = ondemand</code><br>启动时不会创建子进程，当有请求时创建进程，数目不超过<code>max_children</code>。当进程空闲时间超过<code>process_idle_timeout</code>将被释放<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">pm.max_children           <span class=\"comment\"># 限定php-fpm的最大进程数</span></div><div class=\"line\">pm.process_idle_timeout   <span class=\"comment\"># 进程闲置多少秒后被释放</span></div></pre></td></tr></table></figure></p>\n<h2 id=\"建议\"><a href=\"#建议\" class=\"headerlink\" title=\"建议\"></a>建议</h2><ul>\n<li>配置过程中我们可以采用 <code>内存/30M (单个进程最大内存数)</code>的数目来设置<code>max_children</code></li>\n<li><code>static</code> 适用于大内存服务器，因为子进程在创建和释放时都会消耗服务器资源 (时间、内存、CPU…)</li>\n<li><code>dynamic</code> 适用于小内存服务器，方式灵活，节省内存。</li>\n<li><code>ondemand</code> 不建议使用在大访问量应用，大量创建和释放进程开销很大</li>\n<li>生成环境建议采用 <code>static</code> 模式</li>\n</ul>\n","excerpt":"","more":"<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>在服务器运行时，会出现服务器出现PHP-FPM内存占用过大、PHP-FPM进程数目太多等相关问题导致网站或者服务器访问无法问题，那PHP-FPM的进程管理模式到底是什么样子的，下面我们来大概了解下。</p>\n<h2 id=\"简介\"><a href=\"#简介\" class=\"headerlink\" title=\"简介\"></a>简介</h2><p>通过查看一下配置文件，我们可以发现PHP-FPM具有三种管理模式<code>{ static | dynamic | ondemand}</code><br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">vim /etc/php/7.0/fpm/pool.d/www.conf</div></pre></td></tr></table></figure></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div></pre></td><td class=\"code\"><pre><div class=\"line\">; Choose how the process manager will control the number of child processes.</div><div class=\"line\">; Possible Values:</div><div class=\"line\">;   static  - a fixed number (pm.max_children) of child processes;</div><div class=\"line\">;   dynamic - the number of child processes are <span class=\"built_in\">set</span> dynamically based on the</div><div class=\"line\">;             following directives. With this process management, there will be</div><div class=\"line\">;             always at least 1 children.</div><div class=\"line\">;             pm.max_children      - the maximum number of children that can</div><div class=\"line\">;                                    be alive at the same time.</div><div class=\"line\">;             pm.start_servers     - the number of children created on startup.</div><div class=\"line\">;             pm.min_spare_servers - the minimum number of children <span class=\"keyword\">in</span> <span class=\"string\">'idle'</span></div><div class=\"line\">;                                    state (waiting to process). If the number</div><div class=\"line\">;                                    of <span class=\"string\">'idle'</span> processes is less than this</div><div class=\"line\">;                                    number <span class=\"keyword\">then</span> some children will be created.</div><div class=\"line\">;             pm.max_spare_servers - the maximum number of children <span class=\"keyword\">in</span> <span class=\"string\">'idle'</span></div><div class=\"line\">;                                    state (waiting to process). If the number</div><div class=\"line\">;                                    of <span class=\"string\">'idle'</span> processes is greater than this</div><div class=\"line\">;                                    number <span class=\"keyword\">then</span> some children will be killed.</div><div class=\"line\">;  ondemand - no children are created at startup. Children will be forked when</div><div class=\"line\">;             new requests will connect. The following parameter are used:</div><div class=\"line\">;             pm.max_children           - the maximum number of children that</div><div class=\"line\">;                                         can be alive at the same time.</div><div class=\"line\">;             pm.process_idle_timeout   - The number of seconds after <span class=\"built_in\">which</span></div><div class=\"line\">;                                         an idle process will be killed.</div><div class=\"line\">; Note: This value is mandatory.</div></pre></td></tr></table></figure>\n<h2 id=\"详解\"><a href=\"#详解\" class=\"headerlink\" title=\"详解\"></a>详解</h2><h3 id=\"Static\"><a href=\"#Static\" class=\"headerlink\" title=\"Static\"></a>Static</h3><p><code>pm = static</code><br>启动时创建并始终保持一个固定数量的子进程。<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">pm.max_children        <span class=\"comment\"># 限定php-fpm的最大进程数</span></div></pre></td></tr></table></figure></p>\n<h3 id=\"Dynamic\"><a href=\"#Dynamic\" class=\"headerlink\" title=\"Dynamic\"></a>Dynamic</h3><p><code>pm = dynamic  (默认)</code><br>启动时会创建固定数目<code>start_servers</code>的子进程，使用过程中会新建子进程但数目不会超过最大子进程数<code>max_children</code>，子进程数目会在<code>start_servers</code>和<code>max_children</code>之间波动。而闲置的子进程数由<code>min_spare_servers</code> 和 <code>max_spare_servers</code> 进行控制。<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">pm.max_children        <span class=\"comment\"># 限定php-fpm的最大进程数</span></div><div class=\"line\">pm.start_servers       <span class=\"comment\"># 起始php-fpm进程数量。</span></div><div class=\"line\">pm.min_spare_servers   <span class=\"comment\"># 空闲状态下的最小php-fpm进程数量。</span></div><div class=\"line\">pm.max_spare_servers   <span class=\"comment\"># 空闲状态下的最大php-fpm进程数量。（max_spare_servers &lt;= max_children）</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">#官方建议值</span></div><div class=\"line\">start_servers = min_spare_servers + (max_spare_servers - min_spare_servers) / 2</div></pre></td></tr></table></figure></p>\n<h3 id=\"Ondemand\"><a href=\"#Ondemand\" class=\"headerlink\" title=\"Ondemand\"></a>Ondemand</h3><p><code>pm = ondemand</code><br>启动时不会创建子进程，当有请求时创建进程，数目不超过<code>max_children</code>。当进程空闲时间超过<code>process_idle_timeout</code>将被释放<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">pm.max_children           <span class=\"comment\"># 限定php-fpm的最大进程数</span></div><div class=\"line\">pm.process_idle_timeout   <span class=\"comment\"># 进程闲置多少秒后被释放</span></div></pre></td></tr></table></figure></p>\n<h2 id=\"建议\"><a href=\"#建议\" class=\"headerlink\" title=\"建议\"></a>建议</h2><ul>\n<li>配置过程中我们可以采用 <code>内存/30M (单个进程最大内存数)</code>的数目来设置<code>max_children</code></li>\n<li><code>static</code> 适用于大内存服务器，因为子进程在创建和释放时都会消耗服务器资源 (时间、内存、CPU…)</li>\n<li><code>dynamic</code> 适用于小内存服务器，方式灵活，节省内存。</li>\n<li><code>ondemand</code> 不建议使用在大访问量应用，大量创建和释放进程开销很大</li>\n<li>生成环境建议采用 <code>static</code> 模式</li>\n</ul>\n"},{"title":"使用 Mina 部署 Yii2 项目","date":"2016-10-25T15:03:20.000Z","description":"利用 Mina 快速的发布 Yii2 项目。","_content":"## 前言\n### Mina\n  Really fast deployer and server automation tool.\n  Mina 是一款快速部署工具。它部署脚本简单，扩展性强，部署速度快 (只有一次 SSH 连接)，部署信息简单。\n \n## 部署\n### 前期准备\n  * 一个 [Yii2](/2016-10-25/Create-Yii2-Project.html '创建 Yii2 项目') 的项目仓库\n  * 一台服务器安装了[基础环境](/2016-09-30/Install-Nginx-PHP7-MySQL-on-Ubuntu16-04.html)的VPS\n  * 一台安装有 Ruby 环境的开发机\n### 安装Mina\n  ```bash\n  gem install mina\n  ```\n### 初始化配置\n  ```bash\n  mina init\n  \n  # 生成配置文件\n  # ├── config\n  # │   └── deploy.rb\n  ```\n ### 修改配置文件\n   ```bash\n   vim deploy.rb\n   ```\n   我的配置\n   ```bash\n    require 'mina/git'  # git 支持\n    \n    # Basic settings:\n    #   domain       - The hostname to SSH to.\n    #   deploy_to    - Path to deploy into.\n    #   repository   - Git repo to clone from. (needed by mina/git)\n    #   branch       - Branch name to deploy. (needed by mina/git)\n\n    set :deploy_to, '/var/www/html/test'             # VPS 上用来发布的目录\n    set :repository, 'git@github.com:xxx/test.git'   # github 仓库地址\n    set :branch, 'develop'                           # 用来发布的分支\n\n    set :keep_releases, 4              # 保留的发布版本数\n\n    # Manually create these paths in shared/ (eg: shared/config/database.yml) in your server.\n    # They will be linked in the 'deploy:link_shared_paths' step.\n    set :shared_paths, ['vendor', 'runtime', 'web/assets']    # 设置共享目录\n\n    # Optional settings:\n    #   set :user, 'foobar'    # Username in the server to SSH to.\n    #   set :port, '30000'     # SSH port number.\n    #   set :forward_agent, true     # SSH forward_agent.\n    \n    set :user, 'ubuntu'                              # 登录 VPS 的用户名\n    set :domain, 'x.x.x.x'                           # VPS 的 IP 地址\n\n    # This task is the environment that is loaded for most commands, such as\n    # `mina deploy` or `mina rake`.\n    task :environment do\n    end\n\n    # Put any custom mkdir's in here for when `mina setup` is ran.\n    # For Rails apps, we'll make some of the shared paths that are shared between\n    # all releases.\n    task :setup => :environment do\n      # 项目初始化，生成共享文件夹，安装 Yii2 Composer 支持\n      queue! %[mkdir -p \"#{deploy_to}/#{shared_path}/runtime\"]\n      queue! %[mkdir -p \"#{deploy_to}/#{shared_path}/vendor\"]\n      queue! %[mkdir -p \"#{deploy_to}/#{shared_path}/web/assets\"]\n      queue! %[chmod -R 777 \"#{deploy_to}/#{shared_path}/runtime\"]\n      queue! %[chmod -R 777 \"#{deploy_to}/#{shared_path}/web/assets\"]\n      queue 'composer global require \"fxp/composer-asset-plugin:^1.2.0\"'\n    end\n\n    desc \"Deploys the current version to the server.\"\n    task :deploy => :environment do\n      to :before_hook do\n        # Put things to run locally before ssh\n      end\n      deploy do\n        # Put things that will set up an empty directory into a fully set-up\n        # instance of your project.\n        invoke :'git:clone'                          # 更新代码\n        invoke :'deploy:link_shared_paths'           # 链接共享目录\n        queue 'chmod -R 755 yii'                     # 权限 \n        queue 'composer install'                     # 安装Composer包\n        queue './yii migrate'                        # 数据库迁移\n        quequ 'rm -rf runtime/cache/*'               # 清空缓存\n        quequ 'service nginx restart'                # 重启 Nginx\n        quequ 'service php7.0-fpm restart'           # 重启 PHP\n        invoke :'deploy:cleanup'                     # 清除多余的发布\n      end\n    end\n\n    # 用于回滚到上一个版本\n    desc \"Rollback to previous verison.\"\n    task :rollback => :environment do\n      queue %[echo \"----> Start to rollback\"]\n      queue %[if [ $(ls #{deploy_to}/releases | wc -l) -gt 1 ]; then echo \"---->Relink to previos release\" && unlink #{deploy_to}/current && ln -s #{deploy_to}/releases/\"$(ls #{deploy_to}/releases | tail -2 | head -1)\" #{deploy_to}/current && echo \"Remove old releases\" && rm -rf #{deploy_to}/releases/\"$(ls #{deploy_to}/releases | tail -1)\" && echo \"$(ls #{deploy_to}/releases | tail -1)\" > #{deploy_to}/last_version && echo \"Done. Rollback to v$(cat #{deploy_to}/last_version)\" ; else echo \"No more release to rollback\" ; fi]\n    end\n   ```\n ### 初始化部署环境 \n ```bash\n mina setup\n ```\n 运行后会在配置的发布目录中创建特有的发布目录结构，并执行配置中 `setup` 部分。\n \n### 修改 Nginx\n  ```bash\n  server {\n      listen       80;\n      server_name  test.com;\n      index index.html index.htm index.php;\n      root /var/www/html/test/current;    # 在发布目录上增加 current\n  ```\n ###  开始部署\n 在每一次需要部署时运行以下命令\n   ```bash\n    mina deploy\n   ```\n   \n## Tips\n * 将发布的开发机加入到 VPS 的免密码登录配置\n * 将 VPS 的 SSH Key 加入到 github 仓库的  Deploy keys 内","source":"_posts/Use-Mina-Deploy-Yii2.md","raw":"---\ntitle: 使用 Mina 部署 Yii2 项目\ndate: 2016-10-25 23:03:20\ntags:\n  - Mina\n  - Yii2\n  - PHP\n  - Deploy\ncategories:\n  - Develop\ndescription: 利用 Mina 快速的发布 Yii2 项目。\n---\n## 前言\n### Mina\n  Really fast deployer and server automation tool.\n  Mina 是一款快速部署工具。它部署脚本简单，扩展性强，部署速度快 (只有一次 SSH 连接)，部署信息简单。\n \n## 部署\n### 前期准备\n  * 一个 [Yii2](/2016-10-25/Create-Yii2-Project.html '创建 Yii2 项目') 的项目仓库\n  * 一台服务器安装了[基础环境](/2016-09-30/Install-Nginx-PHP7-MySQL-on-Ubuntu16-04.html)的VPS\n  * 一台安装有 Ruby 环境的开发机\n### 安装Mina\n  ```bash\n  gem install mina\n  ```\n### 初始化配置\n  ```bash\n  mina init\n  \n  # 生成配置文件\n  # ├── config\n  # │   └── deploy.rb\n  ```\n ### 修改配置文件\n   ```bash\n   vim deploy.rb\n   ```\n   我的配置\n   ```bash\n    require 'mina/git'  # git 支持\n    \n    # Basic settings:\n    #   domain       - The hostname to SSH to.\n    #   deploy_to    - Path to deploy into.\n    #   repository   - Git repo to clone from. (needed by mina/git)\n    #   branch       - Branch name to deploy. (needed by mina/git)\n\n    set :deploy_to, '/var/www/html/test'             # VPS 上用来发布的目录\n    set :repository, 'git@github.com:xxx/test.git'   # github 仓库地址\n    set :branch, 'develop'                           # 用来发布的分支\n\n    set :keep_releases, 4              # 保留的发布版本数\n\n    # Manually create these paths in shared/ (eg: shared/config/database.yml) in your server.\n    # They will be linked in the 'deploy:link_shared_paths' step.\n    set :shared_paths, ['vendor', 'runtime', 'web/assets']    # 设置共享目录\n\n    # Optional settings:\n    #   set :user, 'foobar'    # Username in the server to SSH to.\n    #   set :port, '30000'     # SSH port number.\n    #   set :forward_agent, true     # SSH forward_agent.\n    \n    set :user, 'ubuntu'                              # 登录 VPS 的用户名\n    set :domain, 'x.x.x.x'                           # VPS 的 IP 地址\n\n    # This task is the environment that is loaded for most commands, such as\n    # `mina deploy` or `mina rake`.\n    task :environment do\n    end\n\n    # Put any custom mkdir's in here for when `mina setup` is ran.\n    # For Rails apps, we'll make some of the shared paths that are shared between\n    # all releases.\n    task :setup => :environment do\n      # 项目初始化，生成共享文件夹，安装 Yii2 Composer 支持\n      queue! %[mkdir -p \"#{deploy_to}/#{shared_path}/runtime\"]\n      queue! %[mkdir -p \"#{deploy_to}/#{shared_path}/vendor\"]\n      queue! %[mkdir -p \"#{deploy_to}/#{shared_path}/web/assets\"]\n      queue! %[chmod -R 777 \"#{deploy_to}/#{shared_path}/runtime\"]\n      queue! %[chmod -R 777 \"#{deploy_to}/#{shared_path}/web/assets\"]\n      queue 'composer global require \"fxp/composer-asset-plugin:^1.2.0\"'\n    end\n\n    desc \"Deploys the current version to the server.\"\n    task :deploy => :environment do\n      to :before_hook do\n        # Put things to run locally before ssh\n      end\n      deploy do\n        # Put things that will set up an empty directory into a fully set-up\n        # instance of your project.\n        invoke :'git:clone'                          # 更新代码\n        invoke :'deploy:link_shared_paths'           # 链接共享目录\n        queue 'chmod -R 755 yii'                     # 权限 \n        queue 'composer install'                     # 安装Composer包\n        queue './yii migrate'                        # 数据库迁移\n        quequ 'rm -rf runtime/cache/*'               # 清空缓存\n        quequ 'service nginx restart'                # 重启 Nginx\n        quequ 'service php7.0-fpm restart'           # 重启 PHP\n        invoke :'deploy:cleanup'                     # 清除多余的发布\n      end\n    end\n\n    # 用于回滚到上一个版本\n    desc \"Rollback to previous verison.\"\n    task :rollback => :environment do\n      queue %[echo \"----> Start to rollback\"]\n      queue %[if [ $(ls #{deploy_to}/releases | wc -l) -gt 1 ]; then echo \"---->Relink to previos release\" && unlink #{deploy_to}/current && ln -s #{deploy_to}/releases/\"$(ls #{deploy_to}/releases | tail -2 | head -1)\" #{deploy_to}/current && echo \"Remove old releases\" && rm -rf #{deploy_to}/releases/\"$(ls #{deploy_to}/releases | tail -1)\" && echo \"$(ls #{deploy_to}/releases | tail -1)\" > #{deploy_to}/last_version && echo \"Done. Rollback to v$(cat #{deploy_to}/last_version)\" ; else echo \"No more release to rollback\" ; fi]\n    end\n   ```\n ### 初始化部署环境 \n ```bash\n mina setup\n ```\n 运行后会在配置的发布目录中创建特有的发布目录结构，并执行配置中 `setup` 部分。\n \n### 修改 Nginx\n  ```bash\n  server {\n      listen       80;\n      server_name  test.com;\n      index index.html index.htm index.php;\n      root /var/www/html/test/current;    # 在发布目录上增加 current\n  ```\n ###  开始部署\n 在每一次需要部署时运行以下命令\n   ```bash\n    mina deploy\n   ```\n   \n## Tips\n * 将发布的开发机加入到 VPS 的免密码登录配置\n * 将 VPS 的 SSH Key 加入到 github 仓库的  Deploy keys 内","slug":"Use-Mina-Deploy-Yii2","published":1,"updated":"2017-02-12T15:52:39.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciz9wvzg8000og38k964q3w6t","content":"<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><h3 id=\"Mina\"><a href=\"#Mina\" class=\"headerlink\" title=\"Mina\"></a>Mina</h3><p>  Really fast deployer and server automation tool.<br>  Mina 是一款快速部署工具。它部署脚本简单，扩展性强，部署速度快 (只有一次 SSH 连接)，部署信息简单。</p>\n<h2 id=\"部署\"><a href=\"#部署\" class=\"headerlink\" title=\"部署\"></a>部署</h2><h3 id=\"前期准备\"><a href=\"#前期准备\" class=\"headerlink\" title=\"前期准备\"></a>前期准备</h3><ul>\n<li>一个 <a href=\"/2016-10-25/Create-Yii2-Project.html\" title=\"创建 Yii2 项目\">Yii2</a> 的项目仓库</li>\n<li>一台服务器安装了<a href=\"/2016-09-30/Install-Nginx-PHP7-MySQL-on-Ubuntu16-04.html\">基础环境</a>的VPS</li>\n<li>一台安装有 Ruby 环境的开发机<h3 id=\"安装Mina\"><a href=\"#安装Mina\" class=\"headerlink\" title=\"安装Mina\"></a>安装Mina</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">gem install mina</div></pre></td></tr></table></figure>\n</li>\n</ul>\n<h3 id=\"初始化配置\"><a href=\"#初始化配置\" class=\"headerlink\" title=\"初始化配置\"></a>初始化配置</h3>  <figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">mina init</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># 生成配置文件</span></div><div class=\"line\"><span class=\"comment\"># ├── config</span></div><div class=\"line\"><span class=\"comment\"># │   └── deploy.rb</span></div></pre></td></tr></table></figure>\n<h3 id=\"修改配置文件\"><a href=\"#修改配置文件\" class=\"headerlink\" title=\"修改配置文件\"></a>修改配置文件</h3>   <figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">vim deploy.rb</div></pre></td></tr></table></figure>\n<p>   我的配置<br>   <figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div></pre></td><td class=\"code\"><pre><div class=\"line\">require <span class=\"string\">'mina/git'</span>  <span class=\"comment\"># git 支持</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># Basic settings:</span></div><div class=\"line\"><span class=\"comment\">#   domain       - The hostname to SSH to.</span></div><div class=\"line\"><span class=\"comment\">#   deploy_to    - Path to deploy into.</span></div><div class=\"line\"><span class=\"comment\">#   repository   - Git repo to clone from. (needed by mina/git)</span></div><div class=\"line\"><span class=\"comment\">#   branch       - Branch name to deploy. (needed by mina/git)</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"built_in\">set</span> :deploy_to, <span class=\"string\">'/var/www/html/test'</span>             <span class=\"comment\"># VPS 上用来发布的目录</span></div><div class=\"line\"><span class=\"built_in\">set</span> :repository, <span class=\"string\">'git@github.com:xxx/test.git'</span>   <span class=\"comment\"># github 仓库地址</span></div><div class=\"line\"><span class=\"built_in\">set</span> :branch, <span class=\"string\">'develop'</span>                           <span class=\"comment\"># 用来发布的分支</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"built_in\">set</span> :keep_releases, 4              <span class=\"comment\"># 保留的发布版本数</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># Manually create these paths in shared/ (eg: shared/config/database.yml) in your server.</span></div><div class=\"line\"><span class=\"comment\"># They will be linked in the 'deploy:link_shared_paths' step.</span></div><div class=\"line\"><span class=\"built_in\">set</span> :shared_paths, [<span class=\"string\">'vendor'</span>, <span class=\"string\">'runtime'</span>, <span class=\"string\">'web/assets'</span>]    <span class=\"comment\"># 设置共享目录</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># Optional settings:</span></div><div class=\"line\"><span class=\"comment\">#   set :user, 'foobar'    # Username in the server to SSH to.</span></div><div class=\"line\"><span class=\"comment\">#   set :port, '30000'     # SSH port number.</span></div><div class=\"line\"><span class=\"comment\">#   set :forward_agent, true     # SSH forward_agent.</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"built_in\">set</span> :user, <span class=\"string\">'ubuntu'</span>                              <span class=\"comment\"># 登录 VPS 的用户名</span></div><div class=\"line\"><span class=\"built_in\">set</span> :domain, <span class=\"string\">'x.x.x.x'</span>                           <span class=\"comment\"># VPS 的 IP 地址</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># This task is the environment that is loaded for most commands, such as</span></div><div class=\"line\"><span class=\"comment\"># `mina deploy` or `mina rake`.</span></div><div class=\"line\">task :environment <span class=\"keyword\">do</span></div><div class=\"line\">end</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># Put any custom mkdir's in here for when `mina setup` is ran.</span></div><div class=\"line\"><span class=\"comment\"># For Rails apps, we'll make some of the shared paths that are shared between</span></div><div class=\"line\"><span class=\"comment\"># all releases.</span></div><div class=\"line\">task :setup =&gt; :environment <span class=\"keyword\">do</span></div><div class=\"line\">  <span class=\"comment\"># 项目初始化，生成共享文件夹，安装 Yii2 Composer 支持</span></div><div class=\"line\">  queue! %[mkdir -p <span class=\"string\">\"#&#123;deploy_to&#125;/#&#123;shared_path&#125;/runtime\"</span>]</div><div class=\"line\">  queue! %[mkdir -p <span class=\"string\">\"#&#123;deploy_to&#125;/#&#123;shared_path&#125;/vendor\"</span>]</div><div class=\"line\">  queue! %[mkdir -p <span class=\"string\">\"#&#123;deploy_to&#125;/#&#123;shared_path&#125;/web/assets\"</span>]</div><div class=\"line\">  queue! %[chmod -R 777 <span class=\"string\">\"#&#123;deploy_to&#125;/#&#123;shared_path&#125;/runtime\"</span>]</div><div class=\"line\">  queue! %[chmod -R 777 <span class=\"string\">\"#&#123;deploy_to&#125;/#&#123;shared_path&#125;/web/assets\"</span>]</div><div class=\"line\">  queue <span class=\"string\">'composer global require \"fxp/composer-asset-plugin:^1.2.0\"'</span></div><div class=\"line\">end</div><div class=\"line\"></div><div class=\"line\">desc <span class=\"string\">\"Deploys the current version to the server.\"</span></div><div class=\"line\">task :deploy =&gt; :environment <span class=\"keyword\">do</span></div><div class=\"line\">  to :before_hook <span class=\"keyword\">do</span></div><div class=\"line\">    <span class=\"comment\"># Put things to run locally before ssh</span></div><div class=\"line\">  end</div><div class=\"line\">  deploy <span class=\"keyword\">do</span></div><div class=\"line\">    <span class=\"comment\"># Put things that will set up an empty directory into a fully set-up</span></div><div class=\"line\">    <span class=\"comment\"># instance of your project.</span></div><div class=\"line\">    invoke :<span class=\"string\">'git:clone'</span>                          <span class=\"comment\"># 更新代码</span></div><div class=\"line\">    invoke :<span class=\"string\">'deploy:link_shared_paths'</span>           <span class=\"comment\"># 链接共享目录</span></div><div class=\"line\">    queue <span class=\"string\">'chmod -R 755 yii'</span>                     <span class=\"comment\"># 权限 </span></div><div class=\"line\">    queue <span class=\"string\">'composer install'</span>                     <span class=\"comment\"># 安装Composer包</span></div><div class=\"line\">    queue <span class=\"string\">'./yii migrate'</span>                        <span class=\"comment\"># 数据库迁移</span></div><div class=\"line\">    quequ <span class=\"string\">'rm -rf runtime/cache/*'</span>               <span class=\"comment\"># 清空缓存</span></div><div class=\"line\">    quequ <span class=\"string\">'service nginx restart'</span>                <span class=\"comment\"># 重启 Nginx</span></div><div class=\"line\">    quequ <span class=\"string\">'service php7.0-fpm restart'</span>           <span class=\"comment\"># 重启 PHP</span></div><div class=\"line\">    invoke :<span class=\"string\">'deploy:cleanup'</span>                     <span class=\"comment\"># 清除多余的发布</span></div><div class=\"line\">  end</div><div class=\"line\">end</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># 用于回滚到上一个版本</span></div><div class=\"line\">desc <span class=\"string\">\"Rollback to previous verison.\"</span></div><div class=\"line\">task :rollback =&gt; :environment <span class=\"keyword\">do</span></div><div class=\"line\">  queue %[<span class=\"built_in\">echo</span> <span class=\"string\">\"----&gt; Start to rollback\"</span>]</div><div class=\"line\">  queue %[<span class=\"keyword\">if</span> [ $(ls <span class=\"comment\">#&#123;deploy_to&#125;/releases | wc -l) -gt 1 ]; then echo \"----&gt;Relink to previos release\" &amp;&amp; unlink #&#123;deploy_to&#125;/current &amp;&amp; ln -s #&#123;deploy_to&#125;/releases/\"$(ls #&#123;deploy_to&#125;/releases | tail -2 | head -1)\" #&#123;deploy_to&#125;/current &amp;&amp; echo \"Remove old releases\" &amp;&amp; rm -rf #&#123;deploy_to&#125;/releases/\"$(ls #&#123;deploy_to&#125;/releases | tail -1)\" &amp;&amp; echo \"$(ls #&#123;deploy_to&#125;/releases | tail -1)\" &gt; #&#123;deploy_to&#125;/last_version &amp;&amp; echo \"Done. Rollback to v$(cat #&#123;deploy_to&#125;/last_version)\" ; else echo \"No more release to rollback\" ; fi]</span></div><div class=\"line\">end</div></pre></td></tr></table></figure></p>\n<h3 id=\"初始化部署环境\"><a href=\"#初始化部署环境\" class=\"headerlink\" title=\"初始化部署环境\"></a>初始化部署环境</h3> <figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">mina setup</div></pre></td></tr></table></figure>\n<p> 运行后会在配置的发布目录中创建特有的发布目录结构，并执行配置中 <code>setup</code> 部分。</p>\n<h3 id=\"修改-Nginx\"><a href=\"#修改-Nginx\" class=\"headerlink\" title=\"修改 Nginx\"></a>修改 Nginx</h3>  <figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">server &#123;</div><div class=\"line\">    listen       80;</div><div class=\"line\">    server_name  test.com;</div><div class=\"line\">    index index.html index.htm index.php;</div><div class=\"line\">    root /var/www/html/<span class=\"built_in\">test</span>/current;    <span class=\"comment\"># 在发布目录上增加 current</span></div></pre></td></tr></table></figure>\n<h3 id=\"开始部署\"><a href=\"#开始部署\" class=\"headerlink\" title=\"开始部署\"></a>开始部署</h3><p> 在每一次需要部署时运行以下命令<br>   <figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">mina deploy</div></pre></td></tr></table></figure></p>\n<h2 id=\"Tips\"><a href=\"#Tips\" class=\"headerlink\" title=\"Tips\"></a>Tips</h2><ul>\n<li>将发布的开发机加入到 VPS 的免密码登录配置</li>\n<li>将 VPS 的 SSH Key 加入到 github 仓库的  Deploy keys 内</li>\n</ul>\n","excerpt":"","more":"<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><h3 id=\"Mina\"><a href=\"#Mina\" class=\"headerlink\" title=\"Mina\"></a>Mina</h3><p>  Really fast deployer and server automation tool.<br>  Mina 是一款快速部署工具。它部署脚本简单，扩展性强，部署速度快 (只有一次 SSH 连接)，部署信息简单。</p>\n<h2 id=\"部署\"><a href=\"#部署\" class=\"headerlink\" title=\"部署\"></a>部署</h2><h3 id=\"前期准备\"><a href=\"#前期准备\" class=\"headerlink\" title=\"前期准备\"></a>前期准备</h3><ul>\n<li>一个 <a href=\"/2016-10-25/Create-Yii2-Project.html\" title=\"创建 Yii2 项目\">Yii2</a> 的项目仓库</li>\n<li>一台服务器安装了<a href=\"/2016-09-30/Install-Nginx-PHP7-MySQL-on-Ubuntu16-04.html\">基础环境</a>的VPS</li>\n<li>一台安装有 Ruby 环境的开发机<h3 id=\"安装Mina\"><a href=\"#安装Mina\" class=\"headerlink\" title=\"安装Mina\"></a>安装Mina</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">gem install mina</div></pre></td></tr></table></figure>\n</li>\n</ul>\n<h3 id=\"初始化配置\"><a href=\"#初始化配置\" class=\"headerlink\" title=\"初始化配置\"></a>初始化配置</h3>  <figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">mina init</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># 生成配置文件</span></div><div class=\"line\"><span class=\"comment\"># ├── config</span></div><div class=\"line\"><span class=\"comment\"># │   └── deploy.rb</span></div></pre></td></tr></table></figure>\n<h3 id=\"修改配置文件\"><a href=\"#修改配置文件\" class=\"headerlink\" title=\"修改配置文件\"></a>修改配置文件</h3>   <figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">vim deploy.rb</div></pre></td></tr></table></figure>\n<p>   我的配置<br>   <figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div></pre></td><td class=\"code\"><pre><div class=\"line\">require <span class=\"string\">'mina/git'</span>  <span class=\"comment\"># git 支持</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># Basic settings:</span></div><div class=\"line\"><span class=\"comment\">#   domain       - The hostname to SSH to.</span></div><div class=\"line\"><span class=\"comment\">#   deploy_to    - Path to deploy into.</span></div><div class=\"line\"><span class=\"comment\">#   repository   - Git repo to clone from. (needed by mina/git)</span></div><div class=\"line\"><span class=\"comment\">#   branch       - Branch name to deploy. (needed by mina/git)</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"built_in\">set</span> :deploy_to, <span class=\"string\">'/var/www/html/test'</span>             <span class=\"comment\"># VPS 上用来发布的目录</span></div><div class=\"line\"><span class=\"built_in\">set</span> :repository, <span class=\"string\">'git@github.com:xxx/test.git'</span>   <span class=\"comment\"># github 仓库地址</span></div><div class=\"line\"><span class=\"built_in\">set</span> :branch, <span class=\"string\">'develop'</span>                           <span class=\"comment\"># 用来发布的分支</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"built_in\">set</span> :keep_releases, 4              <span class=\"comment\"># 保留的发布版本数</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># Manually create these paths in shared/ (eg: shared/config/database.yml) in your server.</span></div><div class=\"line\"><span class=\"comment\"># They will be linked in the 'deploy:link_shared_paths' step.</span></div><div class=\"line\"><span class=\"built_in\">set</span> :shared_paths, [<span class=\"string\">'vendor'</span>, <span class=\"string\">'runtime'</span>, <span class=\"string\">'web/assets'</span>]    <span class=\"comment\"># 设置共享目录</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># Optional settings:</span></div><div class=\"line\"><span class=\"comment\">#   set :user, 'foobar'    # Username in the server to SSH to.</span></div><div class=\"line\"><span class=\"comment\">#   set :port, '30000'     # SSH port number.</span></div><div class=\"line\"><span class=\"comment\">#   set :forward_agent, true     # SSH forward_agent.</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"built_in\">set</span> :user, <span class=\"string\">'ubuntu'</span>                              <span class=\"comment\"># 登录 VPS 的用户名</span></div><div class=\"line\"><span class=\"built_in\">set</span> :domain, <span class=\"string\">'x.x.x.x'</span>                           <span class=\"comment\"># VPS 的 IP 地址</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># This task is the environment that is loaded for most commands, such as</span></div><div class=\"line\"><span class=\"comment\"># `mina deploy` or `mina rake`.</span></div><div class=\"line\">task :environment <span class=\"keyword\">do</span></div><div class=\"line\">end</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># Put any custom mkdir's in here for when `mina setup` is ran.</span></div><div class=\"line\"><span class=\"comment\"># For Rails apps, we'll make some of the shared paths that are shared between</span></div><div class=\"line\"><span class=\"comment\"># all releases.</span></div><div class=\"line\">task :setup =&gt; :environment <span class=\"keyword\">do</span></div><div class=\"line\">  <span class=\"comment\"># 项目初始化，生成共享文件夹，安装 Yii2 Composer 支持</span></div><div class=\"line\">  queue! %[mkdir -p <span class=\"string\">\"#&#123;deploy_to&#125;/#&#123;shared_path&#125;/runtime\"</span>]</div><div class=\"line\">  queue! %[mkdir -p <span class=\"string\">\"#&#123;deploy_to&#125;/#&#123;shared_path&#125;/vendor\"</span>]</div><div class=\"line\">  queue! %[mkdir -p <span class=\"string\">\"#&#123;deploy_to&#125;/#&#123;shared_path&#125;/web/assets\"</span>]</div><div class=\"line\">  queue! %[chmod -R 777 <span class=\"string\">\"#&#123;deploy_to&#125;/#&#123;shared_path&#125;/runtime\"</span>]</div><div class=\"line\">  queue! %[chmod -R 777 <span class=\"string\">\"#&#123;deploy_to&#125;/#&#123;shared_path&#125;/web/assets\"</span>]</div><div class=\"line\">  queue <span class=\"string\">'composer global require \"fxp/composer-asset-plugin:^1.2.0\"'</span></div><div class=\"line\">end</div><div class=\"line\"></div><div class=\"line\">desc <span class=\"string\">\"Deploys the current version to the server.\"</span></div><div class=\"line\">task :deploy =&gt; :environment <span class=\"keyword\">do</span></div><div class=\"line\">  to :before_hook <span class=\"keyword\">do</span></div><div class=\"line\">    <span class=\"comment\"># Put things to run locally before ssh</span></div><div class=\"line\">  end</div><div class=\"line\">  deploy <span class=\"keyword\">do</span></div><div class=\"line\">    <span class=\"comment\"># Put things that will set up an empty directory into a fully set-up</span></div><div class=\"line\">    <span class=\"comment\"># instance of your project.</span></div><div class=\"line\">    invoke :<span class=\"string\">'git:clone'</span>                          <span class=\"comment\"># 更新代码</span></div><div class=\"line\">    invoke :<span class=\"string\">'deploy:link_shared_paths'</span>           <span class=\"comment\"># 链接共享目录</span></div><div class=\"line\">    queue <span class=\"string\">'chmod -R 755 yii'</span>                     <span class=\"comment\"># 权限 </span></div><div class=\"line\">    queue <span class=\"string\">'composer install'</span>                     <span class=\"comment\"># 安装Composer包</span></div><div class=\"line\">    queue <span class=\"string\">'./yii migrate'</span>                        <span class=\"comment\"># 数据库迁移</span></div><div class=\"line\">    quequ <span class=\"string\">'rm -rf runtime/cache/*'</span>               <span class=\"comment\"># 清空缓存</span></div><div class=\"line\">    quequ <span class=\"string\">'service nginx restart'</span>                <span class=\"comment\"># 重启 Nginx</span></div><div class=\"line\">    quequ <span class=\"string\">'service php7.0-fpm restart'</span>           <span class=\"comment\"># 重启 PHP</span></div><div class=\"line\">    invoke :<span class=\"string\">'deploy:cleanup'</span>                     <span class=\"comment\"># 清除多余的发布</span></div><div class=\"line\">  end</div><div class=\"line\">end</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># 用于回滚到上一个版本</span></div><div class=\"line\">desc <span class=\"string\">\"Rollback to previous verison.\"</span></div><div class=\"line\">task :rollback =&gt; :environment <span class=\"keyword\">do</span></div><div class=\"line\">  queue %[<span class=\"built_in\">echo</span> <span class=\"string\">\"----&gt; Start to rollback\"</span>]</div><div class=\"line\">  queue %[<span class=\"keyword\">if</span> [ $(ls <span class=\"comment\">#&#123;deploy_to&#125;/releases | wc -l) -gt 1 ]; then echo \"----&gt;Relink to previos release\" &amp;&amp; unlink #&#123;deploy_to&#125;/current &amp;&amp; ln -s #&#123;deploy_to&#125;/releases/\"$(ls #&#123;deploy_to&#125;/releases | tail -2 | head -1)\" #&#123;deploy_to&#125;/current &amp;&amp; echo \"Remove old releases\" &amp;&amp; rm -rf #&#123;deploy_to&#125;/releases/\"$(ls #&#123;deploy_to&#125;/releases | tail -1)\" &amp;&amp; echo \"$(ls #&#123;deploy_to&#125;/releases | tail -1)\" &gt; #&#123;deploy_to&#125;/last_version &amp;&amp; echo \"Done. Rollback to v$(cat #&#123;deploy_to&#125;/last_version)\" ; else echo \"No more release to rollback\" ; fi]</span></div><div class=\"line\">end</div></pre></td></tr></table></figure></p>\n<h3 id=\"初始化部署环境\"><a href=\"#初始化部署环境\" class=\"headerlink\" title=\"初始化部署环境\"></a>初始化部署环境</h3> <figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">mina setup</div></pre></td></tr></table></figure>\n<p> 运行后会在配置的发布目录中创建特有的发布目录结构，并执行配置中 <code>setup</code> 部分。</p>\n<h3 id=\"修改-Nginx\"><a href=\"#修改-Nginx\" class=\"headerlink\" title=\"修改 Nginx\"></a>修改 Nginx</h3>  <figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">server &#123;</div><div class=\"line\">    listen       80;</div><div class=\"line\">    server_name  test.com;</div><div class=\"line\">    index index.html index.htm index.php;</div><div class=\"line\">    root /var/www/html/<span class=\"built_in\">test</span>/current;    <span class=\"comment\"># 在发布目录上增加 current</span></div></pre></td></tr></table></figure>\n<h3 id=\"开始部署\"><a href=\"#开始部署\" class=\"headerlink\" title=\"开始部署\"></a>开始部署</h3><p> 在每一次需要部署时运行以下命令<br>   <figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">mina deploy</div></pre></td></tr></table></figure></p>\n<h2 id=\"Tips\"><a href=\"#Tips\" class=\"headerlink\" title=\"Tips\"></a>Tips</h2><ul>\n<li>将发布的开发机加入到 VPS 的免密码登录配置</li>\n<li>将 VPS 的 SSH Key 加入到 github 仓库的  Deploy keys 内</li>\n</ul>\n"},{"title":"GEM 笔记","date":"2016-10-12T07:44:28.000Z","description":"记录一些比较常用的GEM相关的命令。","_content":"## 前言\n本文记录了在使用过程中经常出现的一些命令\n\n## 记录\n\n### 更换镜像\n由于国内网络问题，在使用很多东西前我们第一件事情就是换镜像。[淘宝镜像](https://ruby.taobao.org/ '淘宝镜像')\n```bash\ngem sources --remove https://rubygems.org/\ngem sources -a https://ruby.taobao.org/\n\ngem sources -l\n```\n```bash\n*** CURRENT SOURCES ***\n\nhttps://ruby.taobao.org\n# 请确保只有 ruby.taobao.org\n```\n\n### 常用命令\n```bash\ngem -v                                 # 查看RubyGems软件的版本\n\ngem help                               # 显示RubyGem使用帮助\ngem help example                       # 列出RubyGem命令一些使用范例\n\ngem install [gemname]                  # 安装指定gem包，程序先从本机查找gem包并安装，如果本地没有，则从远程gem安装。\ngem install -l [gemname]               # 仅从本机安装gem包\ngem install -r [gemname]               # 仅从远程安装gem包\ngem install [gemname] --version=[ver]  # 安装指定版本的gem包\n\ngem uninstall [gemname]                # 删除指定的gem包，注意此命令将删除所有已安装的版本\ngem uninstall [gemname] --version=[ver] # 删除某指定版本gem\n\ngem update --system                     # 更新升级RubyGems软件自身\ngem update [gemname]                    # 更新所有|指定已安装的gem包\n\ngem list                                # 查看本机已安装的所有gem包 # 显示RubyGem使用帮助\n\ngem list | cut -d\" \" -f1 | xargs gem uninstall –aIx  # 删除系统中的所有gems\n# -I Ignore dependency requirements while uninstalling\n# -a Uninstall all matching versions\n# -x Uninstall applicable executables without confirmation\n\ngem cleanup                             # 清除所有包旧版本，保留最新版本  -d 查看那些会被删除   -v\n\ngem environment                         # 查看gem的环境\n```","source":"_posts/gem-note.md","raw":"---\ntitle: GEM 笔记\ndate: 2016-10-12 15:44:28\ntags:\n  -  Software\n  -  GEM\n  -  Ruby\ncategories:\n  -  Software\ndescription: 记录一些比较常用的GEM相关的命令。\n---\n## 前言\n本文记录了在使用过程中经常出现的一些命令\n\n## 记录\n\n### 更换镜像\n由于国内网络问题，在使用很多东西前我们第一件事情就是换镜像。[淘宝镜像](https://ruby.taobao.org/ '淘宝镜像')\n```bash\ngem sources --remove https://rubygems.org/\ngem sources -a https://ruby.taobao.org/\n\ngem sources -l\n```\n```bash\n*** CURRENT SOURCES ***\n\nhttps://ruby.taobao.org\n# 请确保只有 ruby.taobao.org\n```\n\n### 常用命令\n```bash\ngem -v                                 # 查看RubyGems软件的版本\n\ngem help                               # 显示RubyGem使用帮助\ngem help example                       # 列出RubyGem命令一些使用范例\n\ngem install [gemname]                  # 安装指定gem包，程序先从本机查找gem包并安装，如果本地没有，则从远程gem安装。\ngem install -l [gemname]               # 仅从本机安装gem包\ngem install -r [gemname]               # 仅从远程安装gem包\ngem install [gemname] --version=[ver]  # 安装指定版本的gem包\n\ngem uninstall [gemname]                # 删除指定的gem包，注意此命令将删除所有已安装的版本\ngem uninstall [gemname] --version=[ver] # 删除某指定版本gem\n\ngem update --system                     # 更新升级RubyGems软件自身\ngem update [gemname]                    # 更新所有|指定已安装的gem包\n\ngem list                                # 查看本机已安装的所有gem包 # 显示RubyGem使用帮助\n\ngem list | cut -d\" \" -f1 | xargs gem uninstall –aIx  # 删除系统中的所有gems\n# -I Ignore dependency requirements while uninstalling\n# -a Uninstall all matching versions\n# -x Uninstall applicable executables without confirmation\n\ngem cleanup                             # 清除所有包旧版本，保留最新版本  -d 查看那些会被删除   -v\n\ngem environment                         # 查看gem的环境\n```","slug":"gem-note","published":1,"updated":"2017-02-12T15:52:39.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciz9wvzgb000sg38kicisuvjy","content":"<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>本文记录了在使用过程中经常出现的一些命令</p>\n<h2 id=\"记录\"><a href=\"#记录\" class=\"headerlink\" title=\"记录\"></a>记录</h2><h3 id=\"更换镜像\"><a href=\"#更换镜像\" class=\"headerlink\" title=\"更换镜像\"></a>更换镜像</h3><p>由于国内网络问题，在使用很多东西前我们第一件事情就是换镜像。<a href=\"https://ruby.taobao.org/\" title=\"淘宝镜像\" target=\"_blank\" rel=\"external\">淘宝镜像</a><br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">gem sources --remove https://rubygems.org/</div><div class=\"line\">gem sources <span class=\"_\">-a</span> https://ruby.taobao.org/</div><div class=\"line\"></div><div class=\"line\">gem sources <span class=\"_\">-l</span></div></pre></td></tr></table></figure></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">*** CURRENT SOURCES ***</div><div class=\"line\"></div><div class=\"line\">https://ruby.taobao.org</div><div class=\"line\"><span class=\"comment\"># 请确保只有 ruby.taobao.org</span></div></pre></td></tr></table></figure>\n<h3 id=\"常用命令\"><a href=\"#常用命令\" class=\"headerlink\" title=\"常用命令\"></a>常用命令</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div></pre></td><td class=\"code\"><pre><div class=\"line\">gem -v                                 <span class=\"comment\"># 查看RubyGems软件的版本</span></div><div class=\"line\"></div><div class=\"line\">gem <span class=\"built_in\">help</span>                               <span class=\"comment\"># 显示RubyGem使用帮助</span></div><div class=\"line\">gem <span class=\"built_in\">help</span> example                       <span class=\"comment\"># 列出RubyGem命令一些使用范例</span></div><div class=\"line\"></div><div class=\"line\">gem install [gemname]                  <span class=\"comment\"># 安装指定gem包，程序先从本机查找gem包并安装，如果本地没有，则从远程gem安装。</span></div><div class=\"line\">gem install <span class=\"_\">-l</span> [gemname]               <span class=\"comment\"># 仅从本机安装gem包</span></div><div class=\"line\">gem install -r [gemname]               <span class=\"comment\"># 仅从远程安装gem包</span></div><div class=\"line\">gem install [gemname] --version=[ver]  <span class=\"comment\"># 安装指定版本的gem包</span></div><div class=\"line\"></div><div class=\"line\">gem uninstall [gemname]                <span class=\"comment\"># 删除指定的gem包，注意此命令将删除所有已安装的版本</span></div><div class=\"line\">gem uninstall [gemname] --version=[ver] <span class=\"comment\"># 删除某指定版本gem</span></div><div class=\"line\"></div><div class=\"line\">gem update --system                     <span class=\"comment\"># 更新升级RubyGems软件自身</span></div><div class=\"line\">gem update [gemname]                    <span class=\"comment\"># 更新所有|指定已安装的gem包</span></div><div class=\"line\"></div><div class=\"line\">gem list                                <span class=\"comment\"># 查看本机已安装的所有gem包 # 显示RubyGem使用帮助</span></div><div class=\"line\"></div><div class=\"line\">gem list | cut <span class=\"_\">-d</span><span class=\"string\">\" \"</span> <span class=\"_\">-f</span>1 | xargs gem uninstall –aIx  <span class=\"comment\"># 删除系统中的所有gems</span></div><div class=\"line\"><span class=\"comment\"># -I Ignore dependency requirements while uninstalling</span></div><div class=\"line\"><span class=\"comment\"># -a Uninstall all matching versions</span></div><div class=\"line\"><span class=\"comment\"># -x Uninstall applicable executables without confirmation</span></div><div class=\"line\"></div><div class=\"line\">gem cleanup                             <span class=\"comment\"># 清除所有包旧版本，保留最新版本  -d 查看那些会被删除   -v</span></div><div class=\"line\"></div><div class=\"line\">gem environment                         <span class=\"comment\"># 查看gem的环境</span></div></pre></td></tr></table></figure>","excerpt":"","more":"<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>本文记录了在使用过程中经常出现的一些命令</p>\n<h2 id=\"记录\"><a href=\"#记录\" class=\"headerlink\" title=\"记录\"></a>记录</h2><h3 id=\"更换镜像\"><a href=\"#更换镜像\" class=\"headerlink\" title=\"更换镜像\"></a>更换镜像</h3><p>由于国内网络问题，在使用很多东西前我们第一件事情就是换镜像。<a href=\"https://ruby.taobao.org/\" title=\"淘宝镜像\">淘宝镜像</a><br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">gem sources --remove https://rubygems.org/</div><div class=\"line\">gem sources <span class=\"_\">-a</span> https://ruby.taobao.org/</div><div class=\"line\"></div><div class=\"line\">gem sources <span class=\"_\">-l</span></div></pre></td></tr></table></figure></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">*** CURRENT SOURCES ***</div><div class=\"line\"></div><div class=\"line\">https://ruby.taobao.org</div><div class=\"line\"><span class=\"comment\"># 请确保只有 ruby.taobao.org</span></div></pre></td></tr></table></figure>\n<h3 id=\"常用命令\"><a href=\"#常用命令\" class=\"headerlink\" title=\"常用命令\"></a>常用命令</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div></pre></td><td class=\"code\"><pre><div class=\"line\">gem -v                                 <span class=\"comment\"># 查看RubyGems软件的版本</span></div><div class=\"line\"></div><div class=\"line\">gem <span class=\"built_in\">help</span>                               <span class=\"comment\"># 显示RubyGem使用帮助</span></div><div class=\"line\">gem <span class=\"built_in\">help</span> example                       <span class=\"comment\"># 列出RubyGem命令一些使用范例</span></div><div class=\"line\"></div><div class=\"line\">gem install [gemname]                  <span class=\"comment\"># 安装指定gem包，程序先从本机查找gem包并安装，如果本地没有，则从远程gem安装。</span></div><div class=\"line\">gem install <span class=\"_\">-l</span> [gemname]               <span class=\"comment\"># 仅从本机安装gem包</span></div><div class=\"line\">gem install -r [gemname]               <span class=\"comment\"># 仅从远程安装gem包</span></div><div class=\"line\">gem install [gemname] --version=[ver]  <span class=\"comment\"># 安装指定版本的gem包</span></div><div class=\"line\"></div><div class=\"line\">gem uninstall [gemname]                <span class=\"comment\"># 删除指定的gem包，注意此命令将删除所有已安装的版本</span></div><div class=\"line\">gem uninstall [gemname] --version=[ver] <span class=\"comment\"># 删除某指定版本gem</span></div><div class=\"line\"></div><div class=\"line\">gem update --system                     <span class=\"comment\"># 更新升级RubyGems软件自身</span></div><div class=\"line\">gem update [gemname]                    <span class=\"comment\"># 更新所有|指定已安装的gem包</span></div><div class=\"line\"></div><div class=\"line\">gem list                                <span class=\"comment\"># 查看本机已安装的所有gem包 # 显示RubyGem使用帮助</span></div><div class=\"line\"></div><div class=\"line\">gem list | cut <span class=\"_\">-d</span><span class=\"string\">\" \"</span> <span class=\"_\">-f</span>1 | xargs gem uninstall –aIx  <span class=\"comment\"># 删除系统中的所有gems</span></div><div class=\"line\"><span class=\"comment\"># -I Ignore dependency requirements while uninstalling</span></div><div class=\"line\"><span class=\"comment\"># -a Uninstall all matching versions</span></div><div class=\"line\"><span class=\"comment\"># -x Uninstall applicable executables without confirmation</span></div><div class=\"line\"></div><div class=\"line\">gem cleanup                             <span class=\"comment\"># 清除所有包旧版本，保留最新版本  -d 查看那些会被删除   -v</span></div><div class=\"line\"></div><div class=\"line\">gem environment                         <span class=\"comment\"># 查看gem的环境</span></div></pre></td></tr></table></figure>"},{"title":"Ubuntu 下增加 Swap","date":"2016-10-21T02:29:11.000Z","description":"现在很多 Ubuntu 系统的 VPS 默认是不开启 Swap ，或者 Swap 大小不足。本文介绍如何在 Ubuntu 系统下增加 Swap。","_content":"## 前言\n\n### 什么是Swap\n   Linux 系统中的 Swap ，又名交换空间。是类似于 Windows 系统的虚拟内存 (pagefile.sys)，当内存不够用的时候会把一部分硬盘空间虚拟成内存，用来存储内存中暂时不使用的数据。\n   \n## 安装\n1. #### 查看\n   ```bash\n   free -m\n   ```\n   ```bash\n                total       used       free     shared    buffers     cached\n   Mem:          3952       2035       1916          9        217       1392\n   -/+ buffers/cache:        425       3526\n   Swap:            0          0          0\n   ```\n   可以看到 Swap 没有开启，下面我们来将其增加到内存大小 (4G)。\n   \n2. #### 创建 Swap 文件\n    ```bash\n    mkdir swap\n    \n    cd swap\n    \n    sudo dd if=/dev/zero of=swapfile bs=1024 count=4M   # bs 表示块大小  count 表示块数目  1024 * 4M  = 4G\n    # 4194304+0 records in\n    # 4194304+0 records out\n    # 4294967296 bytes (4.3 GB) copied, 88.3999 s, 48.6 MB/s\n    ```\n    把文件转换成 Swap 文件\n    ```bash\n    sudo mkswap -f  swapfile \n    # Setting up swapspace version 1, size = 4194300 KiB\n    # no label, UUID=bebbcbad-dda2-49f9-9aab-4b24b1d62d87\n    ```\n3. #### 激活 Swap \n    ```bash\n    sudo swapon swapfile\n    ```\n     查看激活情况\n    ```bash\n    free -m  \n    ```\n    ```bash\n                 total       used       free     shared    buffers     cached\n    Mem:          3952       3842        109          9          1       3369\n    -/+ buffers/cache:        470       3481\n    Swap:         4095          0       4095\n    ```\n4. #### 配置\n    * 修改swappiness\n      swappiness 为 0 - 100的数值，数值越大表示越积极的去使用 Swap。\n      \n      - 暂时修改\n        ```bash\n        sudo sysctl vm.swappiness=40\n        ```\n      - 永久修改\n         ```bash\n         sudo vim /etc/sysctl.conf\n         # 增加一行\n         vm.swappiness = 40\n         ```\n    * 修改权限\n         设置成只有 root 用户具有读写权限\n         ```bash\n         sudo chown root:root /swap/swapfile\n         sudo chmod 0600 /swap/swapfile\n         ```\n5. #### 开机启动\n    ```bash\n    sudo vim /etc/fstab\n    ```\n    在文件最后面添加\n    ```bash\n    /swap/swapfile       none    swap    sw      0       0\n    ```","source":"_posts/Ubuntu-Swap.md","raw":"---\ntitle: Ubuntu 下增加 Swap \ndate: 2016-10-21 10:29:11\ntags:\n  - Ubuntu\n  - Swap\n  - Server\ncategories:\n  - Server\ndescription: 现在很多 Ubuntu 系统的 VPS 默认是不开启 Swap ，或者 Swap 大小不足。本文介绍如何在 Ubuntu 系统下增加 Swap。\n---\n## 前言\n\n### 什么是Swap\n   Linux 系统中的 Swap ，又名交换空间。是类似于 Windows 系统的虚拟内存 (pagefile.sys)，当内存不够用的时候会把一部分硬盘空间虚拟成内存，用来存储内存中暂时不使用的数据。\n   \n## 安装\n1. #### 查看\n   ```bash\n   free -m\n   ```\n   ```bash\n                total       used       free     shared    buffers     cached\n   Mem:          3952       2035       1916          9        217       1392\n   -/+ buffers/cache:        425       3526\n   Swap:            0          0          0\n   ```\n   可以看到 Swap 没有开启，下面我们来将其增加到内存大小 (4G)。\n   \n2. #### 创建 Swap 文件\n    ```bash\n    mkdir swap\n    \n    cd swap\n    \n    sudo dd if=/dev/zero of=swapfile bs=1024 count=4M   # bs 表示块大小  count 表示块数目  1024 * 4M  = 4G\n    # 4194304+0 records in\n    # 4194304+0 records out\n    # 4294967296 bytes (4.3 GB) copied, 88.3999 s, 48.6 MB/s\n    ```\n    把文件转换成 Swap 文件\n    ```bash\n    sudo mkswap -f  swapfile \n    # Setting up swapspace version 1, size = 4194300 KiB\n    # no label, UUID=bebbcbad-dda2-49f9-9aab-4b24b1d62d87\n    ```\n3. #### 激活 Swap \n    ```bash\n    sudo swapon swapfile\n    ```\n     查看激活情况\n    ```bash\n    free -m  \n    ```\n    ```bash\n                 total       used       free     shared    buffers     cached\n    Mem:          3952       3842        109          9          1       3369\n    -/+ buffers/cache:        470       3481\n    Swap:         4095          0       4095\n    ```\n4. #### 配置\n    * 修改swappiness\n      swappiness 为 0 - 100的数值，数值越大表示越积极的去使用 Swap。\n      \n      - 暂时修改\n        ```bash\n        sudo sysctl vm.swappiness=40\n        ```\n      - 永久修改\n         ```bash\n         sudo vim /etc/sysctl.conf\n         # 增加一行\n         vm.swappiness = 40\n         ```\n    * 修改权限\n         设置成只有 root 用户具有读写权限\n         ```bash\n         sudo chown root:root /swap/swapfile\n         sudo chmod 0600 /swap/swapfile\n         ```\n5. #### 开机启动\n    ```bash\n    sudo vim /etc/fstab\n    ```\n    在文件最后面添加\n    ```bash\n    /swap/swapfile       none    swap    sw      0       0\n    ```","slug":"Ubuntu-Swap","published":1,"updated":"2017-02-12T15:52:39.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciz9wvzgd000vg38kjw7asbwe","content":"<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><h3 id=\"什么是Swap\"><a href=\"#什么是Swap\" class=\"headerlink\" title=\"什么是Swap\"></a>什么是Swap</h3><p>   Linux 系统中的 Swap ，又名交换空间。是类似于 Windows 系统的虚拟内存 (pagefile.sys)，当内存不够用的时候会把一部分硬盘空间虚拟成内存，用来存储内存中暂时不使用的数据。</p>\n<h2 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h2><ol>\n<li><h4 id=\"查看\"><a href=\"#查看\" class=\"headerlink\" title=\"查看\"></a>查看</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">free -m</div></pre></td></tr></table></figure>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">             total       used       free     shared    buffers     cached</div><div class=\"line\">Mem:          3952       2035       1916          9        217       1392</div><div class=\"line\">-/+ buffers/cache:        425       3526</div><div class=\"line\">Swap:            0          0          0</div></pre></td></tr></table></figure>\n<p>可以看到 Swap 没有开启，下面我们来将其增加到内存大小 (4G)。</p>\n</li>\n<li><h4 id=\"创建-Swap-文件\"><a href=\"#创建-Swap-文件\" class=\"headerlink\" title=\"创建 Swap 文件\"></a>创建 Swap 文件</h4> <figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\">mkdir swap</div><div class=\"line\"></div><div class=\"line\"><span class=\"built_in\">cd</span> swap</div><div class=\"line\"></div><div class=\"line\">sudo dd <span class=\"keyword\">if</span>=/dev/zero of=swapfile bs=1024 count=4M   <span class=\"comment\"># bs 表示块大小  count 表示块数目  1024 * 4M  = 4G</span></div><div class=\"line\"><span class=\"comment\"># 4194304+0 records in</span></div><div class=\"line\"><span class=\"comment\"># 4194304+0 records out</span></div><div class=\"line\"><span class=\"comment\"># 4294967296 bytes (4.3 GB) copied, 88.3999 s, 48.6 MB/s</span></div></pre></td></tr></table></figure>\n<p> 把文件转换成 Swap 文件</p>\n <figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">sudo mkswap <span class=\"_\">-f</span>  swapfile </div><div class=\"line\"><span class=\"comment\"># Setting up swapspace version 1, size = 4194300 KiB</span></div><div class=\"line\"><span class=\"comment\"># no label, UUID=bebbcbad-dda2-49f9-9aab-4b24b1d62d87</span></div></pre></td></tr></table></figure>\n</li>\n<li><h4 id=\"激活-Swap\"><a href=\"#激活-Swap\" class=\"headerlink\" title=\"激活 Swap\"></a>激活 Swap</h4> <figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">sudo swapon swapfile</div></pre></td></tr></table></figure>\n<p>  查看激活情况</p>\n <figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">free -m</div></pre></td></tr></table></figure>\n <figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">             total       used       free     shared    buffers     cached</div><div class=\"line\">Mem:          3952       3842        109          9          1       3369</div><div class=\"line\">-/+ buffers/cache:        470       3481</div><div class=\"line\">Swap:         4095          0       4095</div></pre></td></tr></table></figure>\n</li>\n<li><h4 id=\"配置\"><a href=\"#配置\" class=\"headerlink\" title=\"配置\"></a>配置</h4><ul>\n<li><p>修改swappiness<br>swappiness 为 0 - 100的数值，数值越大表示越积极的去使用 Swap。</p>\n<ul>\n<li><p>暂时修改</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">sudo sysctl vm.swappiness=40</div></pre></td></tr></table></figure>\n</li>\n<li><p>永久修改</p>\n <figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">sudo vim /etc/sysctl.conf</div><div class=\"line\"><span class=\"comment\"># 增加一行</span></div><div class=\"line\">vm.swappiness = 40</div></pre></td></tr></table></figure>\n</li>\n</ul>\n</li>\n<li><p>修改权限<br>   设置成只有 root 用户具有读写权限</p>\n   <figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">sudo chown root:root /swap/swapfile</div><div class=\"line\">sudo chmod 0600 /swap/swapfile</div></pre></td></tr></table></figure>\n</li>\n</ul>\n</li>\n<li><h4 id=\"开机启动\"><a href=\"#开机启动\" class=\"headerlink\" title=\"开机启动\"></a>开机启动</h4> <figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">sudo vim /etc/fstab</div></pre></td></tr></table></figure>\n<p> 在文件最后面添加</p>\n <figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">/swap/swapfile       none    swap    sw      0       0</div></pre></td></tr></table></figure></li>\n</ol>\n","excerpt":"","more":"<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><h3 id=\"什么是Swap\"><a href=\"#什么是Swap\" class=\"headerlink\" title=\"什么是Swap\"></a>什么是Swap</h3><p>   Linux 系统中的 Swap ，又名交换空间。是类似于 Windows 系统的虚拟内存 (pagefile.sys)，当内存不够用的时候会把一部分硬盘空间虚拟成内存，用来存储内存中暂时不使用的数据。</p>\n<h2 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h2><ol>\n<li><h4 id=\"查看\"><a href=\"#查看\" class=\"headerlink\" title=\"查看\"></a>查看</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">free -m</div></pre></td></tr></table></figure>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">             total       used       free     shared    buffers     cached</div><div class=\"line\">Mem:          3952       2035       1916          9        217       1392</div><div class=\"line\">-/+ buffers/cache:        425       3526</div><div class=\"line\">Swap:            0          0          0</div></pre></td></tr></table></figure>\n<p>可以看到 Swap 没有开启，下面我们来将其增加到内存大小 (4G)。</p>\n</li>\n<li><h4 id=\"创建-Swap-文件\"><a href=\"#创建-Swap-文件\" class=\"headerlink\" title=\"创建 Swap 文件\"></a>创建 Swap 文件</h4> <figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\">mkdir swap</div><div class=\"line\"></div><div class=\"line\"><span class=\"built_in\">cd</span> swap</div><div class=\"line\"></div><div class=\"line\">sudo dd <span class=\"keyword\">if</span>=/dev/zero of=swapfile bs=1024 count=4M   <span class=\"comment\"># bs 表示块大小  count 表示块数目  1024 * 4M  = 4G</span></div><div class=\"line\"><span class=\"comment\"># 4194304+0 records in</span></div><div class=\"line\"><span class=\"comment\"># 4194304+0 records out</span></div><div class=\"line\"><span class=\"comment\"># 4294967296 bytes (4.3 GB) copied, 88.3999 s, 48.6 MB/s</span></div></pre></td></tr></table></figure>\n<p> 把文件转换成 Swap 文件</p>\n <figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">sudo mkswap <span class=\"_\">-f</span>  swapfile </div><div class=\"line\"><span class=\"comment\"># Setting up swapspace version 1, size = 4194300 KiB</span></div><div class=\"line\"><span class=\"comment\"># no label, UUID=bebbcbad-dda2-49f9-9aab-4b24b1d62d87</span></div></pre></td></tr></table></figure>\n</li>\n<li><h4 id=\"激活-Swap\"><a href=\"#激活-Swap\" class=\"headerlink\" title=\"激活 Swap\"></a>激活 Swap</h4> <figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">sudo swapon swapfile</div></pre></td></tr></table></figure>\n<p>  查看激活情况</p>\n <figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">free -m</div></pre></td></tr></table></figure>\n <figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">             total       used       free     shared    buffers     cached</div><div class=\"line\">Mem:          3952       3842        109          9          1       3369</div><div class=\"line\">-/+ buffers/cache:        470       3481</div><div class=\"line\">Swap:         4095          0       4095</div></pre></td></tr></table></figure>\n</li>\n<li><h4 id=\"配置\"><a href=\"#配置\" class=\"headerlink\" title=\"配置\"></a>配置</h4><ul>\n<li><p>修改swappiness<br>swappiness 为 0 - 100的数值，数值越大表示越积极的去使用 Swap。</p>\n<ul>\n<li><p>暂时修改</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">sudo sysctl vm.swappiness=40</div></pre></td></tr></table></figure>\n</li>\n<li><p>永久修改</p>\n <figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">sudo vim /etc/sysctl.conf</div><div class=\"line\"><span class=\"comment\"># 增加一行</span></div><div class=\"line\">vm.swappiness = 40</div></pre></td></tr></table></figure>\n</li>\n</ul>\n</li>\n<li><p>修改权限<br>   设置成只有 root 用户具有读写权限</p>\n   <figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">sudo chown root:root /swap/swapfile</div><div class=\"line\">sudo chmod 0600 /swap/swapfile</div></pre></td></tr></table></figure>\n</li>\n</ul>\n</li>\n<li><h4 id=\"开机启动\"><a href=\"#开机启动\" class=\"headerlink\" title=\"开机启动\"></a>开机启动</h4> <figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">sudo vim /etc/fstab</div></pre></td></tr></table></figure>\n<p> 在文件最后面添加</p>\n <figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">/swap/swapfile       none    swap    sw      0       0</div></pre></td></tr></table></figure></li>\n</ol>\n"},{"title":"Rails 缓存简介","date":"2016-11-18T08:32:38.000Z","description":"简单的介绍 Rails 中常用的缓存机制","_content":"\n## 前言\n\n合理的使用缓存可以很大程度上提高网站性能，是网站性能优化必不可少的一部分。\n\n## 缓存\n\n*    Model 层缓存\n\n     通过手动设置可以将部分查询结果存储在对应的缓存系统中。\n\n     ```ruby\n     Rails.cache.fetch('all_products', expires_in: 1.days) do \n       Product.all.to_a\n     end\n     ```\n\n     **需要确认执行结果是否为最终的结果集**\n\n- #### Controller 层缓存\n\n  - ##### Action 缓存\n\n    缓存 Action Response，借助 Fragement Cache 和 Callback 实现。\n\n    可通过 before_action 加入各种验证机制。\n\n    ```\n    before_action :authentication, only: :show\n    cache_action :show, expires_in: 1.hour\n    ```\n\n    **该方法在 Rails4 已经移除了，可通过Gem包开启**\n\n  - ##### Page 缓存 (页面缓存)\n\n    将页面缓存成静态页面，无法进行权限认证等。\n\n    ```\n    class ProductsController < ActionController\n      caches_page :index\n    end\n    ```\n\n    **该方法在 Rails4 已经移除了，可通过Gem包开启**\n\n- #### View 层缓存\n\n  - ##### Fragement Cache (片段缓存)\n\n    随着页面复杂的程度的提高，已经无法做整页缓存，只能将其切割成不同的片段。\n\n    ```\n    - cache('xxx' , expires_in: 1.days ) do \n      %ul\n        = @product.name\n    ```\n\n    **片段缓存可以通过嵌套使用的方式形成特殊的俄罗斯套娃(Russian Doll Caching)**\n\n- #### SQL 缓存\n\n  这是 Rails 框架自带的一个特性，会缓存每一次查询的结果集。\n\n  ```\n  class ProductsController < ActionController\n    def index\n      # First Query\n      @products = Product.all\n      \n      # Second Query (Cache)\n      @products = Product.all\n    end\n  ```\n\n  当第二次查询时，会直接从内存中读取第一次查询缓存入内存的结果集。\b\n\n  **Tips: 缓存的有效时间是 action 的生命周期**\n\n## 配置\n\n```bash\n # 开启缓存\n config.action_controller.perform_caching = true\n # 缓存存储方式\n config.cache_store = :memory_store  # memory_store mem_cache_store file_store\n```\n\n","source":"_posts/Raiils-Cache-Simple.md","raw":"---\ntitle: Rails 缓存简介\ndate: 2016-11-18 16:32:38\ntags:\n - Ruby\n - Cache\n - Rails\ncategories: Rails\ndescription: 简单的介绍 Rails 中常用的缓存机制\n---\n\n## 前言\n\n合理的使用缓存可以很大程度上提高网站性能，是网站性能优化必不可少的一部分。\n\n## 缓存\n\n*    Model 层缓存\n\n     通过手动设置可以将部分查询结果存储在对应的缓存系统中。\n\n     ```ruby\n     Rails.cache.fetch('all_products', expires_in: 1.days) do \n       Product.all.to_a\n     end\n     ```\n\n     **需要确认执行结果是否为最终的结果集**\n\n- #### Controller 层缓存\n\n  - ##### Action 缓存\n\n    缓存 Action Response，借助 Fragement Cache 和 Callback 实现。\n\n    可通过 before_action 加入各种验证机制。\n\n    ```\n    before_action :authentication, only: :show\n    cache_action :show, expires_in: 1.hour\n    ```\n\n    **该方法在 Rails4 已经移除了，可通过Gem包开启**\n\n  - ##### Page 缓存 (页面缓存)\n\n    将页面缓存成静态页面，无法进行权限认证等。\n\n    ```\n    class ProductsController < ActionController\n      caches_page :index\n    end\n    ```\n\n    **该方法在 Rails4 已经移除了，可通过Gem包开启**\n\n- #### View 层缓存\n\n  - ##### Fragement Cache (片段缓存)\n\n    随着页面复杂的程度的提高，已经无法做整页缓存，只能将其切割成不同的片段。\n\n    ```\n    - cache('xxx' , expires_in: 1.days ) do \n      %ul\n        = @product.name\n    ```\n\n    **片段缓存可以通过嵌套使用的方式形成特殊的俄罗斯套娃(Russian Doll Caching)**\n\n- #### SQL 缓存\n\n  这是 Rails 框架自带的一个特性，会缓存每一次查询的结果集。\n\n  ```\n  class ProductsController < ActionController\n    def index\n      # First Query\n      @products = Product.all\n      \n      # Second Query (Cache)\n      @products = Product.all\n    end\n  ```\n\n  当第二次查询时，会直接从内存中读取第一次查询缓存入内存的结果集。\b\n\n  **Tips: 缓存的有效时间是 action 的生命周期**\n\n## 配置\n\n```bash\n # 开启缓存\n config.action_controller.perform_caching = true\n # 缓存存储方式\n config.cache_store = :memory_store  # memory_store mem_cache_store file_store\n```\n\n","slug":"Raiils-Cache-Simple","published":1,"updated":"2017-02-18T08:38:33.000Z","_id":"cizazkwby00001z8k0gaba8s2","comments":1,"layout":"post","photos":[],"link":"","content":"<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>合理的使用缓存可以很大程度上提高网站性能，是网站性能优化必不可少的一部分。</p>\n<h2 id=\"缓存\"><a href=\"#缓存\" class=\"headerlink\" title=\"缓存\"></a>缓存</h2><ul>\n<li><p>Model 层缓存</p>\n<p>通过手动设置可以将部分查询结果存储在对应的缓存系统中。</p>\n<figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">Rails.cache.fetch(<span class=\"string\">'all_products'</span>, <span class=\"symbol\">expires_in:</span> <span class=\"number\">1</span>.days) <span class=\"keyword\">do</span> </div><div class=\"line\">  Product.all.to_a</div><div class=\"line\"><span class=\"keyword\">end</span></div></pre></td></tr></table></figure>\n<p><strong>需要确认执行结果是否为最终的结果集</strong></p>\n</li>\n</ul>\n<ul>\n<li><h4 id=\"Controller-层缓存\"><a href=\"#Controller-层缓存\" class=\"headerlink\" title=\"Controller 层缓存\"></a>Controller 层缓存</h4><ul>\n<li><h5 id=\"Action-缓存\"><a href=\"#Action-缓存\" class=\"headerlink\" title=\"Action 缓存\"></a>Action 缓存</h5><p>缓存 Action Response，借助 Fragement Cache 和 Callback 实现。</p>\n<p>可通过 before_action 加入各种验证机制。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">before_action :authentication, only: :show</div><div class=\"line\">cache_action :show, expires_in: 1.hour</div></pre></td></tr></table></figure>\n<p><strong>该方法在 Rails4 已经移除了，可通过Gem包开启</strong></p>\n</li>\n<li><h5 id=\"Page-缓存-页面缓存\"><a href=\"#Page-缓存-页面缓存\" class=\"headerlink\" title=\"Page 缓存 (页面缓存)\"></a>Page 缓存 (页面缓存)</h5><p>将页面缓存成静态页面，无法进行权限认证等。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">class ProductsController &lt; ActionController</div><div class=\"line\">  caches_page :index</div><div class=\"line\">end</div></pre></td></tr></table></figure>\n<p><strong>该方法在 Rails4 已经移除了，可通过Gem包开启</strong></p>\n</li>\n</ul>\n</li>\n<li><h4 id=\"View-层缓存\"><a href=\"#View-层缓存\" class=\"headerlink\" title=\"View 层缓存\"></a>View 层缓存</h4><ul>\n<li><h5 id=\"Fragement-Cache-片段缓存\"><a href=\"#Fragement-Cache-片段缓存\" class=\"headerlink\" title=\"Fragement Cache (片段缓存)\"></a>Fragement Cache (片段缓存)</h5><p>随着页面复杂的程度的提高，已经无法做整页缓存，只能将其切割成不同的片段。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">- cache(&apos;xxx&apos; , expires_in: 1.days ) do </div><div class=\"line\">  %ul</div><div class=\"line\">    = @product.name</div></pre></td></tr></table></figure>\n<p><strong>片段缓存可以通过嵌套使用的方式形成特殊的俄罗斯套娃(Russian Doll Caching)</strong></p>\n</li>\n</ul>\n</li>\n<li><h4 id=\"SQL-缓存\"><a href=\"#SQL-缓存\" class=\"headerlink\" title=\"SQL 缓存\"></a>SQL 缓存</h4><p>这是 Rails 框架自带的一个特性，会缓存每一次查询的结果集。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\">class ProductsController &lt; ActionController</div><div class=\"line\">  def index</div><div class=\"line\">    # First Query</div><div class=\"line\">    @products = Product.all</div><div class=\"line\">    </div><div class=\"line\">    # Second Query (Cache)</div><div class=\"line\">    @products = Product.all</div><div class=\"line\">  end</div></pre></td></tr></table></figure>\n<p>当第二次查询时，会直接从内存中读取第一次查询缓存入内存的结果集。\b</p>\n<p><strong>Tips: 缓存的有效时间是 action 的生命周期</strong></p>\n</li>\n</ul>\n<h2 id=\"配置\"><a href=\"#配置\" class=\"headerlink\" title=\"配置\"></a>配置</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\"># 开启缓存</span></div><div class=\"line\">config.action_controller.perform_caching = <span class=\"literal\">true</span></div><div class=\"line\"><span class=\"comment\"># 缓存存储方式</span></div><div class=\"line\">config.cache_store = :memory_store  <span class=\"comment\"># memory_store mem_cache_store file_store</span></div></pre></td></tr></table></figure>\n","excerpt":"","more":"<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>合理的使用缓存可以很大程度上提高网站性能，是网站性能优化必不可少的一部分。</p>\n<h2 id=\"缓存\"><a href=\"#缓存\" class=\"headerlink\" title=\"缓存\"></a>缓存</h2><ul>\n<li><p>Model 层缓存</p>\n<p>通过手动设置可以将部分查询结果存储在对应的缓存系统中。</p>\n<figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">Rails.cache.fetch(<span class=\"string\">'all_products'</span>, <span class=\"symbol\">expires_in:</span> <span class=\"number\">1</span>.days) <span class=\"keyword\">do</span> </div><div class=\"line\">  Product.all.to_a</div><div class=\"line\"><span class=\"keyword\">end</span></div></pre></td></tr></table></figure>\n<p><strong>需要确认执行结果是否为最终的结果集</strong></p>\n</li>\n</ul>\n<ul>\n<li><h4 id=\"Controller-层缓存\"><a href=\"#Controller-层缓存\" class=\"headerlink\" title=\"Controller 层缓存\"></a>Controller 层缓存</h4><ul>\n<li><h5 id=\"Action-缓存\"><a href=\"#Action-缓存\" class=\"headerlink\" title=\"Action 缓存\"></a>Action 缓存</h5><p>缓存 Action Response，借助 Fragement Cache 和 Callback 实现。</p>\n<p>可通过 before_action 加入各种验证机制。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">before_action :authentication, only: :show</div><div class=\"line\">cache_action :show, expires_in: 1.hour</div></pre></td></tr></table></figure>\n<p><strong>该方法在 Rails4 已经移除了，可通过Gem包开启</strong></p>\n</li>\n<li><h5 id=\"Page-缓存-页面缓存\"><a href=\"#Page-缓存-页面缓存\" class=\"headerlink\" title=\"Page 缓存 (页面缓存)\"></a>Page 缓存 (页面缓存)</h5><p>将页面缓存成静态页面，无法进行权限认证等。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">class ProductsController &lt; ActionController</div><div class=\"line\">  caches_page :index</div><div class=\"line\">end</div></pre></td></tr></table></figure>\n<p><strong>该方法在 Rails4 已经移除了，可通过Gem包开启</strong></p>\n</li>\n</ul>\n</li>\n<li><h4 id=\"View-层缓存\"><a href=\"#View-层缓存\" class=\"headerlink\" title=\"View 层缓存\"></a>View 层缓存</h4><ul>\n<li><h5 id=\"Fragement-Cache-片段缓存\"><a href=\"#Fragement-Cache-片段缓存\" class=\"headerlink\" title=\"Fragement Cache (片段缓存)\"></a>Fragement Cache (片段缓存)</h5><p>随着页面复杂的程度的提高，已经无法做整页缓存，只能将其切割成不同的片段。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">- cache(&apos;xxx&apos; , expires_in: 1.days ) do </div><div class=\"line\">  %ul</div><div class=\"line\">    = @product.name</div></pre></td></tr></table></figure>\n<p><strong>片段缓存可以通过嵌套使用的方式形成特殊的俄罗斯套娃(Russian Doll Caching)</strong></p>\n</li>\n</ul>\n</li>\n<li><h4 id=\"SQL-缓存\"><a href=\"#SQL-缓存\" class=\"headerlink\" title=\"SQL 缓存\"></a>SQL 缓存</h4><p>这是 Rails 框架自带的一个特性，会缓存每一次查询的结果集。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\">class ProductsController &lt; ActionController</div><div class=\"line\">  def index</div><div class=\"line\">    # First Query</div><div class=\"line\">    @products = Product.all</div><div class=\"line\">    </div><div class=\"line\">    # Second Query (Cache)</div><div class=\"line\">    @products = Product.all</div><div class=\"line\">  end</div></pre></td></tr></table></figure>\n<p>当第二次查询时，会直接从内存中读取第一次查询缓存入内存的结果集。\b</p>\n<p><strong>Tips: 缓存的有效时间是 action 的生命周期</strong></p>\n</li>\n</ul>\n<h2 id=\"配置\"><a href=\"#配置\" class=\"headerlink\" title=\"配置\"></a>配置</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\"># 开启缓存</span></div><div class=\"line\">config.action_controller.perform_caching = <span class=\"literal\">true</span></div><div class=\"line\"><span class=\"comment\"># 缓存存储方式</span></div><div class=\"line\">config.cache_store = :memory_store  <span class=\"comment\"># memory_store mem_cache_store file_store</span></div></pre></td></tr></table></figure>\n"},{"title":"Mac OS 基础软件","date":"2016-12-26T08:39:02.000Z","description":"主要介绍在 Mac OS 下使用的基本的软件。","_content":"\n## 简介\n\n主要介绍在 Mac OS 下使用的基本的软件。\n\n## 软件\n\n### Command Line Tool\n\n```\nxcode-select --install\n```\n\n### Homebrew\n\n[Homebrew](http://brew.sh/,)\n\n```\n/usr/bin/ruby -e \"$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)\"\n```\n\n### Oh My Zsh\n\n[Oh My Zsh](https://github.com/robbyrussell/oh-my-zsh)\n\n```\nbrew install zsh\n\nsh -c \"$(curl -fsSL https://raw.githubusercontent.com/robbyrussell/oh-my-zsh/master/tools/install.sh)\"\n```\n\n### Prezto\n\n[Prezto](https://github.com/sorin-ionescu/prezto)\n\n```\n# Launch Zsh:\nzsh\n\n#Clone the repository:\ngit clone --recursive https://github.com/sorin-ionescu/prezto.git \"${ZDOTDIR:-$HOME}/.zprezto\"\n\n#Create a new Zsh configuration by copying the Zsh configuration files provided:\nsetopt EXTENDED_GLOB\nfor rcfile in \"${ZDOTDIR:-$HOME}\"/.zprezto/runcoms/^README.md(.N); do\n  ln -s \"$rcfile\" \"${ZDOTDIR:-$HOME}/.${rcfile:t}\"\ndone\n\n# Set Zsh as your default shell:\nchsh -s /bin/zsh\n```\n\n### Brew Cask\n\n[Homebrew Cask](https://caskroom.github.io/)\n\n```\nbrew tap phinze/cask\nbrew install brew-cask\n```\n\n### TotalTerminal\n\n```\nbrew cask install totalterminal\n```\n\n### LaunchRocket\n\n```\nbrew cask install launchrocket\n```\n\n### shadowssocks\n\n```\nhttps://github.com/shadowsocks/shadowsocks-iOS/releases\n```\n\n### alfred 3\n\n```\nbrew cask install alfred\n```\n\n### moom\n\n```\nbrew cask install moom\n```","source":"_posts/Mac-OSX-Basic-SoftWare.md","raw":"---\ntitle: Mac OS 基础软件\ndate: 2016-12-26 16:39:02\ntags:\n  - Software\n  - OSX\ncategories: Software\ndescription: 主要介绍在 Mac OS 下使用的基本的软件。\n---\n\n## 简介\n\n主要介绍在 Mac OS 下使用的基本的软件。\n\n## 软件\n\n### Command Line Tool\n\n```\nxcode-select --install\n```\n\n### Homebrew\n\n[Homebrew](http://brew.sh/,)\n\n```\n/usr/bin/ruby -e \"$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)\"\n```\n\n### Oh My Zsh\n\n[Oh My Zsh](https://github.com/robbyrussell/oh-my-zsh)\n\n```\nbrew install zsh\n\nsh -c \"$(curl -fsSL https://raw.githubusercontent.com/robbyrussell/oh-my-zsh/master/tools/install.sh)\"\n```\n\n### Prezto\n\n[Prezto](https://github.com/sorin-ionescu/prezto)\n\n```\n# Launch Zsh:\nzsh\n\n#Clone the repository:\ngit clone --recursive https://github.com/sorin-ionescu/prezto.git \"${ZDOTDIR:-$HOME}/.zprezto\"\n\n#Create a new Zsh configuration by copying the Zsh configuration files provided:\nsetopt EXTENDED_GLOB\nfor rcfile in \"${ZDOTDIR:-$HOME}\"/.zprezto/runcoms/^README.md(.N); do\n  ln -s \"$rcfile\" \"${ZDOTDIR:-$HOME}/.${rcfile:t}\"\ndone\n\n# Set Zsh as your default shell:\nchsh -s /bin/zsh\n```\n\n### Brew Cask\n\n[Homebrew Cask](https://caskroom.github.io/)\n\n```\nbrew tap phinze/cask\nbrew install brew-cask\n```\n\n### TotalTerminal\n\n```\nbrew cask install totalterminal\n```\n\n### LaunchRocket\n\n```\nbrew cask install launchrocket\n```\n\n### shadowssocks\n\n```\nhttps://github.com/shadowsocks/shadowsocks-iOS/releases\n```\n\n### alfred 3\n\n```\nbrew cask install alfred\n```\n\n### moom\n\n```\nbrew cask install moom\n```","slug":"Mac-OSX-Basic-SoftWare","published":1,"updated":"2017-02-18T08:40:48.000Z","_id":"cizazt4tx00081z8k7s42r5td","comments":1,"layout":"post","photos":[],"link":"","content":"<h2 id=\"简介\"><a href=\"#简介\" class=\"headerlink\" title=\"简介\"></a>简介</h2><p>主要介绍在 Mac OS 下使用的基本的软件。</p>\n<h2 id=\"软件\"><a href=\"#软件\" class=\"headerlink\" title=\"软件\"></a>软件</h2><h3 id=\"Command-Line-Tool\"><a href=\"#Command-Line-Tool\" class=\"headerlink\" title=\"Command Line Tool\"></a>Command Line Tool</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">xcode-select --install</div></pre></td></tr></table></figure>\n<h3 id=\"Homebrew\"><a href=\"#Homebrew\" class=\"headerlink\" title=\"Homebrew\"></a>Homebrew</h3><p><a href=\"http://brew.sh/,\" target=\"_blank\" rel=\"external\">Homebrew</a></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">/usr/bin/ruby -e &quot;$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)&quot;</div></pre></td></tr></table></figure>\n<h3 id=\"Oh-My-Zsh\"><a href=\"#Oh-My-Zsh\" class=\"headerlink\" title=\"Oh My Zsh\"></a>Oh My Zsh</h3><p><a href=\"https://github.com/robbyrussell/oh-my-zsh\" target=\"_blank\" rel=\"external\">Oh My Zsh</a></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">brew install zsh</div><div class=\"line\"></div><div class=\"line\">sh -c &quot;$(curl -fsSL https://raw.githubusercontent.com/robbyrussell/oh-my-zsh/master/tools/install.sh)&quot;</div></pre></td></tr></table></figure>\n<h3 id=\"Prezto\"><a href=\"#Prezto\" class=\"headerlink\" title=\"Prezto\"></a>Prezto</h3><p><a href=\"https://github.com/sorin-ionescu/prezto\" target=\"_blank\" rel=\"external\">Prezto</a></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\"># Launch Zsh:</div><div class=\"line\">zsh</div><div class=\"line\"></div><div class=\"line\">#Clone the repository:</div><div class=\"line\">git clone --recursive https://github.com/sorin-ionescu/prezto.git &quot;$&#123;ZDOTDIR:-$HOME&#125;/.zprezto&quot;</div><div class=\"line\"></div><div class=\"line\">#Create a new Zsh configuration by copying the Zsh configuration files provided:</div><div class=\"line\">setopt EXTENDED_GLOB</div><div class=\"line\">for rcfile in &quot;$&#123;ZDOTDIR:-$HOME&#125;&quot;/.zprezto/runcoms/^README.md(.N); do</div><div class=\"line\">  ln -s &quot;$rcfile&quot; &quot;$&#123;ZDOTDIR:-$HOME&#125;/.$&#123;rcfile:t&#125;&quot;</div><div class=\"line\">done</div><div class=\"line\"></div><div class=\"line\"># Set Zsh as your default shell:</div><div class=\"line\">chsh -s /bin/zsh</div></pre></td></tr></table></figure>\n<h3 id=\"Brew-Cask\"><a href=\"#Brew-Cask\" class=\"headerlink\" title=\"Brew Cask\"></a>Brew Cask</h3><p><a href=\"https://caskroom.github.io/\" target=\"_blank\" rel=\"external\">Homebrew Cask</a></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">brew tap phinze/cask</div><div class=\"line\">brew install brew-cask</div></pre></td></tr></table></figure>\n<h3 id=\"TotalTerminal\"><a href=\"#TotalTerminal\" class=\"headerlink\" title=\"TotalTerminal\"></a>TotalTerminal</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">brew cask install totalterminal</div></pre></td></tr></table></figure>\n<h3 id=\"LaunchRocket\"><a href=\"#LaunchRocket\" class=\"headerlink\" title=\"LaunchRocket\"></a>LaunchRocket</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">brew cask install launchrocket</div></pre></td></tr></table></figure>\n<h3 id=\"shadowssocks\"><a href=\"#shadowssocks\" class=\"headerlink\" title=\"shadowssocks\"></a>shadowssocks</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">https://github.com/shadowsocks/shadowsocks-iOS/releases</div></pre></td></tr></table></figure>\n<h3 id=\"alfred-3\"><a href=\"#alfred-3\" class=\"headerlink\" title=\"alfred 3\"></a>alfred 3</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">brew cask install alfred</div></pre></td></tr></table></figure>\n<h3 id=\"moom\"><a href=\"#moom\" class=\"headerlink\" title=\"moom\"></a>moom</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">brew cask install moom</div></pre></td></tr></table></figure>","excerpt":"","more":"<h2 id=\"简介\"><a href=\"#简介\" class=\"headerlink\" title=\"简介\"></a>简介</h2><p>主要介绍在 Mac OS 下使用的基本的软件。</p>\n<h2 id=\"软件\"><a href=\"#软件\" class=\"headerlink\" title=\"软件\"></a>软件</h2><h3 id=\"Command-Line-Tool\"><a href=\"#Command-Line-Tool\" class=\"headerlink\" title=\"Command Line Tool\"></a>Command Line Tool</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">xcode-select --install</div></pre></td></tr></table></figure>\n<h3 id=\"Homebrew\"><a href=\"#Homebrew\" class=\"headerlink\" title=\"Homebrew\"></a>Homebrew</h3><p><a href=\"http://brew.sh/,\">Homebrew</a></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">/usr/bin/ruby -e &quot;$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)&quot;</div></pre></td></tr></table></figure>\n<h3 id=\"Oh-My-Zsh\"><a href=\"#Oh-My-Zsh\" class=\"headerlink\" title=\"Oh My Zsh\"></a>Oh My Zsh</h3><p><a href=\"https://github.com/robbyrussell/oh-my-zsh\">Oh My Zsh</a></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">brew install zsh</div><div class=\"line\"></div><div class=\"line\">sh -c &quot;$(curl -fsSL https://raw.githubusercontent.com/robbyrussell/oh-my-zsh/master/tools/install.sh)&quot;</div></pre></td></tr></table></figure>\n<h3 id=\"Prezto\"><a href=\"#Prezto\" class=\"headerlink\" title=\"Prezto\"></a>Prezto</h3><p><a href=\"https://github.com/sorin-ionescu/prezto\">Prezto</a></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\"># Launch Zsh:</div><div class=\"line\">zsh</div><div class=\"line\"></div><div class=\"line\">#Clone the repository:</div><div class=\"line\">git clone --recursive https://github.com/sorin-ionescu/prezto.git &quot;$&#123;ZDOTDIR:-$HOME&#125;/.zprezto&quot;</div><div class=\"line\"></div><div class=\"line\">#Create a new Zsh configuration by copying the Zsh configuration files provided:</div><div class=\"line\">setopt EXTENDED_GLOB</div><div class=\"line\">for rcfile in &quot;$&#123;ZDOTDIR:-$HOME&#125;&quot;/.zprezto/runcoms/^README.md(.N); do</div><div class=\"line\">  ln -s &quot;$rcfile&quot; &quot;$&#123;ZDOTDIR:-$HOME&#125;/.$&#123;rcfile:t&#125;&quot;</div><div class=\"line\">done</div><div class=\"line\"></div><div class=\"line\"># Set Zsh as your default shell:</div><div class=\"line\">chsh -s /bin/zsh</div></pre></td></tr></table></figure>\n<h3 id=\"Brew-Cask\"><a href=\"#Brew-Cask\" class=\"headerlink\" title=\"Brew Cask\"></a>Brew Cask</h3><p><a href=\"https://caskroom.github.io/\">Homebrew Cask</a></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">brew tap phinze/cask</div><div class=\"line\">brew install brew-cask</div></pre></td></tr></table></figure>\n<h3 id=\"TotalTerminal\"><a href=\"#TotalTerminal\" class=\"headerlink\" title=\"TotalTerminal\"></a>TotalTerminal</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">brew cask install totalterminal</div></pre></td></tr></table></figure>\n<h3 id=\"LaunchRocket\"><a href=\"#LaunchRocket\" class=\"headerlink\" title=\"LaunchRocket\"></a>LaunchRocket</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">brew cask install launchrocket</div></pre></td></tr></table></figure>\n<h3 id=\"shadowssocks\"><a href=\"#shadowssocks\" class=\"headerlink\" title=\"shadowssocks\"></a>shadowssocks</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">https://github.com/shadowsocks/shadowsocks-iOS/releases</div></pre></td></tr></table></figure>\n<h3 id=\"alfred-3\"><a href=\"#alfred-3\" class=\"headerlink\" title=\"alfred 3\"></a>alfred 3</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">brew cask install alfred</div></pre></td></tr></table></figure>\n<h3 id=\"moom\"><a href=\"#moom\" class=\"headerlink\" title=\"moom\"></a>moom</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">brew cask install moom</div></pre></td></tr></table></figure>"},{"title":"Mac OS 下安装 rbenv","date":"2016-12-26T08:41:17.000Z","description":"rbenv 和 rvm 用来管理多个版本的 ruby 安装和使用。","_content":"\n## 简介\n\n目前Mac OS 下面有两种Ruby 版本的工具，分别是 RVM 和 rbenv，本文主要介绍如何安装和使用 rbenv，并通过它来管理 Ruby 环境\n\n## 安装\n\n### 安装\n\n```\nbrew install rbenv\nbrew install ruby-build\nbrew install rbenv-gemset\nbrew install rbenv-gem-rehash\n```\n\n### 初始化\n\n```\necho 'export PATH=\"$HOME/.rbenv/bin:$PATH\"' >> ~/.bashrc\necho 'eval \"$(rbenv init -)\"' >> ~/.bashrc\n\n# 如果使用的是 Zsh  \necho 'export PATH=\"$HOME/.rbenv/bin:$PATH\"' >> ~/.zshrc\necho 'eval \"$(rbenv init -)\"' >> ~/.zshrc\n```\n\n### 安装Ruby\n\n```shell\n# 查看可用版本\nrbenv install --list\n\n# 安装2.4.0\nrbenv install 2.4.0\n\n# 查看已安装版本\nrbenv versions\n#  system\n#   2.1.5\n#   2.2.1\n# * 2.2.4 (set by /Users/Robbs/.rbenv/version)\n\n# 设置全局版本\nrbenv global 2.4.0\n\n# 设置本地版本\nrbenv local 2.4.0\n\n# 取消设置\nrbenv local --unset\n\n# 设置当前终端版本\nrbenv shell 2.4.0\n\n# 使用系统Ruby\nrbenv global system\n\n# 每当切换ruby版本和执行bundle install之后必须执行这个命令\nrbenv rehash\n\n# 卸载Ruby\nrbenv uninstall 2.4.0\n```\n\n### 切换镜像\n\n```shell\n# rbenv-china-mirror\ngit clone https://github.com/andorchen/rbenv-china-mirror.git ~/.rbenv/plugins/rbenv-china-mirror\n```","source":"_posts/Use-Brew-Install-Rbenv.md","raw":"---\ntitle: Mac OS 下安装 rbenv\ndate: 2016-12-26 16:41:17\ntags:\n- rbenv\n- brew\n- ruby\ncategories: Software\ndescription: rbenv 和 rvm 用来管理多个版本的 ruby 安装和使用。\n---\n\n## 简介\n\n目前Mac OS 下面有两种Ruby 版本的工具，分别是 RVM 和 rbenv，本文主要介绍如何安装和使用 rbenv，并通过它来管理 Ruby 环境\n\n## 安装\n\n### 安装\n\n```\nbrew install rbenv\nbrew install ruby-build\nbrew install rbenv-gemset\nbrew install rbenv-gem-rehash\n```\n\n### 初始化\n\n```\necho 'export PATH=\"$HOME/.rbenv/bin:$PATH\"' >> ~/.bashrc\necho 'eval \"$(rbenv init -)\"' >> ~/.bashrc\n\n# 如果使用的是 Zsh  \necho 'export PATH=\"$HOME/.rbenv/bin:$PATH\"' >> ~/.zshrc\necho 'eval \"$(rbenv init -)\"' >> ~/.zshrc\n```\n\n### 安装Ruby\n\n```shell\n# 查看可用版本\nrbenv install --list\n\n# 安装2.4.0\nrbenv install 2.4.0\n\n# 查看已安装版本\nrbenv versions\n#  system\n#   2.1.5\n#   2.2.1\n# * 2.2.4 (set by /Users/Robbs/.rbenv/version)\n\n# 设置全局版本\nrbenv global 2.4.0\n\n# 设置本地版本\nrbenv local 2.4.0\n\n# 取消设置\nrbenv local --unset\n\n# 设置当前终端版本\nrbenv shell 2.4.0\n\n# 使用系统Ruby\nrbenv global system\n\n# 每当切换ruby版本和执行bundle install之后必须执行这个命令\nrbenv rehash\n\n# 卸载Ruby\nrbenv uninstall 2.4.0\n```\n\n### 切换镜像\n\n```shell\n# rbenv-china-mirror\ngit clone https://github.com/andorchen/rbenv-china-mirror.git ~/.rbenv/plugins/rbenv-china-mirror\n```","slug":"Use-Brew-Install-Rbenv","published":1,"updated":"2017-02-18T08:43:41.000Z","_id":"cizazw0qq000f1z8k8fo8qzhz","comments":1,"layout":"post","photos":[],"link":"","content":"<h2 id=\"简介\"><a href=\"#简介\" class=\"headerlink\" title=\"简介\"></a>简介</h2><p>目前Mac OS 下面有两种Ruby 版本的工具，分别是 RVM 和 rbenv，本文主要介绍如何安装和使用 rbenv，并通过它来管理 Ruby 环境</p>\n<h2 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h2><h3 id=\"安装-1\"><a href=\"#安装-1\" class=\"headerlink\" title=\"安装\"></a>安装</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">brew install rbenv</div><div class=\"line\">brew install ruby-build</div><div class=\"line\">brew install rbenv-gemset</div><div class=\"line\">brew install rbenv-gem-rehash</div></pre></td></tr></table></figure>\n<h3 id=\"初始化\"><a href=\"#初始化\" class=\"headerlink\" title=\"初始化\"></a>初始化</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">echo &apos;export PATH=&quot;$HOME/.rbenv/bin:$PATH&quot;&apos; &gt;&gt; ~/.bashrc</div><div class=\"line\">echo &apos;eval &quot;$(rbenv init -)&quot;&apos; &gt;&gt; ~/.bashrc</div><div class=\"line\"></div><div class=\"line\"># 如果使用的是 Zsh  </div><div class=\"line\">echo &apos;export PATH=&quot;$HOME/.rbenv/bin:$PATH&quot;&apos; &gt;&gt; ~/.zshrc</div><div class=\"line\">echo &apos;eval &quot;$(rbenv init -)&quot;&apos; &gt;&gt; ~/.zshrc</div></pre></td></tr></table></figure>\n<h3 id=\"安装Ruby\"><a href=\"#安装Ruby\" class=\"headerlink\" title=\"安装Ruby\"></a>安装Ruby</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div></pre></td><td class=\"code\"><pre><div class=\"line\"># 查看可用版本</div><div class=\"line\">rbenv install --list</div><div class=\"line\"></div><div class=\"line\"># 安装2.4.0</div><div class=\"line\">rbenv install 2.4.0</div><div class=\"line\"></div><div class=\"line\"># 查看已安装版本</div><div class=\"line\">rbenv versions</div><div class=\"line\">#  system</div><div class=\"line\">#   2.1.5</div><div class=\"line\">#   2.2.1</div><div class=\"line\"># * 2.2.4 (set by /Users/Robbs/.rbenv/version)</div><div class=\"line\"></div><div class=\"line\"># 设置全局版本</div><div class=\"line\">rbenv global 2.4.0</div><div class=\"line\"></div><div class=\"line\"># 设置本地版本</div><div class=\"line\">rbenv local 2.4.0</div><div class=\"line\"></div><div class=\"line\"># 取消设置</div><div class=\"line\">rbenv local --unset</div><div class=\"line\"></div><div class=\"line\"># 设置当前终端版本</div><div class=\"line\">rbenv shell 2.4.0</div><div class=\"line\"></div><div class=\"line\"># 使用系统Ruby</div><div class=\"line\">rbenv global system</div><div class=\"line\"></div><div class=\"line\"># 每当切换ruby版本和执行bundle install之后必须执行这个命令</div><div class=\"line\">rbenv rehash</div><div class=\"line\"></div><div class=\"line\"># 卸载Ruby</div><div class=\"line\">rbenv uninstall 2.4.0</div></pre></td></tr></table></figure>\n<h3 id=\"切换镜像\"><a href=\"#切换镜像\" class=\"headerlink\" title=\"切换镜像\"></a>切换镜像</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"># rbenv-china-mirror</div><div class=\"line\">git clone https://github.com/andorchen/rbenv-china-mirror.git ~/.rbenv/plugins/rbenv-china-mirror</div></pre></td></tr></table></figure>","excerpt":"","more":"<h2 id=\"简介\"><a href=\"#简介\" class=\"headerlink\" title=\"简介\"></a>简介</h2><p>目前Mac OS 下面有两种Ruby 版本的工具，分别是 RVM 和 rbenv，本文主要介绍如何安装和使用 rbenv，并通过它来管理 Ruby 环境</p>\n<h2 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h2><h3 id=\"安装-1\"><a href=\"#安装-1\" class=\"headerlink\" title=\"安装\"></a>安装</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">brew install rbenv</div><div class=\"line\">brew install ruby-build</div><div class=\"line\">brew install rbenv-gemset</div><div class=\"line\">brew install rbenv-gem-rehash</div></pre></td></tr></table></figure>\n<h3 id=\"初始化\"><a href=\"#初始化\" class=\"headerlink\" title=\"初始化\"></a>初始化</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">echo &apos;export PATH=&quot;$HOME/.rbenv/bin:$PATH&quot;&apos; &gt;&gt; ~/.bashrc</div><div class=\"line\">echo &apos;eval &quot;$(rbenv init -)&quot;&apos; &gt;&gt; ~/.bashrc</div><div class=\"line\"></div><div class=\"line\"># 如果使用的是 Zsh  </div><div class=\"line\">echo &apos;export PATH=&quot;$HOME/.rbenv/bin:$PATH&quot;&apos; &gt;&gt; ~/.zshrc</div><div class=\"line\">echo &apos;eval &quot;$(rbenv init -)&quot;&apos; &gt;&gt; ~/.zshrc</div></pre></td></tr></table></figure>\n<h3 id=\"安装Ruby\"><a href=\"#安装Ruby\" class=\"headerlink\" title=\"安装Ruby\"></a>安装Ruby</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div></pre></td><td class=\"code\"><pre><div class=\"line\"># 查看可用版本</div><div class=\"line\">rbenv install --list</div><div class=\"line\"></div><div class=\"line\"># 安装2.4.0</div><div class=\"line\">rbenv install 2.4.0</div><div class=\"line\"></div><div class=\"line\"># 查看已安装版本</div><div class=\"line\">rbenv versions</div><div class=\"line\">#  system</div><div class=\"line\">#   2.1.5</div><div class=\"line\">#   2.2.1</div><div class=\"line\"># * 2.2.4 (set by /Users/Robbs/.rbenv/version)</div><div class=\"line\"></div><div class=\"line\"># 设置全局版本</div><div class=\"line\">rbenv global 2.4.0</div><div class=\"line\"></div><div class=\"line\"># 设置本地版本</div><div class=\"line\">rbenv local 2.4.0</div><div class=\"line\"></div><div class=\"line\"># 取消设置</div><div class=\"line\">rbenv local --unset</div><div class=\"line\"></div><div class=\"line\"># 设置当前终端版本</div><div class=\"line\">rbenv shell 2.4.0</div><div class=\"line\"></div><div class=\"line\"># 使用系统Ruby</div><div class=\"line\">rbenv global system</div><div class=\"line\"></div><div class=\"line\"># 每当切换ruby版本和执行bundle install之后必须执行这个命令</div><div class=\"line\">rbenv rehash</div><div class=\"line\"></div><div class=\"line\"># 卸载Ruby</div><div class=\"line\">rbenv uninstall 2.4.0</div></pre></td></tr></table></figure>\n<h3 id=\"切换镜像\"><a href=\"#切换镜像\" class=\"headerlink\" title=\"切换镜像\"></a>切换镜像</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"># rbenv-china-mirror</div><div class=\"line\">git clone https://github.com/andorchen/rbenv-china-mirror.git ~/.rbenv/plugins/rbenv-china-mirror</div></pre></td></tr></table></figure>"},{"title":"安装和部署AirFlow","date":"2017-01-19T08:44:02.000Z","description":"简单介绍如何安装和部署AirFlow","_content":"\n## 简介\n\nAirFlow 是采用 Python 编写的一个开源工作流调度器，它有一个丰富的UI。\n\n## 安装\n\n### Python\n\n```Shell\naptitude install python\naptitude install python-dev\naptirude install python-pip\naptitude install libmysqlclient-dev\n```\n\n### AirFlow\n\n```shell\npip install airflow\n```\n\n### Supervisor\n\n```shell\naptitude install supervisor\n```\n\n## 配置\n\n### AirFlow\n\n#### 初始化\n\n```shell\nairflow initdb\n```\n\n#### 添加用户登录\n\n安装相应模块\n\n```\npip install \"airflow[password]\"\n```\n\n添加配置\n\n```\nvim airflow.cfg\n## 在 [webserver]下 加入\nauthenticate = True\nauth_backend = airflow.contrib.auth.backends.password_auth\n```\n\n进入airflow目录下\n\n```\ncd ~/airflow\npython\n```\n\n运行Python命令\n\n```\nimport airflow\nfrom airflow import models, settings\nfrom airflow.contrib.auth.backends.password_auth import PasswordUser\nuser = PasswordUser(models.User())\nuser.username = 'user_name'\nuser.email = 'email@example.com'\nuser.password = 'password'\nsession = settings.Session()\nsession.add(user)\nsession.commit()\nsession.close()\nexit()\n```\n\n#### Supervisord\n\n加入 webserver 和 scheduler 启动管理\n\n```\nvim /etc/supervisor/conf.d/airflow.conf \n\n## 加入\n[program:airflow_webserver]\ncommand=airflow webserver\nuser=ubuntu\nstderr_logfile=/var/log/airflow/webserver.err.log\nstdout_logfile=/var/log/airflow/webserver.out.log\n[program:airflow_scheduler]\ncommand=airflow scheduler\nuser=ubuntu\nstderr_logfile=/var/log/airflow/scheduler.err.log\nstdout_logfile=/var/log/airflow/scheduler.out.log\n```\n\n## 问题\n\n```\nImportError: No module named pidlockfile\n\n## 解决方案\n\naptitude remove python-lockfile\npip install lockfile\nImportError: cannot import name MySqlOperator\n\n## 解决方案\n\npip install airflow[celery]\n```","source":"_posts/Install-And-Deploy-AirFlow.md","raw":"---\ntitle: 安装和部署AirFlow\ndate: 2017-01-19 16:44:02\ntags:\n- AirFlow\n- Server\n- Supervisord\ncategories: Server\ndescription: 简单介绍如何安装和部署AirFlow\n---\n\n## 简介\n\nAirFlow 是采用 Python 编写的一个开源工作流调度器，它有一个丰富的UI。\n\n## 安装\n\n### Python\n\n```Shell\naptitude install python\naptitude install python-dev\naptirude install python-pip\naptitude install libmysqlclient-dev\n```\n\n### AirFlow\n\n```shell\npip install airflow\n```\n\n### Supervisor\n\n```shell\naptitude install supervisor\n```\n\n## 配置\n\n### AirFlow\n\n#### 初始化\n\n```shell\nairflow initdb\n```\n\n#### 添加用户登录\n\n安装相应模块\n\n```\npip install \"airflow[password]\"\n```\n\n添加配置\n\n```\nvim airflow.cfg\n## 在 [webserver]下 加入\nauthenticate = True\nauth_backend = airflow.contrib.auth.backends.password_auth\n```\n\n进入airflow目录下\n\n```\ncd ~/airflow\npython\n```\n\n运行Python命令\n\n```\nimport airflow\nfrom airflow import models, settings\nfrom airflow.contrib.auth.backends.password_auth import PasswordUser\nuser = PasswordUser(models.User())\nuser.username = 'user_name'\nuser.email = 'email@example.com'\nuser.password = 'password'\nsession = settings.Session()\nsession.add(user)\nsession.commit()\nsession.close()\nexit()\n```\n\n#### Supervisord\n\n加入 webserver 和 scheduler 启动管理\n\n```\nvim /etc/supervisor/conf.d/airflow.conf \n\n## 加入\n[program:airflow_webserver]\ncommand=airflow webserver\nuser=ubuntu\nstderr_logfile=/var/log/airflow/webserver.err.log\nstdout_logfile=/var/log/airflow/webserver.out.log\n[program:airflow_scheduler]\ncommand=airflow scheduler\nuser=ubuntu\nstderr_logfile=/var/log/airflow/scheduler.err.log\nstdout_logfile=/var/log/airflow/scheduler.out.log\n```\n\n## 问题\n\n```\nImportError: No module named pidlockfile\n\n## 解决方案\n\naptitude remove python-lockfile\npip install lockfile\nImportError: cannot import name MySqlOperator\n\n## 解决方案\n\npip install airflow[celery]\n```","slug":"Install-And-Deploy-AirFlow","published":1,"updated":"2017-02-18T08:46:31.000Z","_id":"cizazzk26000n1z8kbq65lu7j","comments":1,"layout":"post","photos":[],"link":"","content":"<h2 id=\"简介\"><a href=\"#简介\" class=\"headerlink\" title=\"简介\"></a>简介</h2><p>AirFlow 是采用 Python 编写的一个开源工作流调度器，它有一个丰富的UI。</p>\n<h2 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h2><h3 id=\"Python\"><a href=\"#Python\" class=\"headerlink\" title=\"Python\"></a>Python</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">aptitude install python</div><div class=\"line\">aptitude install python-dev</div><div class=\"line\">aptirude install python-pip</div><div class=\"line\">aptitude install libmysqlclient-dev</div></pre></td></tr></table></figure>\n<h3 id=\"AirFlow\"><a href=\"#AirFlow\" class=\"headerlink\" title=\"AirFlow\"></a>AirFlow</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">pip install airflow</div></pre></td></tr></table></figure>\n<h3 id=\"Supervisor\"><a href=\"#Supervisor\" class=\"headerlink\" title=\"Supervisor\"></a>Supervisor</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">aptitude install supervisor</div></pre></td></tr></table></figure>\n<h2 id=\"配置\"><a href=\"#配置\" class=\"headerlink\" title=\"配置\"></a>配置</h2><h3 id=\"AirFlow-1\"><a href=\"#AirFlow-1\" class=\"headerlink\" title=\"AirFlow\"></a>AirFlow</h3><h4 id=\"初始化\"><a href=\"#初始化\" class=\"headerlink\" title=\"初始化\"></a>初始化</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">airflow initdb</div></pre></td></tr></table></figure>\n<h4 id=\"添加用户登录\"><a href=\"#添加用户登录\" class=\"headerlink\" title=\"添加用户登录\"></a>添加用户登录</h4><p>安装相应模块</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">pip install &quot;airflow[password]&quot;</div></pre></td></tr></table></figure>\n<p>添加配置</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">vim airflow.cfg</div><div class=\"line\">## 在 [webserver]下 加入</div><div class=\"line\">authenticate = True</div><div class=\"line\">auth_backend = airflow.contrib.auth.backends.password_auth</div></pre></td></tr></table></figure>\n<p>进入airflow目录下</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">cd ~/airflow</div><div class=\"line\">python</div></pre></td></tr></table></figure>\n<p>运行Python命令</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\">import airflow</div><div class=\"line\">from airflow import models, settings</div><div class=\"line\">from airflow.contrib.auth.backends.password_auth import PasswordUser</div><div class=\"line\">user = PasswordUser(models.User())</div><div class=\"line\">user.username = &apos;user_name&apos;</div><div class=\"line\">user.email = &apos;email@example.com&apos;</div><div class=\"line\">user.password = &apos;password&apos;</div><div class=\"line\">session = settings.Session()</div><div class=\"line\">session.add(user)</div><div class=\"line\">session.commit()</div><div class=\"line\">session.close()</div><div class=\"line\">exit()</div></pre></td></tr></table></figure>\n<h4 id=\"Supervisord\"><a href=\"#Supervisord\" class=\"headerlink\" title=\"Supervisord\"></a>Supervisord</h4><p>加入 webserver 和 scheduler 启动管理</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\">vim /etc/supervisor/conf.d/airflow.conf </div><div class=\"line\"></div><div class=\"line\">## 加入</div><div class=\"line\">[program:airflow_webserver]</div><div class=\"line\">command=airflow webserver</div><div class=\"line\">user=ubuntu</div><div class=\"line\">stderr_logfile=/var/log/airflow/webserver.err.log</div><div class=\"line\">stdout_logfile=/var/log/airflow/webserver.out.log</div><div class=\"line\">[program:airflow_scheduler]</div><div class=\"line\">command=airflow scheduler</div><div class=\"line\">user=ubuntu</div><div class=\"line\">stderr_logfile=/var/log/airflow/scheduler.err.log</div><div class=\"line\">stdout_logfile=/var/log/airflow/scheduler.out.log</div></pre></td></tr></table></figure>\n<h2 id=\"问题\"><a href=\"#问题\" class=\"headerlink\" title=\"问题\"></a>问题</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\">ImportError: No module named pidlockfile</div><div class=\"line\"></div><div class=\"line\">## 解决方案</div><div class=\"line\"></div><div class=\"line\">aptitude remove python-lockfile</div><div class=\"line\">pip install lockfile</div><div class=\"line\">ImportError: cannot import name MySqlOperator</div><div class=\"line\"></div><div class=\"line\">## 解决方案</div><div class=\"line\"></div><div class=\"line\">pip install airflow[celery]</div></pre></td></tr></table></figure>","excerpt":"","more":"<h2 id=\"简介\"><a href=\"#简介\" class=\"headerlink\" title=\"简介\"></a>简介</h2><p>AirFlow 是采用 Python 编写的一个开源工作流调度器，它有一个丰富的UI。</p>\n<h2 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h2><h3 id=\"Python\"><a href=\"#Python\" class=\"headerlink\" title=\"Python\"></a>Python</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">aptitude install python</div><div class=\"line\">aptitude install python-dev</div><div class=\"line\">aptirude install python-pip</div><div class=\"line\">aptitude install libmysqlclient-dev</div></pre></td></tr></table></figure>\n<h3 id=\"AirFlow\"><a href=\"#AirFlow\" class=\"headerlink\" title=\"AirFlow\"></a>AirFlow</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">pip install airflow</div></pre></td></tr></table></figure>\n<h3 id=\"Supervisor\"><a href=\"#Supervisor\" class=\"headerlink\" title=\"Supervisor\"></a>Supervisor</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">aptitude install supervisor</div></pre></td></tr></table></figure>\n<h2 id=\"配置\"><a href=\"#配置\" class=\"headerlink\" title=\"配置\"></a>配置</h2><h3 id=\"AirFlow-1\"><a href=\"#AirFlow-1\" class=\"headerlink\" title=\"AirFlow\"></a>AirFlow</h3><h4 id=\"初始化\"><a href=\"#初始化\" class=\"headerlink\" title=\"初始化\"></a>初始化</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">airflow initdb</div></pre></td></tr></table></figure>\n<h4 id=\"添加用户登录\"><a href=\"#添加用户登录\" class=\"headerlink\" title=\"添加用户登录\"></a>添加用户登录</h4><p>安装相应模块</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">pip install &quot;airflow[password]&quot;</div></pre></td></tr></table></figure>\n<p>添加配置</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">vim airflow.cfg</div><div class=\"line\">## 在 [webserver]下 加入</div><div class=\"line\">authenticate = True</div><div class=\"line\">auth_backend = airflow.contrib.auth.backends.password_auth</div></pre></td></tr></table></figure>\n<p>进入airflow目录下</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">cd ~/airflow</div><div class=\"line\">python</div></pre></td></tr></table></figure>\n<p>运行Python命令</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\">import airflow</div><div class=\"line\">from airflow import models, settings</div><div class=\"line\">from airflow.contrib.auth.backends.password_auth import PasswordUser</div><div class=\"line\">user = PasswordUser(models.User())</div><div class=\"line\">user.username = &apos;user_name&apos;</div><div class=\"line\">user.email = &apos;email@example.com&apos;</div><div class=\"line\">user.password = &apos;password&apos;</div><div class=\"line\">session = settings.Session()</div><div class=\"line\">session.add(user)</div><div class=\"line\">session.commit()</div><div class=\"line\">session.close()</div><div class=\"line\">exit()</div></pre></td></tr></table></figure>\n<h4 id=\"Supervisord\"><a href=\"#Supervisord\" class=\"headerlink\" title=\"Supervisord\"></a>Supervisord</h4><p>加入 webserver 和 scheduler 启动管理</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\">vim /etc/supervisor/conf.d/airflow.conf </div><div class=\"line\"></div><div class=\"line\">## 加入</div><div class=\"line\">[program:airflow_webserver]</div><div class=\"line\">command=airflow webserver</div><div class=\"line\">user=ubuntu</div><div class=\"line\">stderr_logfile=/var/log/airflow/webserver.err.log</div><div class=\"line\">stdout_logfile=/var/log/airflow/webserver.out.log</div><div class=\"line\">[program:airflow_scheduler]</div><div class=\"line\">command=airflow scheduler</div><div class=\"line\">user=ubuntu</div><div class=\"line\">stderr_logfile=/var/log/airflow/scheduler.err.log</div><div class=\"line\">stdout_logfile=/var/log/airflow/scheduler.out.log</div></pre></td></tr></table></figure>\n<h2 id=\"问题\"><a href=\"#问题\" class=\"headerlink\" title=\"问题\"></a>问题</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\">ImportError: No module named pidlockfile</div><div class=\"line\"></div><div class=\"line\">## 解决方案</div><div class=\"line\"></div><div class=\"line\">aptitude remove python-lockfile</div><div class=\"line\">pip install lockfile</div><div class=\"line\">ImportError: cannot import name MySqlOperator</div><div class=\"line\"></div><div class=\"line\">## 解决方案</div><div class=\"line\"></div><div class=\"line\">pip install airflow[celery]</div></pre></td></tr></table></figure>"}],"PostAsset":[],"PostCategory":[{"post_id":"ciz9wvzf70000g38kivdwpe7i","category_id":"ciz9wvzfh0003g38kpy5e5d0t","_id":"ciz9wvzfu000bg38k5izcormb"},{"post_id":"ciz9wvzfe0002g38kim7vnszd","category_id":"ciz9wvzfo0008g38krflj0kmw","_id":"ciz9wvzfy000ig38k4el5prq5"},{"post_id":"ciz9wvzfw000fg38koiqxcq64","category_id":"ciz9wvzfo0008g38krflj0kmw","_id":"ciz9wvzg8000ng38kh19ltctk"},{"post_id":"ciz9wvzfj0005g38koirscdwp","category_id":"ciz9wvzfv000dg38kle20bjea","_id":"ciz9wvzga000qg38kqs4j4nun"},{"post_id":"ciz9wvzfy000hg38ke127929w","category_id":"ciz9wvzfo0008g38krflj0kmw","_id":"ciz9wvzgd000ug38kza1l9xor"},{"post_id":"ciz9wvzg2000mg38kehvaip2u","category_id":"ciz9wvzfv000dg38kle20bjea","_id":"ciz9wvzge000yg38k2dhg8jgp"},{"post_id":"ciz9wvzfm0006g38kj93ss2hh","category_id":"ciz9wvzfv000dg38kle20bjea","_id":"ciz9wvzgf0010g38k1tltc6kl"},{"post_id":"ciz9wvzg8000og38k964q3w6t","category_id":"ciz9wvzfh0003g38kpy5e5d0t","_id":"ciz9wvzgg0011g38kudw7hl3p"},{"post_id":"ciz9wvzgb000sg38kicisuvjy","category_id":"ciz9wvzfo0008g38krflj0kmw","_id":"ciz9wvzgh0014g38kefxziion"},{"post_id":"ciz9wvzfn0007g38kus0ljk39","category_id":"ciz9wvzfv000dg38kle20bjea","_id":"ciz9wvzgh0015g38khlpc23wz"},{"post_id":"ciz9wvzgd000vg38kjw7asbwe","category_id":"ciz9wvzfv000dg38kle20bjea","_id":"ciz9wvzgh0017g38k2yxwf4m3"},{"post_id":"ciz9wvzfp000ag38k5t18h5s9","category_id":"ciz9wvzge000wg38kkbopxt1r","_id":"ciz9wvzgi0019g38kt9xomnr1"},{"post_id":"ciz9wvzfu000cg38k19woh5ps","category_id":"ciz9wvzgg0012g38k6gzg79ua","_id":"ciz9wvzgm001cg38kcro6dmw3"},{"post_id":"cizazkwby00001z8k0gaba8s2","category_id":"cizazoflb00011z8k0vkimwet","_id":"cizazoflb00021z8k23xepyvp"},{"post_id":"cizazt4tx00081z8k7s42r5td","category_id":"ciz9wvzfo0008g38krflj0kmw","_id":"cizaztx5v000b1z8kx5eo7qf1"},{"post_id":"cizazw0qq000f1z8k8fo8qzhz","category_id":"ciz9wvzfo0008g38krflj0kmw","_id":"cizazwqyo000g1z8kq4r4eblf"},{"post_id":"cizazzk26000n1z8kbq65lu7j","category_id":"ciz9wvzfv000dg38kle20bjea","_id":"cizb002z5000o1z8kmxoj5okz"}],"PostTag":[{"post_id":"ciz9wvzf70000g38kivdwpe7i","tag_id":"ciz9wvzfi0004g38kb36dd7h1","_id":"ciz9wvzfx000gg38khhqk5q93"},{"post_id":"ciz9wvzf70000g38kivdwpe7i","tag_id":"ciz9wvzfo0009g38kq3w4v4my","_id":"ciz9wvzfz000jg38kevoufkuy"},{"post_id":"ciz9wvzfe0002g38kim7vnszd","tag_id":"ciz9wvzfw000eg38khlrc6s2b","_id":"ciz9wvzgd000tg38kpjlidhfc"},{"post_id":"ciz9wvzfe0002g38kim7vnszd","tag_id":"ciz9wvzfz000lg38kfvpeibl1","_id":"ciz9wvzge000xg38k0song6t3"},{"post_id":"ciz9wvzfj0005g38koirscdwp","tag_id":"ciz9wvzgb000rg38kozw2m82p","_id":"ciz9wvzgi0018g38kyyj0xc3f"},{"post_id":"ciz9wvzfj0005g38koirscdwp","tag_id":"ciz9wvzge000zg38kfge0fy6l","_id":"ciz9wvzgl001ag38kapgva3a0"},{"post_id":"ciz9wvzfj0005g38koirscdwp","tag_id":"ciz9wvzgg0013g38kelasnf83","_id":"ciz9wvzgm001dg38kujc9pgta"},{"post_id":"ciz9wvzfm0006g38kj93ss2hh","tag_id":"ciz9wvzge000zg38kfge0fy6l","_id":"ciz9wvzgq001hg38klxrbgqow"},{"post_id":"ciz9wvzfm0006g38kj93ss2hh","tag_id":"ciz9wvzgm001bg38kz3zsf5b4","_id":"ciz9wvzgq001ig38kpr6umi3i"},{"post_id":"ciz9wvzfm0006g38kj93ss2hh","tag_id":"ciz9wvzgg0013g38kelasnf83","_id":"ciz9wvzgr001kg38kfy7n8cs3"},{"post_id":"ciz9wvzfm0006g38kj93ss2hh","tag_id":"ciz9wvzgb000rg38kozw2m82p","_id":"ciz9wvzgr001lg38kuanfugyj"},{"post_id":"ciz9wvzfn0007g38kus0ljk39","tag_id":"ciz9wvzgb000rg38kozw2m82p","_id":"ciz9wvzgr001ng38ke2w0dhvc"},{"post_id":"ciz9wvzfn0007g38kus0ljk39","tag_id":"ciz9wvzgq001jg38k6vzxanyn","_id":"ciz9wvzgr001og38k7zff7fux"},{"post_id":"ciz9wvzfp000ag38k5t18h5s9","tag_id":"ciz9wvzgr001mg38kjaj2oqcq","_id":"ciz9wvzgs001rg38kinp3vnc9"},{"post_id":"ciz9wvzfp000ag38k5t18h5s9","tag_id":"ciz9wvzgr001pg38k619o0w4l","_id":"ciz9wvzgs001sg38kmsijqki7"},{"post_id":"ciz9wvzfu000cg38k19woh5ps","tag_id":"ciz9wvzfi0004g38kb36dd7h1","_id":"ciz9wvzgt001ug38kagw75lkh"},{"post_id":"ciz9wvzfu000cg38k19woh5ps","tag_id":"ciz9wvzgr001qg38ke7x55wx0","_id":"ciz9wvzgu001vg38ke4dnox9q"},{"post_id":"ciz9wvzfw000fg38koiqxcq64","tag_id":"ciz9wvzgb000rg38kozw2m82p","_id":"ciz9wvzgv001yg38kyzzo9pkb"},{"post_id":"ciz9wvzfw000fg38koiqxcq64","tag_id":"ciz9wvzgu001wg38k8cfk1syu","_id":"ciz9wvzgv001zg38kcwupidkv"},{"post_id":"ciz9wvzfy000hg38ke127929w","tag_id":"ciz9wvzge000zg38kfge0fy6l","_id":"ciz9wvzh00024g38k2847pnwd"},{"post_id":"ciz9wvzfy000hg38ke127929w","tag_id":"ciz9wvzfz000lg38kfvpeibl1","_id":"ciz9wvzh00025g38keiighecz"},{"post_id":"ciz9wvzfy000hg38ke127929w","tag_id":"ciz9wvzgx0021g38klu8aylsz","_id":"ciz9wvzh10027g38kpr0q8gvb"},{"post_id":"ciz9wvzfy000hg38ke127929w","tag_id":"ciz9wvzgz0022g38k66qdp7a1","_id":"ciz9wvzh20028g38k7xn2p6ww"},{"post_id":"ciz9wvzg2000mg38kehvaip2u","tag_id":"ciz9wvzgb000rg38kozw2m82p","_id":"ciz9wvzh2002ag38kbck47niv"},{"post_id":"ciz9wvzg2000mg38kehvaip2u","tag_id":"ciz9wvzfi0004g38kb36dd7h1","_id":"ciz9wvzh2002bg38kgn3solmo"},{"post_id":"ciz9wvzg2000mg38kehvaip2u","tag_id":"ciz9wvzh10026g38kxtazyuaq","_id":"ciz9wvzh2002dg38ktpbyvm9b"},{"post_id":"ciz9wvzg8000og38k964q3w6t","tag_id":"ciz9wvzh20029g38kcaebj6id","_id":"ciz9wvzh5002fg38kl9ta9n1f"},{"post_id":"ciz9wvzg8000og38k964q3w6t","tag_id":"ciz9wvzfo0009g38kq3w4v4my","_id":"ciz9wvzh6002gg38ksjztx74y"},{"post_id":"ciz9wvzg8000og38k964q3w6t","tag_id":"ciz9wvzfi0004g38kb36dd7h1","_id":"ciz9wvzh7002ig38kjwp3nk3q"},{"post_id":"ciz9wvzg8000og38k964q3w6t","tag_id":"ciz9wvzh2002cg38kwns8w3i2","_id":"ciz9wvzh7002jg38ks8epfyvb"},{"post_id":"ciz9wvzgb000sg38kicisuvjy","tag_id":"ciz9wvzfz000lg38kfvpeibl1","_id":"ciz9wvzh7002lg38k1zycjmox"},{"post_id":"ciz9wvzgb000sg38kicisuvjy","tag_id":"ciz9wvzh2002eg38k5jd3e32o","_id":"ciz9wvzh7002mg38kvj037amz"},{"post_id":"ciz9wvzgb000sg38kicisuvjy","tag_id":"ciz9wvzh6002hg38kd510fs7e","_id":"ciz9wvzh7002og38kduk9op7d"},{"post_id":"ciz9wvzgd000vg38kjw7asbwe","tag_id":"ciz9wvzge000zg38kfge0fy6l","_id":"ciz9wvzh8002pg38kkno16u24"},{"post_id":"ciz9wvzgd000vg38kjw7asbwe","tag_id":"ciz9wvzh7002ng38kkt64oj7o","_id":"ciz9wvzh8002qg38ktgxyaqun"},{"post_id":"ciz9wvzgd000vg38kjw7asbwe","tag_id":"ciz9wvzgb000rg38kozw2m82p","_id":"ciz9wvzh8002rg38kzuibn79g"},{"post_id":"cizazkwby00001z8k0gaba8s2","tag_id":"ciz9wvzh6002hg38kd510fs7e","_id":"cizazompk00031z8k3q9bw8h4"},{"post_id":"cizazkwby00001z8k0gaba8s2","tag_id":"cizazor0000041z8k5ollnjoj","_id":"cizazor0400051z8kcbw6trki"},{"post_id":"cizazkwby00001z8k0gaba8s2","tag_id":"cizazov4u00061z8k07s8d3zr","_id":"cizazov4u00071z8kgvkzyag5"},{"post_id":"cizazt4tx00081z8k7s42r5td","tag_id":"ciz9wvzfz000lg38kfvpeibl1","_id":"cizazu53r000c1z8kywd5hd59"},{"post_id":"cizazt4tx00081z8k7s42r5td","tag_id":"cizazu7fu000d1z8k3xe9hrsu","_id":"cizazu7fu000e1z8knso17vlb"},{"post_id":"cizazw0qq000f1z8k8fo8qzhz","tag_id":"cizazwws9000h1z8k0xwrgbm7","_id":"cizazwwsb000i1z8kcp2rm5w1"},{"post_id":"cizazw0qq000f1z8k8fo8qzhz","tag_id":"cizazx0hz000j1z8kw62wr7tn","_id":"cizazx0i0000k1z8kj8esgd8u"},{"post_id":"cizazw0qq000f1z8k8fo8qzhz","tag_id":"cizazx1zj000l1z8khicien3g","_id":"cizazx1zj000m1z8k249re5ul"},{"post_id":"cizazzk26000n1z8kbq65lu7j","tag_id":"cizb00kbc000p1z8kgmlwfrhn","_id":"cizb00kbf000q1z8kaqji86sf"},{"post_id":"cizazzk26000n1z8kbq65lu7j","tag_id":"ciz9wvzgb000rg38kozw2m82p","_id":"cizb00mqm000r1z8k2gsh37fz"},{"post_id":"cizazzk26000n1z8kbq65lu7j","tag_id":"cizb00qzy000s1z8kyghdrtir","_id":"cizb00r00000t1z8kxosi0mob"}],"Tag":[{"name":"PHP","_id":"ciz9wvzfi0004g38kb36dd7h1"},{"name":"Yii2","_id":"ciz9wvzfo0009g38kq3w4v4my"},{"name":"DynamoDB","_id":"ciz9wvzfw000eg38khlrc6s2b"},{"name":"Software","_id":"ciz9wvzfz000lg38kfvpeibl1"},{"name":"Server","_id":"ciz9wvzgb000rg38kozw2m82p"},{"name":"Ubuntu","_id":"ciz9wvzge000zg38kfge0fy6l"},{"name":"Nginx","_id":"ciz9wvzgg0013g38kelasnf83"},{"name":"HTTPS","_id":"ciz9wvzgm001bg38kz3zsf5b4"},{"name":"Shadowsocks","_id":"ciz9wvzgq001jg38k6vzxanyn"},{"name":"Linux","_id":"ciz9wvzgr001mg38kjaj2oqcq"},{"name":"Shell","_id":"ciz9wvzgr001pg38k619o0w4l"},{"name":"Tips","_id":"ciz9wvzgr001qg38ke7x55wx0"},{"name":"Siege","_id":"ciz9wvzgu001wg38k8cfk1syu"},{"name":"PPA","_id":"ciz9wvzgx0021g38klu8aylsz"},{"name":"Sources","_id":"ciz9wvzgz0022g38k66qdp7a1"},{"name":"Process Manager","_id":"ciz9wvzh10026g38kxtazyuaq"},{"name":"Mina","_id":"ciz9wvzh20029g38kcaebj6id"},{"name":"Deploy","_id":"ciz9wvzh2002cg38kwns8w3i2"},{"name":"GEM","_id":"ciz9wvzh2002eg38k5jd3e32o"},{"name":"Ruby","_id":"ciz9wvzh6002hg38kd510fs7e"},{"name":"Swap","_id":"ciz9wvzh7002ng38kkt64oj7o"},{"name":"Cache","_id":"cizazor0000041z8k5ollnjoj"},{"name":"Rails","_id":"cizazov4u00061z8k07s8d3zr"},{"name":"OSX","_id":"cizazu7fu000d1z8k3xe9hrsu"},{"name":"brew","_id":"cizazwws9000h1z8k0xwrgbm7"},{"name":"rbenv","_id":"cizazx0hz000j1z8kw62wr7tn"},{"name":"ruby","_id":"cizazx1zj000l1z8khicien3g"},{"name":"AirFlow","_id":"cizb00kbc000p1z8kgmlwfrhn"},{"name":"Supervisord","_id":"cizb00qzy000s1z8kyghdrtir"}]}}